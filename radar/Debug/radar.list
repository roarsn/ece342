
radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031ec  080090c0  080090c0  000190c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2ac  0800c2ac  000221d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2ac  0800c2ac  0001c2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2b4  0800c2b4  000221d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2b4  0800c2b4  0001c2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2b8  0800c2b8  0001c2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000021d8  20000000  0800c2bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001328  200021d8  0800e494  000221d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003500  0800e494  00023500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000221d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00022208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001285e  00000000  00000000  0002224b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a74  00000000  00000000  00034aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  00037520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e41  00000000  00000000  000384f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f39  00000000  00000000  0005e339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e30d4  00000000  00000000  00076272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000c0a  00000000  00000000  00159346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005190  00000000  00000000  00159f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0015f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200021d8 	.word	0x200021d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080090a4 	.word	0x080090a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200021dc 	.word	0x200021dc
 800020c:	080090a4 	.word	0x080090a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	sprintf(message, "PRinting test\n");
 8000ee8:	4920      	ldr	r1, [pc, #128]	; (8000f6c <main+0x88>)
 8000eea:	4821      	ldr	r0, [pc, #132]	; (8000f70 <main+0x8c>)
 8000eec:	f005 ff7e 	bl	8006dec <siprintf>
	print_msg(message); //UART transmit
 8000ef0:	481f      	ldr	r0, [pc, #124]	; (8000f70 <main+0x8c>)
 8000ef2:	f000 fa6b 	bl	80013cc <print_msg>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f002 fe9f 	bl	8003c38 <HAL_Init>
  //if(status==HAL_OK)
  //timer = __HAL_TIM_GET_COUNTER(&htim6);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efa:	f000 f845 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f000 f975 	bl	80011ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000f02:	f000 f953 	bl	80011ac <MX_DMA_Init>
  MX_ADC3_Init();
 8000f06:	f000 f89f 	bl	8001048 <MX_ADC3_Init>
  MX_TIM6_Init();
 8000f0a:	f000 f8ef 	bl	80010ec <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000f0e:	f000 f923 	bl	8001158 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	4817      	ldr	r0, [pc, #92]	; (8000f74 <main+0x90>)
 8000f16:	f003 ff40 	bl	8004d9a <HAL_GPIO_TogglePin>
  	  HAL_Delay(10);
 8000f1a:	200a      	movs	r0, #10
 8000f1c:	f002 fefe 	bl	8003d1c <HAL_Delay>

  	  print_msg("Printing\n");
 8000f20:	4815      	ldr	r0, [pc, #84]	; (8000f78 <main+0x94>)
 8000f22:	f000 fa53 	bl	80013cc <print_msg>
  	  //print_msg("Hi");
  	  HAL_Delay(100);
 8000f26:	2064      	movs	r0, #100	; 0x64
 8000f28:	f002 fef8 	bl	8003d1c <HAL_Delay>
  	  //timer= __HAL_TIM_GET_COUNTER(&htim6) - timer;

  	  //if (dma_hflag)
  	  freq=do_my_fft(testInput_f32_10khz);//on HALF the buffer
 8000f2c:	4813      	ldr	r0, [pc, #76]	; (8000f7c <main+0x98>)
 8000f2e:	f000 f9d5 	bl	80012dc <do_my_fft>
 8000f32:	eef0 7a40 	vmov.f32	s15, s0
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <main+0x9c>)
 8000f38:	edc3 7a00 	vstr	s15, [r3]
  	  //dma_hflag=0;
  	  if(freq!=0){
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <main+0x9c>)
 8000f3e:	edd3 7a00 	vldr	s15, [r3]
 8000f42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4a:	d0e2      	beq.n	8000f12 <main+0x2e>
  		sprintf(message,"freq: %lf", freq);
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <main+0x9c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fb19 	bl	8000588 <__aeabi_f2d>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	490a      	ldr	r1, [pc, #40]	; (8000f84 <main+0xa0>)
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <main+0x8c>)
 8000f5e:	f005 ff45 	bl	8006dec <siprintf>
  		print_msg(message);
 8000f62:	4803      	ldr	r0, [pc, #12]	; (8000f70 <main+0x8c>)
 8000f64:	f000 fa32 	bl	80013cc <print_msg>
  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f68:	e7d3      	b.n	8000f12 <main+0x2e>
 8000f6a:	bf00      	nop
 8000f6c:	080090c0 	.word	0x080090c0
 8000f70:	20003348 	.word	0x20003348
 8000f74:	40020400 	.word	0x40020400
 8000f78:	080090d0 	.word	0x080090d0
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20003340 	.word	0x20003340
 8000f84:	080090dc 	.word	0x080090dc

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	; 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	2234      	movs	r2, #52	; 0x34
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f005 ff8b 	bl	8006eb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <SystemClock_Config+0xb8>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a22      	ldr	r2, [pc, #136]	; (8001040 <SystemClock_Config+0xb8>)
 8000fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <SystemClock_Config+0xb8>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <SystemClock_Config+0xbc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	; (8001044 <SystemClock_Config+0xbc>)
 8000fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <SystemClock_Config+0xbc>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fec:	2301      	movs	r3, #1
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f004 f9ab 	bl	8005358 <HAL_RCC_OscConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001008:	f000 f9f4 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100c:	230f      	movs	r3, #15
 800100e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f003 fed2 	bl	8004dd0 <HAL_RCC_ClockConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001032:	f000 f9df 	bl	80013f4 <Error_Handler>
  }
}
 8001036:	bf00      	nop
 8001038:	3750      	adds	r7, #80	; 0x50
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40007000 	.word	0x40007000

08001048 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_ADC3_Init+0x98>)
 800105c:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <MX_ADC3_Init+0x9c>)
 800105e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_ADC3_Init+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_ADC3_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_ADC3_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_ADC3_Init+0x98>)
 8001074:	2201      	movs	r2, #1
 8001076:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_ADC3_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_ADC3_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_ADC3_Init+0x98>)
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <MX_ADC3_Init+0xa0>)
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_ADC3_Init+0x98>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_ADC3_Init+0x98>)
 8001094:	2201      	movs	r2, #1
 8001096:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_ADC3_Init+0x98>)
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_ADC3_Init+0x98>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010a6:	480e      	ldr	r0, [pc, #56]	; (80010e0 <MX_ADC3_Init+0x98>)
 80010a8:	f002 fe5c 	bl	8003d64 <HAL_ADC_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80010b2:	f000 f99f 	bl	80013f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010b6:	230f      	movs	r3, #15
 80010b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_ADC3_Init+0x98>)
 80010c8:	f002 fe90 	bl	8003dec <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80010d2:	f000 f98f 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200021f4 	.word	0x200021f4
 80010e4:	40012200 	.word	0x40012200
 80010e8:	0f000001 	.word	0x0f000001

080010ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_TIM6_Init+0x64>)
 80010fc:	4a15      	ldr	r2, [pc, #84]	; (8001154 <MX_TIM6_Init+0x68>)
 80010fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_TIM6_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_TIM6_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <MX_TIM6_Init+0x64>)
 800110e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001112:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_TIM6_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_TIM6_Init+0x64>)
 800111c:	f004 fbba 	bl	8005894 <HAL_TIM_Base_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001126:	f000 f965 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <MX_TIM6_Init+0x64>)
 8001138:	f004 fca8 	bl	8005a8c <HAL_TIMEx_MasterConfigSynchronization>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001142:	f000 f957 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000229c 	.word	0x2000229c
 8001154:	40001000 	.word	0x40001000

08001158 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_USART3_UART_Init+0x4c>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_USART3_UART_Init+0x50>)
 8001160:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_USART3_UART_Init+0x4c>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_USART3_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_USART3_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_USART3_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_USART3_UART_Init+0x4c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_USART3_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_USART3_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_USART3_UART_Init+0x4c>)
 8001190:	f004 fcf8 	bl	8005b84 <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800119a:	f000 f92b 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200022e4 	.word	0x200022e4
 80011a8:	40004800 	.word	0x40004800

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_DMA_Init+0x3c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <MX_DMA_Init+0x3c>)
 80011bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_DMA_Init+0x3c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2038      	movs	r0, #56	; 0x38
 80011d4:	f003 f913 	bl	80043fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011d8:	2038      	movs	r0, #56	; 0x38
 80011da:	f003 f92c 	bl	8004436 <HAL_NVIC_EnableIRQ>

}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <MX_GPIO_Init+0xe4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a31      	ldr	r2, [pc, #196]	; (80012d0 <MX_GPIO_Init+0xe4>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <MX_GPIO_Init+0xe4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <MX_GPIO_Init+0xe4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a2a      	ldr	r2, [pc, #168]	; (80012d0 <MX_GPIO_Init+0xe4>)
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <MX_GPIO_Init+0xe4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0320 	and.w	r3, r3, #32
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <MX_GPIO_Init+0xe4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <MX_GPIO_Init+0xe4>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <MX_GPIO_Init+0xe4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_GPIO_Init+0xe4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <MX_GPIO_Init+0xe4>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_GPIO_Init+0xe4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Btn_Push_GPIO_Port, Btn_Push_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001278:	4816      	ldr	r0, [pc, #88]	; (80012d4 <MX_GPIO_Init+0xe8>)
 800127a:	f003 fd75 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f244 0181 	movw	r1, #16513	; 0x4081
 8001284:	4814      	ldr	r0, [pc, #80]	; (80012d8 <MX_GPIO_Init+0xec>)
 8001286:	f003 fd6f 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Btn_Push_Pin */
  GPIO_InitStruct.Pin = Btn_Push_Pin;
 800128a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Btn_Push_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	480c      	ldr	r0, [pc, #48]	; (80012d4 <MX_GPIO_Init+0xe8>)
 80012a4:	f003 fbcc 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80012a8:	f244 0381 	movw	r3, #16513	; 0x4081
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_GPIO_Init+0xec>)
 80012c2:	f003 fbbd 	bl	8004a40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020400 	.word	0x40020400

080012dc <do_my_fft>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc3){
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
	dma_fflag=1;
}

float32_t do_my_fft(float32_t* fft_input){ //since fft_input is an array
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

	// Convert ADC value to float32 and prepare the input buffer for FFT
	//float32_t input_sample = (float32_t)adc_val; //should there be a loop here? num samples is in fft_input, so array can hold up to 1048 or whatever
	//fft_input[0] = input_sample;
	//fft_input[1] = 0.0f;
	uint32_t peak_index=0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
	float32_t maxValue;

	math_status=arm_cfft_init_1024_f32(&fft_instance);
 80012e8:	482e      	ldr	r0, [pc, #184]	; (80013a4 <do_my_fft+0xc8>)
 80012ea:	f001 fc7b 	bl	8002be4 <arm_cfft_init_1024_f32>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <do_my_fft+0xcc>)
 80012f4:	701a      	strb	r2, [r3, #0]
	// Perform FFT
	arm_cfft_f32(&fft_instance, fft_input,ifftFlag,doBitReverse);//forward, no bit reversal
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <do_my_fft+0xd0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <do_my_fft+0xd4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4827      	ldr	r0, [pc, #156]	; (80013a4 <do_my_fft+0xc8>)
 8001306:	f001 fbb3 	bl	8002a70 <arm_cfft_f32>

	// Calculate magnitude spectrum
	arm_cmplx_mag_f32(fft_input, fft_output, FFT_SIZE);
 800130a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130e:	4929      	ldr	r1, [pc, #164]	; (80013b4 <do_my_fft+0xd8>)
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 fab4 	bl	800187e <arm_cmplx_mag_f32>

	// Find peak index (index of dominant freq)
	arm_max_f32(fft_output, FFT_SIZE, &maxValue, &peak_index); //index of max value of fft output
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	f107 0208 	add.w	r2, r7, #8
 800131e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001322:	4824      	ldr	r0, [pc, #144]	; (80013b4 <do_my_fft+0xd8>)
 8001324:	f000 faef 	bl	8001906 <arm_max_f32>
	sprintf(message,"peak Index = %ld \n", peak_index);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	461a      	mov	r2, r3
 800132c:	4922      	ldr	r1, [pc, #136]	; (80013b8 <do_my_fft+0xdc>)
 800132e:	4823      	ldr	r0, [pc, #140]	; (80013bc <do_my_fft+0xe0>)
 8001330:	f005 fd5c 	bl	8006dec <siprintf>
	print_msg(message);//should be 213 for test
 8001334:	4821      	ldr	r0, [pc, #132]	; (80013bc <do_my_fft+0xe0>)
 8001336:	f000 f849 	bl	80013cc <print_msg>
	// Calculate frequency in Hz
	uint8_t prescale=1;
 800133a:	2301      	movs	r3, #1
 800133c:	77fb      	strb	r3, [r7, #31]
	if (hadc3.Init.ClockPrescaler==ADC_CLOCK_SYNC_PCLK_DIV2)
 800133e:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <do_my_fft+0xe4>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <do_my_fft+0x70>
		prescale=2;
 8001346:	2302      	movs	r3, #2
 8001348:	77fb      	strb	r3, [r7, #31]
 800134a:	e006      	b.n	800135a <do_my_fft+0x7e>
	else if (hadc3.Init.ClockPrescaler==ADC_CLOCK_SYNC_PCLK_DIV4)
 800134c:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <do_my_fft+0xe4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001354:	d101      	bne.n	800135a <do_my_fft+0x7e>
		prescale=4;
 8001356:	2304      	movs	r3, #4
 8001358:	77fb      	strb	r3, [r7, #31]
	uint32_t adc_clock_frequency = 0x1C9C380/prescale;//ADC clock prescaler=div4;
 800135a:	7ffb      	ldrb	r3, [r7, #31]
 800135c:	4a19      	ldr	r2, [pc, #100]	; (80013c4 <do_my_fft+0xe8>)
 800135e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001362:	61bb      	str	r3, [r7, #24]
	uint32_t adc_conversions_per_second = 0x0;/* Number of ADC conversions per second */
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
	float32_t sampling_frequency = adc_clock_frequency / adc_conversions_per_second;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001378:	edc7 7a04 	vstr	s15, [r7, #16]

	//float32_t sampling_frequency = (float32_t)ADC_SAMPLETIME_3CYCLES/ (float32_t)ADC_CLOCKPRESCALER;  //clock freq/conversions per second
	return (float32_t)peak_index * sampling_frequency / FFT_SIZE; //freq = peak*freq resolution (bin width)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001386:	edd7 7a04 	vldr	s15, [r7, #16]
 800138a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80013c8 <do_my_fft+0xec>
 8001392:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001396:	eef0 7a66 	vmov.f32	s15, s13


 }
 800139a:	eeb0 0a67 	vmov.f32	s0, s15
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20002330 	.word	0x20002330
 80013a8:	20003344 	.word	0x20003344
 80013ac:	2000232c 	.word	0x2000232c
 80013b0:	20002000 	.word	0x20002000
 80013b4:	20002340 	.word	0x20002340
 80013b8:	080090e8 	.word	0x080090e8
 80013bc:	20003348 	.word	0x20003348
 80013c0:	200021f4 	.word	0x200021f4
 80013c4:	01c9c380 	.word	0x01c9c380
 80013c8:	44800000 	.word	0x44800000

080013cc <print_msg>:

void print_msg(char * msg) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7fe ff6b 	bl	80002b0 <strlen>
 80013da:	4603      	mov	r3, r0
 80013dc:	b29a      	uxth	r2, r3
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <print_msg+0x24>)
 80013e4:	f004 fc1e 	bl	8005c24 <HAL_UART_Transmit>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200022e4 	.word	0x200022e4

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	e7fe      	b.n	80013fc <Error_Handler+0x8>
	...

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_MspInit+0x4c>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_MspInit+0x4c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <HAL_MspInit+0x4c>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_MspInit+0x4c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a2f      	ldr	r2, [pc, #188]	; (800152c <HAL_ADC_MspInit+0xdc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d158      	bne.n	8001524 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_ADC_MspInit+0xe0>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a2d      	ldr	r2, [pc, #180]	; (8001530 <HAL_ADC_MspInit+0xe0>)
 800147c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_ADC_MspInit+0xe0>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_ADC_MspInit+0xe0>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a26      	ldr	r2, [pc, #152]	; (8001530 <HAL_ADC_MspInit+0xe0>)
 8001498:	f043 0320 	orr.w	r3, r3, #32
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_ADC_MspInit+0xe0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0320 	and.w	r3, r3, #32
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF5     ------> ADC3_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014aa:	2320      	movs	r3, #32
 80014ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ae:	2303      	movs	r3, #3
 80014b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	481d      	ldr	r0, [pc, #116]	; (8001534 <HAL_ADC_MspInit+0xe4>)
 80014be:	f003 fabf 	bl	8004a40 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_ADC_MspInit+0xe8>)
 80014c4:	4a1d      	ldr	r2, [pc, #116]	; (800153c <HAL_ADC_MspInit+0xec>)
 80014c6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_ADC_MspInit+0xe8>)
 80014ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014ce:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_ADC_MspInit+0xe8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_ADC_MspInit+0xe8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_ADC_MspInit+0xe8>)
 80014de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_ADC_MspInit+0xe8>)
 80014e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ea:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_ADC_MspInit+0xe8>)
 80014ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_ADC_MspInit+0xe8>)
 80014f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014fa:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_ADC_MspInit+0xe8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_ADC_MspInit+0xe8>)
 8001504:	2200      	movs	r2, #0
 8001506:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <HAL_ADC_MspInit+0xe8>)
 800150a:	f002 ffaf 	bl	800446c <HAL_DMA_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001514:	f7ff ff6e 	bl	80013f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_ADC_MspInit+0xe8>)
 800151c:	639a      	str	r2, [r3, #56]	; 0x38
 800151e:	4a06      	ldr	r2, [pc, #24]	; (8001538 <HAL_ADC_MspInit+0xe8>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	; 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40012200 	.word	0x40012200
 8001530:	40023800 	.word	0x40023800
 8001534:	40021400 	.word	0x40021400
 8001538:	2000223c 	.word	0x2000223c
 800153c:	40026410 	.word	0x40026410

08001540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <HAL_TIM_Base_MspInit+0x3c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10d      	bne.n	800156e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_TIM_Base_MspInit+0x40>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <HAL_TIM_Base_MspInit+0x40>)
 800155c:	f043 0310 	orr.w	r3, r3, #16
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <HAL_TIM_Base_MspInit+0x40>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40001000 	.word	0x40001000
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a19      	ldr	r2, [pc, #100]	; (8001608 <HAL_UART_MspInit+0x84>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d12c      	bne.n	8001600 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_UART_MspInit+0x88>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_UART_MspInit+0x88>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_UART_MspInit+0x88>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_UART_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_UART_MspInit+0x88>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_UART_MspInit+0x88>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015f0:	2307      	movs	r3, #7
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_UART_MspInit+0x8c>)
 80015fc:	f003 fa20 	bl	8004a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3728      	adds	r7, #40	; 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40004800 	.word	0x40004800
 800160c:	40023800 	.word	0x40023800
 8001610:	40020c00 	.word	0x40020c00

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x4>

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001660:	f002 fb3c 	bl	8003cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <DMA2_Stream0_IRQHandler+0x10>)
 800166e:	f002 ffab 	bl	80045c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2000223c 	.word	0x2000223c

0800167c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return 1;
 8001680:	2301      	movs	r3, #1
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_kill>:

int _kill(int pid, int sig)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001696:	f005 fc5f 	bl	8006f58 <__errno>
 800169a:	4603      	mov	r3, r0
 800169c:	2216      	movs	r2, #22
 800169e:	601a      	str	r2, [r3, #0]
  return -1;
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_exit>:

void _exit (int status)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ffe7 	bl	800168c <_kill>
  while (1) {}    /* Make sure we hang here */
 80016be:	e7fe      	b.n	80016be <_exit+0x12>

080016c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e00a      	b.n	80016e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016d2:	f3af 8000 	nop.w
 80016d6:	4601      	mov	r1, r0
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60ba      	str	r2, [r7, #8]
 80016de:	b2ca      	uxtb	r2, r1
 80016e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	dbf0      	blt.n	80016d2 <_read+0x12>
  }

  return len;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e009      	b.n	8001720 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	60ba      	str	r2, [r7, #8]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	429a      	cmp	r2, r3
 8001726:	dbf1      	blt.n	800170c <_write+0x12>
  }
  return len;
 8001728:	687b      	ldr	r3, [r7, #4]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_close>:

int _close(int file)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175a:	605a      	str	r2, [r3, #4]
  return 0;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <_isatty>:

int _isatty(int file)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <_sbrk+0x5c>)
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <_sbrk+0x60>)
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_sbrk+0x64>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <_sbrk+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d207      	bcs.n	80017dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017cc:	f005 fbc4 	bl	8006f58 <__errno>
 80017d0:	4603      	mov	r3, r0
 80017d2:	220c      	movs	r2, #12
 80017d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	e009      	b.n	80017f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <_sbrk+0x64>)
 80017ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20020000 	.word	0x20020000
 80017fc:	00000400 	.word	0x00000400
 8001800:	200033ac 	.word	0x200033ac
 8001804:	20003500 	.word	0x20003500

08001808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <SystemInit+0x20>)
 800180e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <SystemInit+0x20>)
 8001814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800182c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001864 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001830:	f7ff ffea 	bl	8001808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001834:	480c      	ldr	r0, [pc, #48]	; (8001868 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001836:	490d      	ldr	r1, [pc, #52]	; (800186c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800184c:	4c0a      	ldr	r4, [pc, #40]	; (8001878 <LoopFillZerobss+0x22>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800185a:	f005 fb83 	bl	8006f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185e:	f7ff fb41 	bl	8000ee4 <main>
  bx  lr    
 8001862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800186c:	200021d8 	.word	0x200021d8
  ldr r2, =_sidata
 8001870:	0800c2bc 	.word	0x0800c2bc
  ldr r2, =_sbss
 8001874:	200021d8 	.word	0x200021d8
  ldr r4, =_ebss
 8001878:	20003500 	.word	0x20003500

0800187c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC_IRQHandler>

0800187e <arm_cmplx_mag_f32>:
#else
void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 800187e:	b480      	push	{r7}
 8001880:	b08b      	sub	sp, #44	; 0x2c
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 800188e:	e030      	b.n	80018f2 <arm_cmplx_mag_f32+0x74>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1d1a      	adds	r2, r3, #4
 8001894:	60fa      	str	r2, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	623b      	str	r3, [r7, #32]
    imag = *pSrc++;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1d1a      	adds	r2, r3, #4
 800189e:	60fa      	str	r2, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	61fb      	str	r3, [r7, #28]

    /* store result in destination buffer. */
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 80018a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80018a8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80018b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1d1a      	adds	r2, r3, #4
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	edc7 7a06 	vstr	s15, [r7, #24]
 80018c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80018c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80018c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	db07      	blt.n	80018e2 <arm_cmplx_mag_f32+0x64>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 80018d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80018d6:	eef1 7ae7 	vsqrt.f32	s15, s15
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	edc3 7a00 	vstr	s15, [r3]
  #endif
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 80018e0:	e004      	b.n	80018ec <arm_cmplx_mag_f32+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80018ea:	bf00      	nop

    /* Decrement loop counter */
    blkCnt--;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	3b01      	subs	r3, #1
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1cb      	bne.n	8001890 <arm_cmplx_mag_f32+0x12>
  }

}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	372c      	adds	r7, #44	; 0x2c
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 8001906:	b480      	push	{r7}
 8001908:	b089      	sub	sp, #36	; 0x24
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1d1a      	adds	r2, r3, #4
 800191c:	60fa      	str	r2, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	3b01      	subs	r3, #1
 8001926:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001928:	e016      	b.n	8001958 <arm_max_f32+0x52>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1d1a      	adds	r2, r3, #4
 800192e:	60fa      	str	r2, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 8001934:	ed97 7a07 	vldr	s14, [r7, #28]
 8001938:	edd7 7a04 	vldr	s15, [r7, #16]
 800193c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	d505      	bpl.n	8001952 <arm_max_f32+0x4c>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	3b01      	subs	r3, #1
 8001956:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1e5      	bne.n	800192a <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	601a      	str	r2, [r3, #0]
}
 800196a:	bf00      	nop
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8001976:	b480      	push	{r7}
 8001978:	b089      	sub	sp, #36	; 0x24
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	460b      	mov	r3, r1
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	e043      	b.n	8001a12 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	b29b      	uxth	r3, r3
 8001998:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3301      	adds	r3, #1
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	441a      	add	r2, r3
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	68f9      	ldr	r1, [r7, #12]
 80019c6:	440b      	add	r3, r1
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	3301      	adds	r3, #1
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3301      	adds	r3, #1
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	441a      	add	r2, r3
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	3301      	adds	r3, #1
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	68f9      	ldr	r1, [r7, #12]
 80019f8:	440b      	add	r3, r1
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3301      	adds	r3, #1
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	601a      	str	r2, [r3, #0]

    i += 2;
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	3302      	adds	r3, #2
 8001a10:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8001a12:	897b      	ldrh	r3, [r7, #10]
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d3b7      	bcc.n	800198a <arm_bitreversal_32+0x14>
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	3724      	adds	r7, #36	; 0x24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0a0      	sub	sp, #128	; 0x80
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8001a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8001a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a4e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8001a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a52:	085b      	lsrs	r3, r3, #1
 8001a54:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8001a56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8001a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001a66:	4413      	add	r3, r2
 8001a68:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8001a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a6c:	089b      	lsrs	r3, r3, #2
 8001a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a70:	e1b6      	b.n	8001de0 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8001a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8001a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8001a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8001a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8001aa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8001aa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8001aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8001ab4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8001aba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8001ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8001ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8001acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8001ad2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001ad6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	1d1a      	adds	r2, r3, #4
 8001ade:	603a      	str	r2, [r7, #0]
 8001ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae4:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8001ae8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001aec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	1d1a      	adds	r2, r3, #4
 8001af4:	603a      	str	r2, [r7, #0]
 8001af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afa:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8001afe:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001b02:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	1d1a      	adds	r2, r3, #4
 8001b0a:	603a      	str	r2, [r7, #0]
 8001b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b10:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8001b14:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001b18:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	1d1a      	adds	r2, r3, #4
 8001b20:	603a      	str	r2, [r7, #0]
 8001b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b26:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8001b2a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001b2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b36:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8001b3a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b3e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b46:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8001b4a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001b4e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b56:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8001b5a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001b5e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b66:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 8001b6a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b74:	1d1a      	adds	r2, r3, #4
 8001b76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8001b80:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b8a:	1d1a      	adds	r2, r3, #4
 8001b8c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b92:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8001b96:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ba0:	1d1a      	adds	r2, r3, #4
 8001ba2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba8:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8001bac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001bb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bb6:	1d1a      	adds	r2, r3, #4
 8001bb8:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbe:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8001bc2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bce:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8001bd2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bd6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bde:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8001be2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001be6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bee:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8001bf2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bf6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bfe:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8001c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c04:	1d1a      	adds	r2, r3, #4
 8001c06:	673a      	str	r2, [r7, #112]	; 0x70
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8001c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c0e:	1d1a      	adds	r2, r3, #4
 8001c10:	673a      	str	r2, [r7, #112]	; 0x70
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8001c16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c1a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c22:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8001c26:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c2a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c32:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 8001c36:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c3a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c42:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 8001c46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c4a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c52:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8001c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c58:	1d1a      	adds	r2, r3, #4
 8001c5a:	677a      	str	r2, [r7, #116]	; 0x74
 8001c5c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001c60:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c68:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8001c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c6e:	1d1a      	adds	r2, r3, #4
 8001c70:	677a      	str	r2, [r7, #116]	; 0x74
 8001c72:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001c76:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7e:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8001c82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c86:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 8001c92:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c96:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 8001ca2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cae:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 8001cb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbe:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8001cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cc4:	1d1a      	adds	r2, r3, #4
 8001cc6:	67ba      	str	r2, [r7, #120]	; 0x78
 8001cc8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001ccc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd4:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8001cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cda:	1d1a      	adds	r2, r3, #4
 8001cdc:	67ba      	str	r2, [r7, #120]	; 0x78
 8001cde:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ce2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cea:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8001cee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf0:	1d1a      	adds	r2, r3, #4
 8001cf2:	673a      	str	r2, [r7, #112]	; 0x70
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8001cf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cfa:	1d1a      	adds	r2, r3, #4
 8001cfc:	673a      	str	r2, [r7, #112]	; 0x70
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 8001d02:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d06:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 8001d12:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d16:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8001d22:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d26:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8001d32:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d36:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8001d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d44:	1d1a      	adds	r2, r3, #4
 8001d46:	677a      	str	r2, [r7, #116]	; 0x74
 8001d48:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001d4c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d54:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d5a:	1d1a      	adds	r2, r3, #4
 8001d5c:	677a      	str	r2, [r7, #116]	; 0x74
 8001d5e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001d62:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d6a:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8001d6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d72:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8001d7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d82:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8001d8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d92:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8001d9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001da2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001daa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8001dae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001db0:	1d1a      	adds	r2, r3, #4
 8001db2:	67ba      	str	r2, [r7, #120]	; 0x78
 8001db4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001db8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc0:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8001dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dc6:	1d1a      	adds	r2, r3, #4
 8001dc8:	67ba      	str	r2, [r7, #120]	; 0x78
 8001dca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001dce:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd6:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8001dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f47f ae45 	bne.w	8001a72 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8001de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dea:	b299      	uxth	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	2302      	movs	r3, #2
 8001df2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001df4:	f000 ff1a 	bl	8002c2c <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8001df8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dfa:	b299      	uxth	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	2302      	movs	r3, #2
 8001e02:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001e04:	f000 ff12 	bl	8002c2c <arm_radix8_butterfly_f32>
}
 8001e08:	bf00      	nop
 8001e0a:	3780      	adds	r7, #128	; 0x80
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b0ac      	sub	sp, #176	; 0xb0
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	085b      	lsrs	r3, r3, #1
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8001e26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8001e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001e3e:	4413      	add	r3, r2
 8001e40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8001e44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001e4e:	4413      	add	r3, r2
 8001e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8001e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e5c:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8001e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e62:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8001e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e68:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8001e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8001e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e78:	3b04      	subs	r3, #4
 8001e7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8001e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e82:	3b04      	subs	r3, #4
 8001e84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8001e88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001e92:	4413      	add	r3, r2
 8001e94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8001eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001eb4:	085b      	lsrs	r3, r3, #1
 8001eb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8001ec2:	2306      	movs	r3, #6
 8001ec4:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	ed93 7a00 	vldr	s14, [r3]
 8001ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eee:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	ed93 7a00 	vldr	s14, [r3]
 8001efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001efe:	3304      	adds	r3, #4
 8001f00:	edd3 7a00 	vldr	s15, [r3]
 8001f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f08:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	ed93 7a00 	vldr	s14, [r3]
 8001f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f18:	3304      	adds	r3, #4
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f22:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001f26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	ed93 7a00 	vldr	s14, [r3]
 8001f30:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f46:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001f4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f4e:	edd3 7a00 	vldr	s15, [r3]
 8001f52:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001f56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f5e:	edd3 7a00 	vldr	s15, [r3]
 8001f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f66:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001f6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001f76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f86:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001f8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f8e:	3304      	adds	r3, #4
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001f98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001faa:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001fae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001fbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	edd3 7a00 	vldr	s15, [r3]
 8001fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fce:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001fd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fd6:	ed93 7a00 	vldr	s14, [r3]
 8001fda:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fee:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001ff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ff6:	ed93 7a00 	vldr	s14, [r3]
 8001ffa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ffe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002002:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	1d1a      	adds	r2, r3, #4
 800200e:	603a      	str	r2, [r7, #0]
 8002010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002014:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002018:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800201c:	3304      	adds	r3, #4
 800201e:	ed93 7a00 	vldr	s14, [r3]
 8002022:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002026:	ee37 7a27 	vadd.f32	s14, s14, s15
 800202a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800202e:	3304      	adds	r3, #4
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	1d1a      	adds	r2, r3, #4
 8002038:	603a      	str	r2, [r7, #0]
 800203a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203e:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8002042:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002046:	1d1a      	adds	r2, r3, #4
 8002048:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800204c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800204e:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8002050:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002054:	1d1a      	adds	r2, r3, #4
 8002056:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800205a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800205c:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800205e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002062:	1d1a      	adds	r2, r3, #4
 8002064:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800206c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002070:	1d1a      	adds	r2, r3, #4
 8002072:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002076:	6a3a      	ldr	r2, [r7, #32]
 8002078:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800207a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800207e:	1d1a      	adds	r2, r3, #4
 8002080:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8002088:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800208c:	1d1a      	adds	r2, r3, #4
 800208e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8002096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800209e:	4413      	add	r3, r2
 80020a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80020a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020ac:	4413      	add	r3, r2
 80020ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80020b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020ba:	4413      	add	r3, r2
 80020bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80020c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020c4:	3b02      	subs	r3, #2
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80020cc:	e31c      	b.n	8002708 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	ed93 7a00 	vldr	s14, [r3]
 80020ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	3304      	adds	r3, #4
 80020fe:	ed93 7a00 	vldr	s14, [r3]
 8002102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002106:	3304      	adds	r3, #4
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002110:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	3304      	adds	r3, #4
 8002118:	ed93 7a00 	vldr	s14, [r3]
 800211c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002120:	3304      	adds	r3, #4
 8002122:	edd3 7a00 	vldr	s15, [r3]
 8002126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800212e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002132:	3304      	adds	r3, #4
 8002134:	ed93 7a00 	vldr	s14, [r3]
 8002138:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800213c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002140:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002144:	3304      	adds	r3, #4
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800214e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002152:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800215e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002162:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002166:	edd3 7a00 	vldr	s15, [r3]
 800216a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002172:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800217e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002182:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800218e:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002196:	3304      	adds	r3, #4
 8002198:	edd3 7a00 	vldr	s15, [r3]
 800219c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80021a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021a8:	3304      	adds	r3, #4
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b2:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 80021b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021ba:	3304      	adds	r3, #4
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80021c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021cc:	3304      	adds	r3, #4
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d6:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 80021da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021de:	ed93 7a00 	vldr	s14, [r3]
 80021e2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80021e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f6:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 80021fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021fe:	ed93 7a00 	vldr	s14, [r3]
 8002202:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002206:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	1d1a      	adds	r2, r3, #4
 8002216:	603a      	str	r2, [r7, #0]
 8002218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221c:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002220:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002224:	3304      	adds	r3, #4
 8002226:	ed93 7a00 	vldr	s14, [r3]
 800222a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800222e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002232:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002236:	3304      	adds	r3, #4
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	1d1a      	adds	r2, r3, #4
 8002240:	603a      	str	r2, [r7, #0]
 8002242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002246:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800224a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800224e:	3b04      	subs	r3, #4
 8002250:	ed93 7a00 	vldr	s14, [r3]
 8002254:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002258:	3b04      	subs	r3, #4
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002262:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8002266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800226a:	3b04      	subs	r3, #4
 800226c:	ed93 7a00 	vldr	s14, [r3]
 8002270:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002274:	3b04      	subs	r3, #4
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8002282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002286:	ed93 7a00 	vldr	s14, [r3]
 800228a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800228e:	edd3 7a00 	vldr	s15, [r3]
 8002292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002296:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 800229a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800229e:	ed93 7a00 	vldr	s14, [r3]
 80022a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022a6:	edd3 7a00 	vldr	s15, [r3]
 80022aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ae:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 80022b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022b6:	ed93 7a00 	vldr	s14, [r3]
 80022ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022c6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80022ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80022d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022d6:	ed93 7a00 	vldr	s14, [r3]
 80022da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022ea:	3b04      	subs	r3, #4
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022f8:	3b04      	subs	r3, #4
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002302:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8002306:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800230a:	3b04      	subs	r3, #4
 800230c:	edd3 7a00 	vldr	s15, [r3]
 8002310:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002318:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800231c:	3b04      	subs	r3, #4
 800231e:	edd3 7a00 	vldr	s15, [r3]
 8002322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002326:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 800232a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002336:	ee37 7a67 	vsub.f32	s14, s14, s15
 800233a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800233e:	edd3 7a00 	vldr	s15, [r3]
 8002342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002346:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 800234a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800234e:	ed93 7a00 	vldr	s14, [r3]
 8002352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800235e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002366:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800236a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800236e:	3b04      	subs	r3, #4
 8002370:	ed93 7a00 	vldr	s14, [r3]
 8002374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002378:	3b04      	subs	r3, #4
 800237a:	edd3 7a00 	vldr	s15, [r3]
 800237e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002382:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238a:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 800238e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002392:	ed93 7a00 	vldr	s14, [r3]
 8002396:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800239a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800239e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023a2:	edd3 7a00 	vldr	s15, [r3]
 80023a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023aa:	1f1a      	subs	r2, r3, #4
 80023ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80023b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b4:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80023b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023bc:	3b04      	subs	r3, #4
 80023be:	ed93 7a00 	vldr	s14, [r3]
 80023c2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80023c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023ce:	3b04      	subs	r3, #4
 80023d0:	edd3 7a00 	vldr	s15, [r3]
 80023d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023d8:	1f1a      	subs	r2, r3, #4
 80023da:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80023de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e2:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 80023e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023ea:	1d1a      	adds	r2, r3, #4
 80023ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 80023f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023f8:	1d1a      	adds	r2, r3, #4
 80023fa:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8002402:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002406:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800240a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8002412:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002416:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800241a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8002422:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002426:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800242a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8002432:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002436:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800243a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8002442:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002446:	1d1a      	adds	r2, r3, #4
 8002448:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800244c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002450:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002458:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 800245c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002460:	1d1a      	adds	r2, r3, #4
 8002462:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002466:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800246a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800246e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002472:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8002476:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800247a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800247e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002482:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8002486:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800248a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800248e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002492:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8002496:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800249a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800249e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 80024a6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80024aa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 80024b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024ba:	1f1a      	subs	r2, r3, #4
 80024bc:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024c0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80024c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80024c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024cc:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 80024d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024d4:	1f1a      	subs	r2, r3, #4
 80024d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024da:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80024de:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80024e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e6:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 80024ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 80024f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024f6:	3304      	adds	r3, #4
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 80024fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002504:	4413      	add	r3, r2
 8002506:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 800250a:	edd7 7a07 	vldr	s15, [r7, #28]
 800250e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002516:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 800251a:	edd7 7a08 	vldr	s15, [r7, #32]
 800251e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002526:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 800252a:	edd7 7a08 	vldr	s15, [r7, #32]
 800252e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002536:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 800253a:	edd7 7a07 	vldr	s15, [r7, #28]
 800253e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002546:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 800254a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800254e:	1d1a      	adds	r2, r3, #4
 8002550:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002554:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002558:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800255c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002560:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8002564:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002568:	1d1a      	adds	r2, r3, #4
 800256a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800256e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002572:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257a:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 800257e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002582:	eef1 7a67 	vneg.f32	s15, s15
 8002586:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800258a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8002592:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002596:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800259a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 80025a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025a6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80025aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 80025b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025b6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80025ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025be:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 80025c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025c6:	1f1a      	subs	r2, r3, #4
 80025c8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025cc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80025d0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80025d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d8:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 80025dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025e0:	1f1a      	subs	r2, r3, #4
 80025e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025e6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80025ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80025ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f2:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 80025f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 80025fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002602:	3304      	adds	r3, #4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8002608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002610:	4413      	add	r3, r2
 8002612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8002616:	edd7 7a03 	vldr	s15, [r7, #12]
 800261a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800261e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002622:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8002626:	edd7 7a04 	vldr	s15, [r7, #16]
 800262a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800262e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002632:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8002636:	edd7 7a04 	vldr	s15, [r7, #16]
 800263a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800263e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002642:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8002646:	edd7 7a03 	vldr	s15, [r7, #12]
 800264a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800264e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002652:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8002656:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800265a:	1d1a      	adds	r2, r3, #4
 800265c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002660:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002664:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266c:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8002670:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002674:	1d1a      	adds	r2, r3, #4
 8002676:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800267a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800267e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002686:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 800268a:	edd7 7a06 	vldr	s15, [r7, #24]
 800268e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002696:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 800269a:	edd7 7a05 	vldr	s15, [r7, #20]
 800269e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80026a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 80026aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80026ae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80026b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 80026ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80026be:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80026c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 80026ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026ce:	1f1a      	subs	r2, r3, #4
 80026d0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80026d4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80026d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80026dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e0:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 80026e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026e8:	1f1a      	subs	r2, r3, #4
 80026ea:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80026ee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80026f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80026f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fa:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 80026fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002702:	3b01      	subs	r3, #1
 8002704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800270c:	2b00      	cmp	r3, #0
 800270e:	f47f acde 	bne.w	80020ce <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	ed93 7a00 	vldr	s14, [r3]
 8002718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800271c:	edd3 7a00 	vldr	s15, [r3]
 8002720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002724:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	ed93 7a00 	vldr	s14, [r3]
 800272e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800273a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	3304      	adds	r3, #4
 8002742:	ed93 7a00 	vldr	s14, [r3]
 8002746:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800274a:	3304      	adds	r3, #4
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002754:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	3304      	adds	r3, #4
 800275c:	ed93 7a00 	vldr	s14, [r3]
 8002760:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002764:	3304      	adds	r3, #4
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002772:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002776:	3304      	adds	r3, #4
 8002778:	ed93 7a00 	vldr	s14, [r3]
 800277c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002788:	3304      	adds	r3, #4
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002792:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002796:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80027a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80027b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80027c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027ca:	edd3 7a00 	vldr	s15, [r3]
 80027ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d2:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80027d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027da:	3304      	adds	r3, #4
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80027e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027ec:	3304      	adds	r3, #4
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f6:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80027fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027fe:	3304      	adds	r3, #4
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002808:	ee37 7a67 	vsub.f32	s14, s14, s15
 800280c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002810:	3304      	adds	r3, #4
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281a:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800281e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002822:	ed93 7a00 	vldr	s14, [r3]
 8002826:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800282a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800282e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800283a:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800283e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002842:	ed93 7a00 	vldr	s14, [r3]
 8002846:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800284a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800284e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002852:	edd3 7a00 	vldr	s15, [r3]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	1d1a      	adds	r2, r3, #4
 800285a:	603a      	str	r2, [r7, #0]
 800285c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002860:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002864:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002868:	3304      	adds	r3, #4
 800286a:	ed93 7a00 	vldr	s14, [r3]
 800286e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002872:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002876:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800287a:	3304      	adds	r3, #4
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	1d1a      	adds	r2, r3, #4
 8002884:	603a      	str	r2, [r7, #0]
 8002886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288a:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 800288e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8002896:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800289a:	3304      	adds	r3, #4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 80028a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028a4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80028a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 80028b0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80028b4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80028b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028bc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 80028c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80028c4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80028c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028cc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 80028d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028d4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80028d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028dc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 80028e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028e4:	1d1a      	adds	r2, r3, #4
 80028e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80028ea:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80028ee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80028f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f6:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80028fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002904:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002908:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800290c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002910:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8002914:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 800291c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002920:	3304      	adds	r3, #4
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8002926:	edd7 7a07 	vldr	s15, [r7, #28]
 800292a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800292e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002932:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8002936:	edd7 7a08 	vldr	s15, [r7, #32]
 800293a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800293e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002942:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8002946:	edd7 7a08 	vldr	s15, [r7, #32]
 800294a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002952:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8002956:	edd7 7a07 	vldr	s15, [r7, #28]
 800295a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800295e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002962:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8002966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800296a:	1d1a      	adds	r2, r3, #4
 800296c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002970:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002974:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297c:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8002980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002984:	1d1a      	adds	r2, r3, #4
 8002986:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800298a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800298e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002996:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 800299a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 80029a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029a6:	3304      	adds	r3, #4
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 80029ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80029b0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80029b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 80029bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80029c0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80029c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 80029cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80029d0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80029d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 80029dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80029e0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80029e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80029ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029f0:	1d1a      	adds	r2, r3, #4
 80029f2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80029f6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80029fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80029fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a02:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8002a06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a0a:	1d1a      	adds	r2, r3, #4
 8002a0c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002a10:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002a14:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1c:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8002a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a24:	b299      	uxth	r1, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002a2e:	f000 f8fd 	bl	8002c2c <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8002a32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a36:	b299      	uxth	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002a40:	f000 f8f4 	bl	8002c2c <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8002a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a48:	b299      	uxth	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	2304      	movs	r3, #4
 8002a50:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002a52:	f000 f8eb 	bl	8002c2c <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8002a56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a5a:	b299      	uxth	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	2304      	movs	r3, #4
 8002a62:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002a64:	f000 f8e2 	bl	8002c2c <arm_radix8_butterfly_f32>
}
 8002a68:	bf00      	nop
 8002a6a:	37b0      	adds	r7, #176	; 0xb0
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	460b      	mov	r3, r1
 8002a80:	71fb      	strb	r3, [r7, #7]
 8002a82:	4613      	mov	r3, r2
 8002a84:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d117      	bne.n	8002ac2 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	3304      	adds	r3, #4
 8002a96:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	e00d      	b.n	8002aba <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	edd3 7a00 	vldr	s15, [r3]
 8002aa4:	eef1 7a67 	vneg.f32	s15, s15
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d3ed      	bcc.n	8002a9e <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac8:	d040      	beq.n	8002b4c <arm_cfft_f32+0xdc>
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad0:	d845      	bhi.n	8002b5e <arm_cfft_f32+0xee>
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad8:	d033      	beq.n	8002b42 <arm_cfft_f32+0xd2>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae0:	d83d      	bhi.n	8002b5e <arm_cfft_f32+0xee>
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae8:	d026      	beq.n	8002b38 <arm_cfft_f32+0xc8>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af0:	d835      	bhi.n	8002b5e <arm_cfft_f32+0xee>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af8:	d028      	beq.n	8002b4c <arm_cfft_f32+0xdc>
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b00:	d82d      	bhi.n	8002b5e <arm_cfft_f32+0xee>
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b08:	d01b      	beq.n	8002b42 <arm_cfft_f32+0xd2>
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b10:	d825      	bhi.n	8002b5e <arm_cfft_f32+0xee>
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b80      	cmp	r3, #128	; 0x80
 8002b16:	d00f      	beq.n	8002b38 <arm_cfft_f32+0xc8>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b80      	cmp	r3, #128	; 0x80
 8002b1c:	d81f      	bhi.n	8002b5e <arm_cfft_f32+0xee>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b40      	cmp	r3, #64	; 0x40
 8002b22:	d013      	beq.n	8002b4c <arm_cfft_f32+0xdc>
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	d819      	bhi.n	8002b5e <arm_cfft_f32+0xee>
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d003      	beq.n	8002b38 <arm_cfft_f32+0xc8>
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d005      	beq.n	8002b42 <arm_cfft_f32+0xd2>
 8002b36:	e012      	b.n	8002b5e <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f7fe ff74 	bl	8001a28 <arm_cfft_radix8by2_f32>
    break;
 8002b40:	e00d      	b.n	8002b5e <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff f963 	bl	8001e10 <arm_cfft_radix8by4_f32>
    break;
 8002b4a:	e008      	b.n	8002b5e <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	b299      	uxth	r1, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	2301      	movs	r3, #1
 8002b56:	68b8      	ldr	r0, [r7, #8]
 8002b58:	f000 f868 	bl	8002c2c <arm_radix8_butterfly_f32>
    break;
 8002b5c:	bf00      	nop
  }

  if ( bitReverseFlag )
 8002b5e:	79bb      	ldrb	r3, [r7, #6]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8999      	ldrh	r1, [r3, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68b8      	ldr	r0, [r7, #8]
 8002b70:	f7fe ff01 	bl	8001976 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d130      	bne.n	8002bdc <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	ee07 3a90 	vmov	s15, r3
 8002b80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b8c:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	e01c      	b.n	8002bd4 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	1d1a      	adds	r2, r3, #4
 8002b9e:	61ba      	str	r2, [r7, #24]
 8002ba0:	ed93 7a00 	vldr	s14, [r3]
 8002ba4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bac:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	eeb1 7a67 	vneg.f32	s14, s15
 8002bba:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d3de      	bcc.n	8002b9a <arm_cfft_f32+0x12a>
    }
  }
}
 8002bdc:	bf00      	nop
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024)
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bf6:	801a      	strh	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <arm_cfft_init_1024_f32+0x44>)
 8002c00:	899a      	ldrh	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	819a      	strh	r2, [r3, #12]
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <arm_cfft_init_1024_f32+0x44>)
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <arm_cfft_init_1024_f32+0x44>)
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	0800bf24 	.word	0x0800bf24

08002c2c <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b0bd      	sub	sp, #244	; 0xf4
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	461a      	mov	r2, r3
 8002c38:	460b      	mov	r3, r1
 8002c3a:	817b      	strh	r3, [r7, #10]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <arm_radix8_butterfly_f32+0x3c>)
 8002c42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8002c46:	897b      	ldrh	r3, [r7, #10]
 8002c48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8002c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8002c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c58:	08db      	lsrs	r3, r3, #3
 8002c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c64:	e002      	b.n	8002c6c <arm_radix8_butterfly_f32+0x40>
 8002c66:	bf00      	nop
 8002c68:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8002c6c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c74:	4413      	add	r3, r2
 8002c76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8002c7a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c82:	4413      	add	r3, r2
 8002c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8002c88:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c90:	4413      	add	r3, r2
 8002c92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8002c96:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8002ca4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cac:	4413      	add	r3, r2
 8002cae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8002cb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cba:	4413      	add	r3, r2
 8002cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8002cc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc8:	4413      	add	r3, r2
 8002cca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002cce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	ed93 7a00 	vldr	s14, [r3]
 8002cdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	edd3 7a00 	vldr	s15, [r3]
 8002cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cee:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002cf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	ed93 7a00 	vldr	s14, [r3]
 8002d00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4413      	add	r3, r2
 8002d0a:	edd3 7a00 	vldr	s15, [r3]
 8002d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d12:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	ed93 7a00 	vldr	s14, [r3]
 8002d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	edd3 7a00 	vldr	s15, [r3]
 8002d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d36:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	ed93 7a00 	vldr	s14, [r3]
 8002d48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4413      	add	r3, r2
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002d5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	ed93 7a00 	vldr	s14, [r3]
 8002d6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4413      	add	r3, r2
 8002d76:	edd3 7a00 	vldr	s15, [r3]
 8002d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002d82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	ed93 7a00 	vldr	s14, [r3]
 8002d90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4413      	add	r3, r2
 8002d9a:	edd3 7a00 	vldr	s15, [r3]
 8002d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002da6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	ed93 7a00 	vldr	s14, [r3]
 8002db4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002dca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	ed93 7a00 	vldr	s14, [r3]
 8002dd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4413      	add	r3, r2
 8002de2:	edd3 7a00 	vldr	s15, [r3]
 8002de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dea:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8002dee:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002df2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfa:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8002dfe:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002e02:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8002e0e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002e12:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e1a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8002e1e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002e22:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e2a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8002e2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002e3c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e44:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8002e48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4413      	add	r3, r2
 8002e52:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002e56:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e5e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002e62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	3304      	adds	r3, #4
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	ed93 7a00 	vldr	s14, [r3]
 8002e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	3304      	adds	r3, #4
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e86:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002e8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	3304      	adds	r3, #4
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4413      	add	r3, r2
 8002e96:	ed93 7a00 	vldr	s14, [r3]
 8002e9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eae:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	3304      	adds	r3, #4
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	ed93 7a00 	vldr	s14, [r3]
 8002ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	3304      	adds	r3, #4
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4413      	add	r3, r2
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	ed93 7a00 	vldr	s14, [r3]
 8002eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	edd3 7a00 	vldr	s15, [r3]
 8002efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002efe:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002f02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	3304      	adds	r3, #4
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	ed93 7a00 	vldr	s14, [r3]
 8002f12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	3304      	adds	r3, #4
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	edd3 7a00 	vldr	s15, [r3]
 8002f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f26:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002f2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	3304      	adds	r3, #4
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4413      	add	r3, r2
 8002f36:	ed93 7a00 	vldr	s14, [r3]
 8002f3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	3304      	adds	r3, #4
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4413      	add	r3, r2
 8002f46:	edd3 7a00 	vldr	s15, [r3]
 8002f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f4e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002f52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	3304      	adds	r3, #4
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	ed93 7a00 	vldr	s14, [r3]
 8002f62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	3304      	adds	r3, #4
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f76:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002f7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	3304      	adds	r3, #4
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4413      	add	r3, r2
 8002f86:	ed93 7a00 	vldr	s14, [r3]
 8002f8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	3304      	adds	r3, #4
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4413      	add	r3, r2
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f9e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8002fa2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002fa6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fae:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8002fb2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002fb6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fbe:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8002fc2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002fc6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fce:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8002fd2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002fd6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fde:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8002fe2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	3304      	adds	r3, #4
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4413      	add	r3, r2
 8002fee:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002ff2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8002ffe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	3304      	adds	r3, #4
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4413      	add	r3, r2
 800300a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800300e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003016:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800301a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4413      	add	r3, r2
 8003024:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003028:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800302c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003030:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8003034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4413      	add	r3, r2
 800303e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003042:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800304e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	3304      	adds	r3, #4
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4413      	add	r3, r2
 800305a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800305e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003066:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800306a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	3304      	adds	r3, #4
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4413      	add	r3, r2
 8003076:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800307a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800307e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003082:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8003086:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800308a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800308e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003092:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800309e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80030a2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80030a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030aa:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80030ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 80030b6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80030ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80030be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80030c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ca:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80030ce:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80030d2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80030d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030da:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80030de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80030e6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80030ea:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80030ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80030f6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80030fa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80030fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003102:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8003106:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800310a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800310e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003112:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8003116:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800311a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800311e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003122:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8003126:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800312a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800312e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003132:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8003136:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800313a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800313e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003142:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8003146:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800314a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800314e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003152:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8003156:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800315a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800315e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003162:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8003166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003174:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8003180:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4413      	add	r3, r2
 800318a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800318e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003196:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800319a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80031a8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80031ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80031b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4413      	add	r3, r2
 80031be:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80031c2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80031c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ca:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80031ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	3304      	adds	r3, #4
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80031de:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80031e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80031ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	3304      	adds	r3, #4
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4413      	add	r3, r2
 80031f6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80031fa:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80031fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003202:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8003206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	3304      	adds	r3, #4
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4413      	add	r3, r2
 8003212:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003216:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800321a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8003222:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	3304      	adds	r3, #4
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003232:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323a:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800323e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003246:	4413      	add	r3, r2
 8003248:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 800324c:	897b      	ldrh	r3, [r7, #10]
 800324e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003252:	429a      	cmp	r2, r3
 8003254:	f4ff ad0a 	bcc.w	8002c6c <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8003258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325c:	2b07      	cmp	r3, #7
 800325e:	f240 84e3 	bls.w	8003c28 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8003268:	2301      	movs	r3, #1
 800326a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800326e:	893b      	ldrh	r3, [r7, #8]
 8003270:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003274:	4413      	add	r3, r2
 8003276:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8003278:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800327a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800327e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003282:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003284:	4413      	add	r3, r2
 8003286:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8003288:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800328a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800328c:	4413      	add	r3, r2
 800328e:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8003290:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003292:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003294:	4413      	add	r3, r2
 8003296:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8003298:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800329a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800329c:	4413      	add	r3, r2
 800329e:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 80032a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032a4:	4413      	add	r3, r2
 80032a6:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 80032a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032ac:	4413      	add	r3, r2
 80032ae:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 80032b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 80032be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80032ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 80032d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80032e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80032ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80032fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8003306:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	3304      	adds	r3, #4
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8003316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	3304      	adds	r3, #4
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8003324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	3304      	adds	r3, #4
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8003332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	3304      	adds	r3, #4
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4413      	add	r3, r2
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8003340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	3304      	adds	r3, #4
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800334e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	3304      	adds	r3, #4
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	4413      	add	r3, r2
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 800335c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	3304      	adds	r3, #4
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 800336a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800336e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8003372:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337a:	4413      	add	r3, r2
 800337c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8003380:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003388:	4413      	add	r3, r2
 800338a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800338e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003396:	4413      	add	r3, r2
 8003398:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800339c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80033a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a4:	4413      	add	r3, r2
 80033a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 80033aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b2:	4413      	add	r3, r2
 80033b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 80033b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c0:	4413      	add	r3, r2
 80033c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 80033c6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ce:	4413      	add	r3, r2
 80033d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80033d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4413      	add	r3, r2
 80033de:	ed93 7a00 	vldr	s14, [r3]
 80033e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	edd3 7a00 	vldr	s15, [r3]
 80033f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80033f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4413      	add	r3, r2
 8003402:	ed93 7a00 	vldr	s14, [r3]
 8003406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	edd3 7a00 	vldr	s15, [r3]
 8003414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003418:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800341c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4413      	add	r3, r2
 8003426:	ed93 7a00 	vldr	s14, [r3]
 800342a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	edd3 7a00 	vldr	s15, [r3]
 8003438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800343c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8003440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4413      	add	r3, r2
 800344a:	ed93 7a00 	vldr	s14, [r3]
 800344e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4413      	add	r3, r2
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003460:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8003464:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4413      	add	r3, r2
 800346e:	ed93 7a00 	vldr	s14, [r3]
 8003472:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4413      	add	r3, r2
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003484:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8003488:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4413      	add	r3, r2
 8003492:	ed93 7a00 	vldr	s14, [r3]
 8003496:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	edd3 7a00 	vldr	s15, [r3]
 80034a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80034ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4413      	add	r3, r2
 80034b6:	ed93 7a00 	vldr	s14, [r3]
 80034ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034cc:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80034d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4413      	add	r3, r2
 80034da:	ed93 7a00 	vldr	s14, [r3]
 80034de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4413      	add	r3, r2
 80034e8:	edd3 7a00 	vldr	s15, [r3]
 80034ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 80034f4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80034f8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80034fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003500:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8003504:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003508:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800350c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003510:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8003514:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003518:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800351c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003520:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8003524:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003528:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800352c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003530:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8003534:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4413      	add	r3, r2
 800353e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003542:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800354a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800354e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003552:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800355a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800355e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	3304      	adds	r3, #4
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4413      	add	r3, r2
 800356a:	ed93 7a00 	vldr	s14, [r3]
 800356e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	3304      	adds	r3, #4
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4413      	add	r3, r2
 800357a:	edd3 7a00 	vldr	s15, [r3]
 800357e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003582:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003586:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	3304      	adds	r3, #4
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4413      	add	r3, r2
 8003592:	ed93 7a00 	vldr	s14, [r3]
 8003596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	3304      	adds	r3, #4
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4413      	add	r3, r2
 80035a2:	edd3 7a00 	vldr	s15, [r3]
 80035a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035aa:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80035ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	3304      	adds	r3, #4
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4413      	add	r3, r2
 80035ba:	ed93 7a00 	vldr	s14, [r3]
 80035be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	3304      	adds	r3, #4
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4413      	add	r3, r2
 80035ca:	edd3 7a00 	vldr	s15, [r3]
 80035ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80035d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	3304      	adds	r3, #4
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	ed93 7a00 	vldr	s14, [r3]
 80035e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	3304      	adds	r3, #4
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4413      	add	r3, r2
 80035f2:	edd3 7a00 	vldr	s15, [r3]
 80035f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035fa:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80035fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	3304      	adds	r3, #4
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4413      	add	r3, r2
 800360a:	ed93 7a00 	vldr	s14, [r3]
 800360e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	3304      	adds	r3, #4
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4413      	add	r3, r2
 800361a:	edd3 7a00 	vldr	s15, [r3]
 800361e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003622:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003626:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	3304      	adds	r3, #4
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4413      	add	r3, r2
 8003632:	ed93 7a00 	vldr	s14, [r3]
 8003636:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	3304      	adds	r3, #4
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4413      	add	r3, r2
 8003642:	edd3 7a00 	vldr	s15, [r3]
 8003646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800364a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800364e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	3304      	adds	r3, #4
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4413      	add	r3, r2
 800365a:	ed93 7a00 	vldr	s14, [r3]
 800365e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	3304      	adds	r3, #4
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4413      	add	r3, r2
 800366a:	edd3 7a00 	vldr	s15, [r3]
 800366e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003672:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8003676:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	3304      	adds	r3, #4
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4413      	add	r3, r2
 8003682:	ed93 7a00 	vldr	s14, [r3]
 8003686:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	3304      	adds	r3, #4
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4413      	add	r3, r2
 8003692:	edd3 7a00 	vldr	s15, [r3]
 8003696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800369a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800369e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80036a2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80036a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036aa:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 80036ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80036b2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80036b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 80036be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80036c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80036c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ca:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 80036ce:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80036d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80036d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036da:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 80036de:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80036e2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80036e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ea:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 80036ee:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80036f2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80036f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036fa:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 80036fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	3304      	adds	r3, #4
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4413      	add	r3, r2
 800370a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800370e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003716:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800371a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800371e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003726:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800372a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800372e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003736:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800373a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800373e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003746:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800374a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800374e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003756:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800375a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800375e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003766:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800376a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800376e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003776:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800377a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800377e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003786:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800378a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	ed97 7a07 	vldr	s14, [r7, #28]
 8003798:	edd7 7a06 	vldr	s15, [r7, #24]
 800379c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 80037a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	3304      	adds	r3, #4
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4413      	add	r3, r2
 80037b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80037b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80037b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037bc:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 80037c0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80037c4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80037c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037cc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 80037d0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80037d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80037d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037dc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80037e0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80037e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80037e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ec:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 80037f0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80037f4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80037f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8003800:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4413      	add	r3, r2
 800380a:	ed97 7a07 	vldr	s14, [r7, #28]
 800380e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003816:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800381a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	3304      	adds	r3, #4
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4413      	add	r3, r2
 8003826:	ed97 7a05 	vldr	s14, [r7, #20]
 800382a:	edd7 7a04 	vldr	s15, [r7, #16]
 800382e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003832:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8003836:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800383a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8003846:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800384a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800384e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003852:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8003856:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800385a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800385e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003862:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8003866:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800386a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800386e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003872:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8003876:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	ed97 7a07 	vldr	s14, [r7, #28]
 8003884:	edd7 7a06 	vldr	s15, [r7, #24]
 8003888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800388c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8003890:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	3304      	adds	r3, #4
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	ed97 7a05 	vldr	s14, [r7, #20]
 80038a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80038a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038a8:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 80038ac:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80038b0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80038b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038b8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80038bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 80038c4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80038c8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80038cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80038d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 80038dc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80038e0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80038e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038e8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80038ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 80038f4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80038f8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80038fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003900:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003908:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800390c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003910:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003918:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800391c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003920:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003928:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800392c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003930:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003938:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800393c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003940:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003948:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800394c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003950:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003958:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800395c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003960:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003968:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800396c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8003970:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003978:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800397c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8003980:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003988:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800398c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003990:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003998:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800399c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80039a0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80039a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 80039ac:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80039b0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80039b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 80039bc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80039c0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80039c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039c8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 80039cc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80039d0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80039d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 80039dc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80039e0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80039e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039e8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 80039ec:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80039f0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80039f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 80039fc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003a00:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a08:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8003a0c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003a10:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a18:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8003a1c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003a20:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a28:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8003a2c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003a30:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a38:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8003a3c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003a40:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a48:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8003a4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4413      	add	r3, r2
 8003a56:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a62:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8003a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4413      	add	r3, r2
 8003a72:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a76:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a7e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8003a82:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003a86:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8003a92:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003a96:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8003aa2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003aa6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aae:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8003ab2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003ab6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003abe:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8003ac2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ad0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003adc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	ed97 7a05 	vldr	s14, [r7, #20]
 8003aec:	edd7 7a04 	vldr	s15, [r7, #16]
 8003af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8003af8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003afc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b04:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8003b08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003b0c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b14:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8003b18:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003b1c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b24:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8003b28:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003b2c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b34:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8003b38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b46:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b4e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8003b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	3304      	adds	r3, #4
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b62:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b6a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8003b6e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003b72:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8003b7e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003b82:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8003b8e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003b92:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8003b9e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003ba2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003baa:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8003bae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8003bc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	3304      	adds	r3, #4
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8003bd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be0:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8003be4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003be8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bec:	4413      	add	r3, r2
 8003bee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8003bf2:	897b      	ldrh	r3, [r7, #10]
 8003bf4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	f4ff abba 	bcc.w	8003372 <arm_radix8_butterfly_f32+0x746>

         j++;
 8003bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c02:	3301      	adds	r3, #1
 8003c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8003c08:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c10:	429a      	cmp	r2, r3
 8003c12:	f4ff ab2c 	bcc.w	800326e <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8003c16:	893b      	ldrh	r3, [r7, #8]
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8003c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c20:	2b07      	cmp	r3, #7
 8003c22:	f63f a813 	bhi.w	8002c4c <arm_radix8_butterfly_f32+0x20>
}
 8003c26:	e000      	b.n	8003c2a <arm_radix8_butterfly_f32+0xffe>
         break;
 8003c28:	bf00      	nop
}
 8003c2a:	bf00      	nop
 8003c2c:	37f4      	adds	r7, #244	; 0xf4
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop

08003c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c3c:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <HAL_Init+0x40>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <HAL_Init+0x40>)
 8003c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_Init+0x40>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <HAL_Init+0x40>)
 8003c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c54:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <HAL_Init+0x40>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a07      	ldr	r2, [pc, #28]	; (8003c78 <HAL_Init+0x40>)
 8003c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c60:	2003      	movs	r0, #3
 8003c62:	f000 fbc1 	bl	80043e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c66:	200f      	movs	r0, #15
 8003c68:	f000 f808 	bl	8003c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c6c:	f7fd fbc8 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023c00 	.word	0x40023c00

08003c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c84:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <HAL_InitTick+0x54>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_InitTick+0x58>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fbd9 	bl	8004452 <HAL_SYSTICK_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e00e      	b.n	8003cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b0f      	cmp	r3, #15
 8003cae:	d80a      	bhi.n	8003cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	f000 fba1 	bl	80043fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cbc:	4a06      	ldr	r2, [pc, #24]	; (8003cd8 <HAL_InitTick+0x5c>)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e000      	b.n	8003cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20002004 	.word	0x20002004
 8003cd4:	2000200c 	.word	0x2000200c
 8003cd8:	20002008 	.word	0x20002008

08003cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_IncTick+0x20>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_IncTick+0x24>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4413      	add	r3, r2
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <HAL_IncTick+0x24>)
 8003cee:	6013      	str	r3, [r2, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	2000200c 	.word	0x2000200c
 8003d00:	200033b0 	.word	0x200033b0

08003d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return uwTick;
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <HAL_GetTick+0x14>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	200033b0 	.word	0x200033b0

08003d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d24:	f7ff ffee 	bl	8003d04 <HAL_GetTick>
 8003d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d005      	beq.n	8003d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_Delay+0x44>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d42:	bf00      	nop
 8003d44:	f7ff ffde 	bl	8003d04 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d8f7      	bhi.n	8003d44 <HAL_Delay+0x28>
  {
  }
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	2000200c 	.word	0x2000200c

08003d64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e033      	b.n	8003de2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fd fb64 	bl	8001450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d118      	bne.n	8003dd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003daa:	f023 0302 	bic.w	r3, r3, #2
 8003dae:	f043 0202 	orr.w	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f94a 	bl	8004050 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f023 0303 	bic.w	r3, r3, #3
 8003dca:	f043 0201 	orr.w	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
 8003dd2:	e001      	b.n	8003dd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x1c>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e113      	b.n	8004030 <HAL_ADC_ConfigChannel+0x244>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b09      	cmp	r3, #9
 8003e16:	d925      	bls.n	8003e64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68d9      	ldr	r1, [r3, #12]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	461a      	mov	r2, r3
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3b1e      	subs	r3, #30
 8003e2e:	2207      	movs	r2, #7
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43da      	mvns	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	400a      	ands	r2, r1
 8003e3c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68d9      	ldr	r1, [r3, #12]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	4618      	mov	r0, r3
 8003e50:	4603      	mov	r3, r0
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4403      	add	r3, r0
 8003e56:	3b1e      	subs	r3, #30
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	60da      	str	r2, [r3, #12]
 8003e62:	e022      	b.n	8003eaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6919      	ldr	r1, [r3, #16]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	4613      	mov	r3, r2
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	4413      	add	r3, r2
 8003e78:	2207      	movs	r2, #7
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43da      	mvns	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	400a      	ands	r2, r1
 8003e86:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6919      	ldr	r1, [r3, #16]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	4618      	mov	r0, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	4403      	add	r3, r0
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d824      	bhi.n	8003efc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3b05      	subs	r3, #5
 8003ec4:	221f      	movs	r2, #31
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	3b05      	subs	r3, #5
 8003eee:	fa00 f203 	lsl.w	r2, r0, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	635a      	str	r2, [r3, #52]	; 0x34
 8003efa:	e04c      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b0c      	cmp	r3, #12
 8003f02:	d824      	bhi.n	8003f4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	3b23      	subs	r3, #35	; 0x23
 8003f16:	221f      	movs	r2, #31
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43da      	mvns	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	400a      	ands	r2, r1
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	4618      	mov	r0, r3
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3b23      	subs	r3, #35	; 0x23
 8003f40:	fa00 f203 	lsl.w	r2, r0, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f4c:	e023      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3b41      	subs	r3, #65	; 0x41
 8003f60:	221f      	movs	r2, #31
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43da      	mvns	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	400a      	ands	r2, r1
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	3b41      	subs	r3, #65	; 0x41
 8003f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f96:	4b29      	ldr	r3, [pc, #164]	; (800403c <HAL_ADC_ConfigChannel+0x250>)
 8003f98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a28      	ldr	r2, [pc, #160]	; (8004040 <HAL_ADC_ConfigChannel+0x254>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d10f      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x1d8>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b12      	cmp	r3, #18
 8003faa:	d10b      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1d      	ldr	r2, [pc, #116]	; (8004040 <HAL_ADC_ConfigChannel+0x254>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d12b      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x23a>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1c      	ldr	r2, [pc, #112]	; (8004044 <HAL_ADC_ConfigChannel+0x258>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x1f4>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b11      	cmp	r3, #17
 8003fde:	d122      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a11      	ldr	r2, [pc, #68]	; (8004044 <HAL_ADC_ConfigChannel+0x258>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d111      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_ADC_ConfigChannel+0x25c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a11      	ldr	r2, [pc, #68]	; (800404c <HAL_ADC_ConfigChannel+0x260>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	0c9a      	lsrs	r2, r3, #18
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004018:	e002      	b.n	8004020 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	3b01      	subs	r3, #1
 800401e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f9      	bne.n	800401a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	40012300 	.word	0x40012300
 8004040:	40012000 	.word	0x40012000
 8004044:	10000012 	.word	0x10000012
 8004048:	20002004 	.word	0x20002004
 800404c:	431bde83 	.word	0x431bde83

08004050 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004058:	4b79      	ldr	r3, [pc, #484]	; (8004240 <ADC_Init+0x1f0>)
 800405a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004084:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	021a      	lsls	r2, r3, #8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80040a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6859      	ldr	r1, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6899      	ldr	r1, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	4a58      	ldr	r2, [pc, #352]	; (8004244 <ADC_Init+0x1f4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d022      	beq.n	800412e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6899      	ldr	r1, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004118:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6899      	ldr	r1, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	e00f      	b.n	800414e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800413c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800414c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0202 	bic.w	r2, r2, #2
 800415c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6899      	ldr	r1, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7e1b      	ldrb	r3, [r3, #24]
 8004168:	005a      	lsls	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01b      	beq.n	80041b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800419a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6859      	ldr	r1, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	3b01      	subs	r3, #1
 80041a8:	035a      	lsls	r2, r3, #13
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	e007      	b.n	80041c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	3b01      	subs	r3, #1
 80041e0:	051a      	lsls	r2, r3, #20
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6899      	ldr	r1, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004206:	025a      	lsls	r2, r3, #9
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6899      	ldr	r1, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	029a      	lsls	r2, r3, #10
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	40012300 	.word	0x40012300
 8004244:	0f000001 	.word	0x0f000001

08004248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004258:	4b0c      	ldr	r3, [pc, #48]	; (800428c <__NVIC_SetPriorityGrouping+0x44>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004264:	4013      	ands	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800427a:	4a04      	ldr	r2, [pc, #16]	; (800428c <__NVIC_SetPriorityGrouping+0x44>)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	60d3      	str	r3, [r2, #12]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	e000ed00 	.word	0xe000ed00

08004290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004294:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	0a1b      	lsrs	r3, r3, #8
 800429a:	f003 0307 	and.w	r3, r3, #7
}
 800429e:	4618      	mov	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	db0b      	blt.n	80042d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	f003 021f 	and.w	r2, r3, #31
 80042c4:	4907      	ldr	r1, [pc, #28]	; (80042e4 <__NVIC_EnableIRQ+0x38>)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	2001      	movs	r0, #1
 80042ce:	fa00 f202 	lsl.w	r2, r0, r2
 80042d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	e000e100 	.word	0xe000e100

080042e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	6039      	str	r1, [r7, #0]
 80042f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	db0a      	blt.n	8004312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	490c      	ldr	r1, [pc, #48]	; (8004334 <__NVIC_SetPriority+0x4c>)
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	0112      	lsls	r2, r2, #4
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	440b      	add	r3, r1
 800430c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004310:	e00a      	b.n	8004328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	b2da      	uxtb	r2, r3
 8004316:	4908      	ldr	r1, [pc, #32]	; (8004338 <__NVIC_SetPriority+0x50>)
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	3b04      	subs	r3, #4
 8004320:	0112      	lsls	r2, r2, #4
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	440b      	add	r3, r1
 8004326:	761a      	strb	r2, [r3, #24]
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000e100 	.word	0xe000e100
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800433c:	b480      	push	{r7}
 800433e:	b089      	sub	sp, #36	; 0x24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f1c3 0307 	rsb	r3, r3, #7
 8004356:	2b04      	cmp	r3, #4
 8004358:	bf28      	it	cs
 800435a:	2304      	movcs	r3, #4
 800435c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3304      	adds	r3, #4
 8004362:	2b06      	cmp	r3, #6
 8004364:	d902      	bls.n	800436c <NVIC_EncodePriority+0x30>
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3b03      	subs	r3, #3
 800436a:	e000      	b.n	800436e <NVIC_EncodePriority+0x32>
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004370:	f04f 32ff 	mov.w	r2, #4294967295
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43da      	mvns	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	401a      	ands	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004384:	f04f 31ff 	mov.w	r1, #4294967295
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	fa01 f303 	lsl.w	r3, r1, r3
 800438e:	43d9      	mvns	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004394:	4313      	orrs	r3, r2
         );
}
 8004396:	4618      	mov	r0, r3
 8004398:	3724      	adds	r7, #36	; 0x24
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043b4:	d301      	bcc.n	80043ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043b6:	2301      	movs	r3, #1
 80043b8:	e00f      	b.n	80043da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ba:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <SysTick_Config+0x40>)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3b01      	subs	r3, #1
 80043c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043c2:	210f      	movs	r1, #15
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	f7ff ff8e 	bl	80042e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <SysTick_Config+0x40>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043d2:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <SysTick_Config+0x40>)
 80043d4:	2207      	movs	r2, #7
 80043d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	e000e010 	.word	0xe000e010

080043e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff ff29 	bl	8004248 <__NVIC_SetPriorityGrouping>
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043fe:	b580      	push	{r7, lr}
 8004400:	b086      	sub	sp, #24
 8004402:	af00      	add	r7, sp, #0
 8004404:	4603      	mov	r3, r0
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]
 800440a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004410:	f7ff ff3e 	bl	8004290 <__NVIC_GetPriorityGrouping>
 8004414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	6978      	ldr	r0, [r7, #20]
 800441c:	f7ff ff8e 	bl	800433c <NVIC_EncodePriority>
 8004420:	4602      	mov	r2, r0
 8004422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004426:	4611      	mov	r1, r2
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff ff5d 	bl	80042e8 <__NVIC_SetPriority>
}
 800442e:	bf00      	nop
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	4603      	mov	r3, r0
 800443e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff31 	bl	80042ac <__NVIC_EnableIRQ>
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff ffa2 	bl	80043a4 <SysTick_Config>
 8004460:	4603      	mov	r3, r0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004478:	f7ff fc44 	bl	8003d04 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e099      	b.n	80045bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0201 	bic.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044a8:	e00f      	b.n	80044ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044aa:	f7ff fc2b 	bl	8003d04 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b05      	cmp	r3, #5
 80044b6:	d908      	bls.n	80044ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2203      	movs	r2, #3
 80044c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e078      	b.n	80045bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e8      	bne.n	80044aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4b38      	ldr	r3, [pc, #224]	; (80045c4 <HAL_DMA_Init+0x158>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004502:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800450e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	2b04      	cmp	r3, #4
 8004522:	d107      	bne.n	8004534 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	4313      	orrs	r3, r2
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0307 	bic.w	r3, r3, #7
 800454a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	2b04      	cmp	r3, #4
 800455c:	d117      	bne.n	800458e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00e      	beq.n	800458e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f9e9 	bl	8004948 <DMA_CheckFifoParam>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2240      	movs	r2, #64	; 0x40
 8004580:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800458a:	2301      	movs	r3, #1
 800458c:	e016      	b.n	80045bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f9a0 	bl	80048dc <DMA_CalcBaseAndBitshift>
 800459c:	4603      	mov	r3, r0
 800459e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a4:	223f      	movs	r2, #63	; 0x3f
 80045a6:	409a      	lsls	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	f010803f 	.word	0xf010803f

080045c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045d4:	4b8e      	ldr	r3, [pc, #568]	; (8004810 <HAL_DMA_IRQHandler+0x248>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a8e      	ldr	r2, [pc, #568]	; (8004814 <HAL_DMA_IRQHandler+0x24c>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	0a9b      	lsrs	r3, r3, #10
 80045e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f2:	2208      	movs	r2, #8
 80045f4:	409a      	lsls	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01a      	beq.n	8004634 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d013      	beq.n	8004634 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0204 	bic.w	r2, r2, #4
 800461a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004620:	2208      	movs	r2, #8
 8004622:	409a      	lsls	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462c:	f043 0201 	orr.w	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004638:	2201      	movs	r2, #1
 800463a:	409a      	lsls	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d012      	beq.n	800466a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004656:	2201      	movs	r2, #1
 8004658:	409a      	lsls	r2, r3
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	f043 0202 	orr.w	r2, r3, #2
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466e:	2204      	movs	r2, #4
 8004670:	409a      	lsls	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d012      	beq.n	80046a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00b      	beq.n	80046a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	2204      	movs	r2, #4
 800468e:	409a      	lsls	r2, r3
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004698:	f043 0204 	orr.w	r2, r3, #4
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	2210      	movs	r2, #16
 80046a6:	409a      	lsls	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d043      	beq.n	8004738 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d03c      	beq.n	8004738 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c2:	2210      	movs	r2, #16
 80046c4:	409a      	lsls	r2, r3
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d018      	beq.n	800470a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d108      	bne.n	80046f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d024      	beq.n	8004738 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	4798      	blx	r3
 80046f6:	e01f      	b.n	8004738 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	4798      	blx	r3
 8004708:	e016      	b.n	8004738 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d107      	bne.n	8004728 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0208 	bic.w	r2, r2, #8
 8004726:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473c:	2220      	movs	r2, #32
 800473e:	409a      	lsls	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4013      	ands	r3, r2
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 808f 	beq.w	8004868 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8087 	beq.w	8004868 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	2220      	movs	r2, #32
 8004760:	409a      	lsls	r2, r3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b05      	cmp	r3, #5
 8004770:	d136      	bne.n	80047e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0216 	bic.w	r2, r2, #22
 8004780:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004790:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <HAL_DMA_IRQHandler+0x1da>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0208 	bic.w	r2, r2, #8
 80047b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b6:	223f      	movs	r2, #63	; 0x3f
 80047b8:	409a      	lsls	r2, r3
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d07e      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
        }
        return;
 80047de:	e079      	b.n	80048d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01d      	beq.n	800482a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10d      	bne.n	8004818 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	2b00      	cmp	r3, #0
 8004802:	d031      	beq.n	8004868 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4798      	blx	r3
 800480c:	e02c      	b.n	8004868 <HAL_DMA_IRQHandler+0x2a0>
 800480e:	bf00      	nop
 8004810:	20002004 	.word	0x20002004
 8004814:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481c:	2b00      	cmp	r3, #0
 800481e:	d023      	beq.n	8004868 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	4798      	blx	r3
 8004828:	e01e      	b.n	8004868 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10f      	bne.n	8004858 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0210 	bic.w	r2, r2, #16
 8004846:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	2b00      	cmp	r3, #0
 800486e:	d032      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d022      	beq.n	80048c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2205      	movs	r2, #5
 8004880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0201 	bic.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	3301      	adds	r3, #1
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	429a      	cmp	r2, r3
 800489e:	d307      	bcc.n	80048b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f2      	bne.n	8004894 <HAL_DMA_IRQHandler+0x2cc>
 80048ae:	e000      	b.n	80048b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80048b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	4798      	blx	r3
 80048d2:	e000      	b.n	80048d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80048d4:	bf00      	nop
    }
  }
}
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	3b10      	subs	r3, #16
 80048ec:	4a14      	ldr	r2, [pc, #80]	; (8004940 <DMA_CalcBaseAndBitshift+0x64>)
 80048ee:	fba2 2303 	umull	r2, r3, r2, r3
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048f6:	4a13      	ldr	r2, [pc, #76]	; (8004944 <DMA_CalcBaseAndBitshift+0x68>)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d909      	bls.n	800491e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004912:	f023 0303 	bic.w	r3, r3, #3
 8004916:	1d1a      	adds	r2, r3, #4
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	659a      	str	r2, [r3, #88]	; 0x58
 800491c:	e007      	b.n	800492e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004926:	f023 0303 	bic.w	r3, r3, #3
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	aaaaaaab 	.word	0xaaaaaaab
 8004944:	0800bf34 	.word	0x0800bf34

08004948 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004950:	2300      	movs	r3, #0
 8004952:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004958:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d11f      	bne.n	80049a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b03      	cmp	r3, #3
 8004966:	d856      	bhi.n	8004a16 <DMA_CheckFifoParam+0xce>
 8004968:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <DMA_CheckFifoParam+0x28>)
 800496a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496e:	bf00      	nop
 8004970:	08004981 	.word	0x08004981
 8004974:	08004993 	.word	0x08004993
 8004978:	08004981 	.word	0x08004981
 800497c:	08004a17 	.word	0x08004a17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d046      	beq.n	8004a1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004990:	e043      	b.n	8004a1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800499a:	d140      	bne.n	8004a1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a0:	e03d      	b.n	8004a1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049aa:	d121      	bne.n	80049f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d837      	bhi.n	8004a22 <DMA_CheckFifoParam+0xda>
 80049b2:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <DMA_CheckFifoParam+0x70>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	080049c9 	.word	0x080049c9
 80049bc:	080049cf 	.word	0x080049cf
 80049c0:	080049c9 	.word	0x080049c9
 80049c4:	080049e1 	.word	0x080049e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
      break;
 80049cc:	e030      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d025      	beq.n	8004a26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049de:	e022      	b.n	8004a26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049e8:	d11f      	bne.n	8004a2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049ee:	e01c      	b.n	8004a2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d903      	bls.n	80049fe <DMA_CheckFifoParam+0xb6>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d003      	beq.n	8004a04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049fc:	e018      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
      break;
 8004a02:	e015      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00e      	beq.n	8004a2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	73fb      	strb	r3, [r7, #15]
      break;
 8004a14:	e00b      	b.n	8004a2e <DMA_CheckFifoParam+0xe6>
      break;
 8004a16:	bf00      	nop
 8004a18:	e00a      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      break;
 8004a1a:	bf00      	nop
 8004a1c:	e008      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      break;
 8004a1e:	bf00      	nop
 8004a20:	e006      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      break;
 8004a22:	bf00      	nop
 8004a24:	e004      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      break;
 8004a26:	bf00      	nop
 8004a28:	e002      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a2a:	bf00      	nop
 8004a2c:	e000      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      break;
 8004a2e:	bf00      	nop
    }
  } 
  
  return status; 
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop

08004a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b089      	sub	sp, #36	; 0x24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	e165      	b.n	8004d28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	f040 8154 	bne.w	8004d22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d005      	beq.n	8004a92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d130      	bne.n	8004af4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	2203      	movs	r2, #3
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ac8:	2201      	movs	r2, #1
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	091b      	lsrs	r3, r3, #4
 8004ade:	f003 0201 	and.w	r2, r3, #1
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d017      	beq.n	8004b30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4013      	ands	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d123      	bne.n	8004b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	08da      	lsrs	r2, r3, #3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3208      	adds	r2, #8
 8004b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	220f      	movs	r2, #15
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	08da      	lsrs	r2, r3, #3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3208      	adds	r2, #8
 8004b7e:	69b9      	ldr	r1, [r7, #24]
 8004b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	2203      	movs	r2, #3
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	43db      	mvns	r3, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 0203 	and.w	r2, r3, #3
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 80ae 	beq.w	8004d22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	4b5d      	ldr	r3, [pc, #372]	; (8004d40 <HAL_GPIO_Init+0x300>)
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bce:	4a5c      	ldr	r2, [pc, #368]	; (8004d40 <HAL_GPIO_Init+0x300>)
 8004bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8004bd6:	4b5a      	ldr	r3, [pc, #360]	; (8004d40 <HAL_GPIO_Init+0x300>)
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004be2:	4a58      	ldr	r2, [pc, #352]	; (8004d44 <HAL_GPIO_Init+0x304>)
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	089b      	lsrs	r3, r3, #2
 8004be8:	3302      	adds	r3, #2
 8004bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	220f      	movs	r2, #15
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4013      	ands	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a4f      	ldr	r2, [pc, #316]	; (8004d48 <HAL_GPIO_Init+0x308>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d025      	beq.n	8004c5a <HAL_GPIO_Init+0x21a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a4e      	ldr	r2, [pc, #312]	; (8004d4c <HAL_GPIO_Init+0x30c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01f      	beq.n	8004c56 <HAL_GPIO_Init+0x216>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a4d      	ldr	r2, [pc, #308]	; (8004d50 <HAL_GPIO_Init+0x310>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d019      	beq.n	8004c52 <HAL_GPIO_Init+0x212>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a4c      	ldr	r2, [pc, #304]	; (8004d54 <HAL_GPIO_Init+0x314>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <HAL_GPIO_Init+0x20e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a4b      	ldr	r2, [pc, #300]	; (8004d58 <HAL_GPIO_Init+0x318>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00d      	beq.n	8004c4a <HAL_GPIO_Init+0x20a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a4a      	ldr	r2, [pc, #296]	; (8004d5c <HAL_GPIO_Init+0x31c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d007      	beq.n	8004c46 <HAL_GPIO_Init+0x206>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a49      	ldr	r2, [pc, #292]	; (8004d60 <HAL_GPIO_Init+0x320>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d101      	bne.n	8004c42 <HAL_GPIO_Init+0x202>
 8004c3e:	2306      	movs	r3, #6
 8004c40:	e00c      	b.n	8004c5c <HAL_GPIO_Init+0x21c>
 8004c42:	2307      	movs	r3, #7
 8004c44:	e00a      	b.n	8004c5c <HAL_GPIO_Init+0x21c>
 8004c46:	2305      	movs	r3, #5
 8004c48:	e008      	b.n	8004c5c <HAL_GPIO_Init+0x21c>
 8004c4a:	2304      	movs	r3, #4
 8004c4c:	e006      	b.n	8004c5c <HAL_GPIO_Init+0x21c>
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e004      	b.n	8004c5c <HAL_GPIO_Init+0x21c>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e002      	b.n	8004c5c <HAL_GPIO_Init+0x21c>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <HAL_GPIO_Init+0x21c>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	69fa      	ldr	r2, [r7, #28]
 8004c5e:	f002 0203 	and.w	r2, r2, #3
 8004c62:	0092      	lsls	r2, r2, #2
 8004c64:	4093      	lsls	r3, r2
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c6c:	4935      	ldr	r1, [pc, #212]	; (8004d44 <HAL_GPIO_Init+0x304>)
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	089b      	lsrs	r3, r3, #2
 8004c72:	3302      	adds	r3, #2
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c7a:	4b3a      	ldr	r3, [pc, #232]	; (8004d64 <HAL_GPIO_Init+0x324>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	43db      	mvns	r3, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4013      	ands	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c9e:	4a31      	ldr	r2, [pc, #196]	; (8004d64 <HAL_GPIO_Init+0x324>)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ca4:	4b2f      	ldr	r3, [pc, #188]	; (8004d64 <HAL_GPIO_Init+0x324>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	43db      	mvns	r3, r3
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cc8:	4a26      	ldr	r2, [pc, #152]	; (8004d64 <HAL_GPIO_Init+0x324>)
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cce:	4b25      	ldr	r3, [pc, #148]	; (8004d64 <HAL_GPIO_Init+0x324>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cf2:	4a1c      	ldr	r2, [pc, #112]	; (8004d64 <HAL_GPIO_Init+0x324>)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cf8:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <HAL_GPIO_Init+0x324>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	43db      	mvns	r3, r3
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	4013      	ands	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d1c:	4a11      	ldr	r2, [pc, #68]	; (8004d64 <HAL_GPIO_Init+0x324>)
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	3301      	adds	r3, #1
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	2b0f      	cmp	r3, #15
 8004d2c:	f67f ae96 	bls.w	8004a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	3724      	adds	r7, #36	; 0x24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800
 8004d44:	40013800 	.word	0x40013800
 8004d48:	40020000 	.word	0x40020000
 8004d4c:	40020400 	.word	0x40020400
 8004d50:	40020800 	.word	0x40020800
 8004d54:	40020c00 	.word	0x40020c00
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	40021400 	.word	0x40021400
 8004d60:	40021800 	.word	0x40021800
 8004d64:	40013c00 	.word	0x40013c00

08004d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	807b      	strh	r3, [r7, #2]
 8004d74:	4613      	mov	r3, r2
 8004d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d78:	787b      	ldrb	r3, [r7, #1]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d7e:	887a      	ldrh	r2, [r7, #2]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d84:	e003      	b.n	8004d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d86:	887b      	ldrh	r3, [r7, #2]
 8004d88:	041a      	lsls	r2, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	619a      	str	r2, [r3, #24]
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	460b      	mov	r3, r1
 8004da4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004dac:	887a      	ldrh	r2, [r7, #2]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4013      	ands	r3, r2
 8004db2:	041a      	lsls	r2, r3, #16
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	43d9      	mvns	r1, r3
 8004db8:	887b      	ldrh	r3, [r7, #2]
 8004dba:	400b      	ands	r3, r1
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	619a      	str	r2, [r3, #24]
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
	...

08004dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0cc      	b.n	8004f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004de4:	4b68      	ldr	r3, [pc, #416]	; (8004f88 <HAL_RCC_ClockConfig+0x1b8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d90c      	bls.n	8004e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df2:	4b65      	ldr	r3, [pc, #404]	; (8004f88 <HAL_RCC_ClockConfig+0x1b8>)
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfa:	4b63      	ldr	r3, [pc, #396]	; (8004f88 <HAL_RCC_ClockConfig+0x1b8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d001      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0b8      	b.n	8004f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d020      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e24:	4b59      	ldr	r3, [pc, #356]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4a58      	ldr	r2, [pc, #352]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e3c:	4b53      	ldr	r3, [pc, #332]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	4a52      	ldr	r2, [pc, #328]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e48:	4b50      	ldr	r3, [pc, #320]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	494d      	ldr	r1, [pc, #308]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d044      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d107      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6e:	4b47      	ldr	r3, [pc, #284]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d119      	bne.n	8004eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e07f      	b.n	8004f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d003      	beq.n	8004e8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d107      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8e:	4b3f      	ldr	r3, [pc, #252]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d109      	bne.n	8004eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e06f      	b.n	8004f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9e:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e067      	b.n	8004f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eae:	4b37      	ldr	r3, [pc, #220]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f023 0203 	bic.w	r2, r3, #3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	4934      	ldr	r1, [pc, #208]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ec0:	f7fe ff20 	bl	8003d04 <HAL_GetTick>
 8004ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec6:	e00a      	b.n	8004ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec8:	f7fe ff1c 	bl	8003d04 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e04f      	b.n	8004f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ede:	4b2b      	ldr	r3, [pc, #172]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 020c 	and.w	r2, r3, #12
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d1eb      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ef0:	4b25      	ldr	r3, [pc, #148]	; (8004f88 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d20c      	bcs.n	8004f18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efe:	4b22      	ldr	r3, [pc, #136]	; (8004f88 <HAL_RCC_ClockConfig+0x1b8>)
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f06:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <HAL_RCC_ClockConfig+0x1b8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e032      	b.n	8004f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f24:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	4916      	ldr	r1, [pc, #88]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d009      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	490e      	ldr	r1, [pc, #56]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f56:	f000 f855 	bl	8005004 <HAL_RCC_GetSysClockFreq>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	091b      	lsrs	r3, r3, #4
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	490a      	ldr	r1, [pc, #40]	; (8004f90 <HAL_RCC_ClockConfig+0x1c0>)
 8004f68:	5ccb      	ldrb	r3, [r1, r3]
 8004f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6e:	4a09      	ldr	r2, [pc, #36]	; (8004f94 <HAL_RCC_ClockConfig+0x1c4>)
 8004f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f72:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fe fe80 	bl	8003c7c <HAL_InitTick>

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40023c00 	.word	0x40023c00
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	080090fc 	.word	0x080090fc
 8004f94:	20002004 	.word	0x20002004
 8004f98:	20002008 	.word	0x20002008

08004f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa0:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20002004 	.word	0x20002004

08004fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fb8:	f7ff fff0 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0a9b      	lsrs	r3, r3, #10
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4903      	ldr	r1, [pc, #12]	; (8004fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	0800910c 	.word	0x0800910c

08004fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fe0:	f7ff ffdc 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	0b5b      	lsrs	r3, r3, #13
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	4903      	ldr	r1, [pc, #12]	; (8005000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ff2:	5ccb      	ldrb	r3, [r1, r3]
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40023800 	.word	0x40023800
 8005000:	0800910c 	.word	0x0800910c

08005004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005008:	b0a6      	sub	sp, #152	; 0x98
 800500a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800502a:	4bc8      	ldr	r3, [pc, #800]	; (800534c <HAL_RCC_GetSysClockFreq+0x348>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b0c      	cmp	r3, #12
 8005034:	f200 817e 	bhi.w	8005334 <HAL_RCC_GetSysClockFreq+0x330>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <HAL_RCC_GetSysClockFreq+0x3c>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005075 	.word	0x08005075
 8005044:	08005335 	.word	0x08005335
 8005048:	08005335 	.word	0x08005335
 800504c:	08005335 	.word	0x08005335
 8005050:	0800507d 	.word	0x0800507d
 8005054:	08005335 	.word	0x08005335
 8005058:	08005335 	.word	0x08005335
 800505c:	08005335 	.word	0x08005335
 8005060:	08005085 	.word	0x08005085
 8005064:	08005335 	.word	0x08005335
 8005068:	08005335 	.word	0x08005335
 800506c:	08005335 	.word	0x08005335
 8005070:	080051ef 	.word	0x080051ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005074:	4bb6      	ldr	r3, [pc, #728]	; (8005350 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800507a:	e15f      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800507c:	4bb5      	ldr	r3, [pc, #724]	; (8005354 <HAL_RCC_GetSysClockFreq+0x350>)
 800507e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005082:	e15b      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005084:	4bb1      	ldr	r3, [pc, #708]	; (800534c <HAL_RCC_GetSysClockFreq+0x348>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800508c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005090:	4bae      	ldr	r3, [pc, #696]	; (800534c <HAL_RCC_GetSysClockFreq+0x348>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d031      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800509c:	4bab      	ldr	r3, [pc, #684]	; (800534c <HAL_RCC_GetSysClockFreq+0x348>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	099b      	lsrs	r3, r3, #6
 80050a2:	2200      	movs	r2, #0
 80050a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80050a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ae:	663b      	str	r3, [r7, #96]	; 0x60
 80050b0:	2300      	movs	r3, #0
 80050b2:	667b      	str	r3, [r7, #100]	; 0x64
 80050b4:	4ba7      	ldr	r3, [pc, #668]	; (8005354 <HAL_RCC_GetSysClockFreq+0x350>)
 80050b6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80050ba:	462a      	mov	r2, r5
 80050bc:	fb03 f202 	mul.w	r2, r3, r2
 80050c0:	2300      	movs	r3, #0
 80050c2:	4621      	mov	r1, r4
 80050c4:	fb01 f303 	mul.w	r3, r1, r3
 80050c8:	4413      	add	r3, r2
 80050ca:	4aa2      	ldr	r2, [pc, #648]	; (8005354 <HAL_RCC_GetSysClockFreq+0x350>)
 80050cc:	4621      	mov	r1, r4
 80050ce:	fba1 1202 	umull	r1, r2, r1, r2
 80050d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050d4:	460a      	mov	r2, r1
 80050d6:	67ba      	str	r2, [r7, #120]	; 0x78
 80050d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80050da:	4413      	add	r3, r2
 80050dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050e2:	2200      	movs	r2, #0
 80050e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80050e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80050e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050ec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80050f0:	f7fb fd7a 	bl	8000be8 <__aeabi_uldivmod>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4613      	mov	r3, r2
 80050fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050fe:	e064      	b.n	80051ca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005100:	4b92      	ldr	r3, [pc, #584]	; (800534c <HAL_RCC_GetSysClockFreq+0x348>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	099b      	lsrs	r3, r3, #6
 8005106:	2200      	movs	r2, #0
 8005108:	653b      	str	r3, [r7, #80]	; 0x50
 800510a:	657a      	str	r2, [r7, #84]	; 0x54
 800510c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800510e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005112:	64bb      	str	r3, [r7, #72]	; 0x48
 8005114:	2300      	movs	r3, #0
 8005116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005118:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800511c:	4622      	mov	r2, r4
 800511e:	462b      	mov	r3, r5
 8005120:	f04f 0000 	mov.w	r0, #0
 8005124:	f04f 0100 	mov.w	r1, #0
 8005128:	0159      	lsls	r1, r3, #5
 800512a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800512e:	0150      	lsls	r0, r2, #5
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4621      	mov	r1, r4
 8005136:	1a51      	subs	r1, r2, r1
 8005138:	6139      	str	r1, [r7, #16]
 800513a:	4629      	mov	r1, r5
 800513c:	eb63 0301 	sbc.w	r3, r3, r1
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800514e:	4659      	mov	r1, fp
 8005150:	018b      	lsls	r3, r1, #6
 8005152:	4651      	mov	r1, sl
 8005154:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005158:	4651      	mov	r1, sl
 800515a:	018a      	lsls	r2, r1, #6
 800515c:	4651      	mov	r1, sl
 800515e:	ebb2 0801 	subs.w	r8, r2, r1
 8005162:	4659      	mov	r1, fp
 8005164:	eb63 0901 	sbc.w	r9, r3, r1
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005174:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005178:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800517c:	4690      	mov	r8, r2
 800517e:	4699      	mov	r9, r3
 8005180:	4623      	mov	r3, r4
 8005182:	eb18 0303 	adds.w	r3, r8, r3
 8005186:	60bb      	str	r3, [r7, #8]
 8005188:	462b      	mov	r3, r5
 800518a:	eb49 0303 	adc.w	r3, r9, r3
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800519c:	4629      	mov	r1, r5
 800519e:	028b      	lsls	r3, r1, #10
 80051a0:	4621      	mov	r1, r4
 80051a2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051a6:	4621      	mov	r1, r4
 80051a8:	028a      	lsls	r2, r1, #10
 80051aa:	4610      	mov	r0, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051b2:	2200      	movs	r2, #0
 80051b4:	643b      	str	r3, [r7, #64]	; 0x40
 80051b6:	647a      	str	r2, [r7, #68]	; 0x44
 80051b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051bc:	f7fb fd14 	bl	8000be8 <__aeabi_uldivmod>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4613      	mov	r3, r2
 80051c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051ca:	4b60      	ldr	r3, [pc, #384]	; (800534c <HAL_RCC_GetSysClockFreq+0x348>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	0c1b      	lsrs	r3, r3, #16
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	3301      	adds	r3, #1
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80051dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80051ec:	e0a6      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051ee:	4b57      	ldr	r3, [pc, #348]	; (800534c <HAL_RCC_GetSysClockFreq+0x348>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051fa:	4b54      	ldr	r3, [pc, #336]	; (800534c <HAL_RCC_GetSysClockFreq+0x348>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d02a      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005206:	4b51      	ldr	r3, [pc, #324]	; (800534c <HAL_RCC_GetSysClockFreq+0x348>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	099b      	lsrs	r3, r3, #6
 800520c:	2200      	movs	r2, #0
 800520e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005210:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005218:	2100      	movs	r1, #0
 800521a:	4b4e      	ldr	r3, [pc, #312]	; (8005354 <HAL_RCC_GetSysClockFreq+0x350>)
 800521c:	fb03 f201 	mul.w	r2, r3, r1
 8005220:	2300      	movs	r3, #0
 8005222:	fb00 f303 	mul.w	r3, r0, r3
 8005226:	4413      	add	r3, r2
 8005228:	4a4a      	ldr	r2, [pc, #296]	; (8005354 <HAL_RCC_GetSysClockFreq+0x350>)
 800522a:	fba0 1202 	umull	r1, r2, r0, r2
 800522e:	677a      	str	r2, [r7, #116]	; 0x74
 8005230:	460a      	mov	r2, r1
 8005232:	673a      	str	r2, [r7, #112]	; 0x70
 8005234:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005236:	4413      	add	r3, r2
 8005238:	677b      	str	r3, [r7, #116]	; 0x74
 800523a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800523e:	2200      	movs	r2, #0
 8005240:	633b      	str	r3, [r7, #48]	; 0x30
 8005242:	637a      	str	r2, [r7, #52]	; 0x34
 8005244:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005248:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800524c:	f7fb fccc 	bl	8000be8 <__aeabi_uldivmod>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4613      	mov	r3, r2
 8005256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800525a:	e05b      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800525c:	4b3b      	ldr	r3, [pc, #236]	; (800534c <HAL_RCC_GetSysClockFreq+0x348>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	099b      	lsrs	r3, r3, #6
 8005262:	2200      	movs	r2, #0
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
 8005266:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526e:	623b      	str	r3, [r7, #32]
 8005270:	2300      	movs	r3, #0
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
 8005274:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005278:	4642      	mov	r2, r8
 800527a:	464b      	mov	r3, r9
 800527c:	f04f 0000 	mov.w	r0, #0
 8005280:	f04f 0100 	mov.w	r1, #0
 8005284:	0159      	lsls	r1, r3, #5
 8005286:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800528a:	0150      	lsls	r0, r2, #5
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4641      	mov	r1, r8
 8005292:	ebb2 0a01 	subs.w	sl, r2, r1
 8005296:	4649      	mov	r1, r9
 8005298:	eb63 0b01 	sbc.w	fp, r3, r1
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052b0:	ebb2 040a 	subs.w	r4, r2, sl
 80052b4:	eb63 050b 	sbc.w	r5, r3, fp
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	00eb      	lsls	r3, r5, #3
 80052c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052c6:	00e2      	lsls	r2, r4, #3
 80052c8:	4614      	mov	r4, r2
 80052ca:	461d      	mov	r5, r3
 80052cc:	4643      	mov	r3, r8
 80052ce:	18e3      	adds	r3, r4, r3
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	464b      	mov	r3, r9
 80052d4:	eb45 0303 	adc.w	r3, r5, r3
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052e6:	4629      	mov	r1, r5
 80052e8:	028b      	lsls	r3, r1, #10
 80052ea:	4621      	mov	r1, r4
 80052ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052f0:	4621      	mov	r1, r4
 80052f2:	028a      	lsls	r2, r1, #10
 80052f4:	4610      	mov	r0, r2
 80052f6:	4619      	mov	r1, r3
 80052f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052fc:	2200      	movs	r2, #0
 80052fe:	61bb      	str	r3, [r7, #24]
 8005300:	61fa      	str	r2, [r7, #28]
 8005302:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005306:	f7fb fc6f 	bl	8000be8 <__aeabi_uldivmod>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4613      	mov	r3, r2
 8005310:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005314:	4b0d      	ldr	r3, [pc, #52]	; (800534c <HAL_RCC_GetSysClockFreq+0x348>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	0f1b      	lsrs	r3, r3, #28
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8005322:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005326:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800532a:	fbb2 f3f3 	udiv	r3, r2, r3
 800532e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005332:	e003      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800533a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800533c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8005340:	4618      	mov	r0, r3
 8005342:	3798      	adds	r7, #152	; 0x98
 8005344:	46bd      	mov	sp, r7
 8005346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800534a:	bf00      	nop
 800534c:	40023800 	.word	0x40023800
 8005350:	00f42400 	.word	0x00f42400
 8005354:	017d7840 	.word	0x017d7840

08005358 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e28d      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8083 	beq.w	800547e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005378:	4b94      	ldr	r3, [pc, #592]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 030c 	and.w	r3, r3, #12
 8005380:	2b04      	cmp	r3, #4
 8005382:	d019      	beq.n	80053b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005384:	4b91      	ldr	r3, [pc, #580]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800538c:	2b08      	cmp	r3, #8
 800538e:	d106      	bne.n	800539e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005390:	4b8e      	ldr	r3, [pc, #568]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800539c:	d00c      	beq.n	80053b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800539e:	4b8b      	ldr	r3, [pc, #556]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053a6:	2b0c      	cmp	r3, #12
 80053a8:	d112      	bne.n	80053d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053aa:	4b88      	ldr	r3, [pc, #544]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053b6:	d10b      	bne.n	80053d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b8:	4b84      	ldr	r3, [pc, #528]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d05b      	beq.n	800547c <HAL_RCC_OscConfig+0x124>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d157      	bne.n	800547c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e25a      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d8:	d106      	bne.n	80053e8 <HAL_RCC_OscConfig+0x90>
 80053da:	4b7c      	ldr	r3, [pc, #496]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a7b      	ldr	r2, [pc, #492]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80053e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e01d      	b.n	8005424 <HAL_RCC_OscConfig+0xcc>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053f0:	d10c      	bne.n	800540c <HAL_RCC_OscConfig+0xb4>
 80053f2:	4b76      	ldr	r3, [pc, #472]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a75      	ldr	r2, [pc, #468]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80053f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4b73      	ldr	r3, [pc, #460]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a72      	ldr	r2, [pc, #456]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 8005404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e00b      	b.n	8005424 <HAL_RCC_OscConfig+0xcc>
 800540c:	4b6f      	ldr	r3, [pc, #444]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a6e      	ldr	r2, [pc, #440]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 8005412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	4b6c      	ldr	r3, [pc, #432]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a6b      	ldr	r2, [pc, #428]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 800541e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d013      	beq.n	8005454 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542c:	f7fe fc6a 	bl	8003d04 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005434:	f7fe fc66 	bl	8003d04 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b64      	cmp	r3, #100	; 0x64
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e21f      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005446:	4b61      	ldr	r3, [pc, #388]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0f0      	beq.n	8005434 <HAL_RCC_OscConfig+0xdc>
 8005452:	e014      	b.n	800547e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fe fc56 	bl	8003d04 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800545c:	f7fe fc52 	bl	8003d04 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b64      	cmp	r3, #100	; 0x64
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e20b      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800546e:	4b57      	ldr	r3, [pc, #348]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x104>
 800547a:	e000      	b.n	800547e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800547c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d06f      	beq.n	800556a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800548a:	4b50      	ldr	r3, [pc, #320]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
 8005492:	2b00      	cmp	r3, #0
 8005494:	d017      	beq.n	80054c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005496:	4b4d      	ldr	r3, [pc, #308]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d105      	bne.n	80054ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054a2:	4b4a      	ldr	r3, [pc, #296]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00b      	beq.n	80054c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ae:	4b47      	ldr	r3, [pc, #284]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054b6:	2b0c      	cmp	r3, #12
 80054b8:	d11c      	bne.n	80054f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ba:	4b44      	ldr	r3, [pc, #272]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d116      	bne.n	80054f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054c6:	4b41      	ldr	r3, [pc, #260]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <HAL_RCC_OscConfig+0x186>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d001      	beq.n	80054de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e1d3      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054de:	4b3b      	ldr	r3, [pc, #236]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	4937      	ldr	r1, [pc, #220]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054f2:	e03a      	b.n	800556a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d020      	beq.n	800553e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054fc:	4b34      	ldr	r3, [pc, #208]	; (80055d0 <HAL_RCC_OscConfig+0x278>)
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005502:	f7fe fbff 	bl	8003d04 <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800550a:	f7fe fbfb 	bl	8003d04 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e1b4      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551c:	4b2b      	ldr	r3, [pc, #172]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005528:	4b28      	ldr	r3, [pc, #160]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	4925      	ldr	r1, [pc, #148]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 8005538:	4313      	orrs	r3, r2
 800553a:	600b      	str	r3, [r1, #0]
 800553c:	e015      	b.n	800556a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800553e:	4b24      	ldr	r3, [pc, #144]	; (80055d0 <HAL_RCC_OscConfig+0x278>)
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fe fbde 	bl	8003d04 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800554c:	f7fe fbda 	bl	8003d04 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e193      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800555e:	4b1b      	ldr	r3, [pc, #108]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f0      	bne.n	800554c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d036      	beq.n	80055e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d016      	beq.n	80055ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800557e:	4b15      	ldr	r3, [pc, #84]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005580:	2201      	movs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005584:	f7fe fbbe 	bl	8003d04 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800558c:	f7fe fbba 	bl	8003d04 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e173      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800559e:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCC_OscConfig+0x274>)
 80055a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x234>
 80055aa:	e01b      	b.n	80055e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ac:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b2:	f7fe fba7 	bl	8003d04 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b8:	e00e      	b.n	80055d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ba:	f7fe fba3 	bl	8003d04 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d907      	bls.n	80055d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e15c      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
 80055cc:	40023800 	.word	0x40023800
 80055d0:	42470000 	.word	0x42470000
 80055d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d8:	4b8a      	ldr	r3, [pc, #552]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 80055da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1ea      	bne.n	80055ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 8097 	beq.w	8005720 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055f2:	2300      	movs	r3, #0
 80055f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f6:	4b83      	ldr	r3, [pc, #524]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10f      	bne.n	8005622 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005602:	2300      	movs	r3, #0
 8005604:	60bb      	str	r3, [r7, #8]
 8005606:	4b7f      	ldr	r3, [pc, #508]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	4a7e      	ldr	r2, [pc, #504]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 800560c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005610:	6413      	str	r3, [r2, #64]	; 0x40
 8005612:	4b7c      	ldr	r3, [pc, #496]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561a:	60bb      	str	r3, [r7, #8]
 800561c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800561e:	2301      	movs	r3, #1
 8005620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005622:	4b79      	ldr	r3, [pc, #484]	; (8005808 <HAL_RCC_OscConfig+0x4b0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562a:	2b00      	cmp	r3, #0
 800562c:	d118      	bne.n	8005660 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800562e:	4b76      	ldr	r3, [pc, #472]	; (8005808 <HAL_RCC_OscConfig+0x4b0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a75      	ldr	r2, [pc, #468]	; (8005808 <HAL_RCC_OscConfig+0x4b0>)
 8005634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800563a:	f7fe fb63 	bl	8003d04 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005642:	f7fe fb5f 	bl	8003d04 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e118      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005654:	4b6c      	ldr	r3, [pc, #432]	; (8005808 <HAL_RCC_OscConfig+0x4b0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f0      	beq.n	8005642 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d106      	bne.n	8005676 <HAL_RCC_OscConfig+0x31e>
 8005668:	4b66      	ldr	r3, [pc, #408]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 800566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566c:	4a65      	ldr	r2, [pc, #404]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	6713      	str	r3, [r2, #112]	; 0x70
 8005674:	e01c      	b.n	80056b0 <HAL_RCC_OscConfig+0x358>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	2b05      	cmp	r3, #5
 800567c:	d10c      	bne.n	8005698 <HAL_RCC_OscConfig+0x340>
 800567e:	4b61      	ldr	r3, [pc, #388]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 8005680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005682:	4a60      	ldr	r2, [pc, #384]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 8005684:	f043 0304 	orr.w	r3, r3, #4
 8005688:	6713      	str	r3, [r2, #112]	; 0x70
 800568a:	4b5e      	ldr	r3, [pc, #376]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	4a5d      	ldr	r2, [pc, #372]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	6713      	str	r3, [r2, #112]	; 0x70
 8005696:	e00b      	b.n	80056b0 <HAL_RCC_OscConfig+0x358>
 8005698:	4b5a      	ldr	r3, [pc, #360]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	4a59      	ldr	r2, [pc, #356]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 800569e:	f023 0301 	bic.w	r3, r3, #1
 80056a2:	6713      	str	r3, [r2, #112]	; 0x70
 80056a4:	4b57      	ldr	r3, [pc, #348]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a8:	4a56      	ldr	r2, [pc, #344]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 80056aa:	f023 0304 	bic.w	r3, r3, #4
 80056ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d015      	beq.n	80056e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b8:	f7fe fb24 	bl	8003d04 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056be:	e00a      	b.n	80056d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c0:	f7fe fb20 	bl	8003d04 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e0d7      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d6:	4b4b      	ldr	r3, [pc, #300]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 80056d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0ee      	beq.n	80056c0 <HAL_RCC_OscConfig+0x368>
 80056e2:	e014      	b.n	800570e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e4:	f7fe fb0e 	bl	8003d04 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ea:	e00a      	b.n	8005702 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ec:	f7fe fb0a 	bl	8003d04 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e0c1      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005702:	4b40      	ldr	r3, [pc, #256]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 8005704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1ee      	bne.n	80056ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800570e:	7dfb      	ldrb	r3, [r7, #23]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d105      	bne.n	8005720 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005714:	4b3b      	ldr	r3, [pc, #236]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	4a3a      	ldr	r2, [pc, #232]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 800571a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800571e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 80ad 	beq.w	8005884 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800572a:	4b36      	ldr	r3, [pc, #216]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 030c 	and.w	r3, r3, #12
 8005732:	2b08      	cmp	r3, #8
 8005734:	d060      	beq.n	80057f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d145      	bne.n	80057ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800573e:	4b33      	ldr	r3, [pc, #204]	; (800580c <HAL_RCC_OscConfig+0x4b4>)
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005744:	f7fe fade 	bl	8003d04 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800574c:	f7fe fada 	bl	8003d04 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e093      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800575e:	4b29      	ldr	r3, [pc, #164]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1f0      	bne.n	800574c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	69da      	ldr	r2, [r3, #28]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	019b      	lsls	r3, r3, #6
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005780:	085b      	lsrs	r3, r3, #1
 8005782:	3b01      	subs	r3, #1
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	061b      	lsls	r3, r3, #24
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	071b      	lsls	r3, r3, #28
 8005796:	491b      	ldr	r1, [pc, #108]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 8005798:	4313      	orrs	r3, r2
 800579a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800579c:	4b1b      	ldr	r3, [pc, #108]	; (800580c <HAL_RCC_OscConfig+0x4b4>)
 800579e:	2201      	movs	r2, #1
 80057a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a2:	f7fe faaf 	bl	8003d04 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057aa:	f7fe faab 	bl	8003d04 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e064      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057bc:	4b11      	ldr	r3, [pc, #68]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCC_OscConfig+0x452>
 80057c8:	e05c      	b.n	8005884 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ca:	4b10      	ldr	r3, [pc, #64]	; (800580c <HAL_RCC_OscConfig+0x4b4>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d0:	f7fe fa98 	bl	8003d04 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d8:	f7fe fa94 	bl	8003d04 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e04d      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ea:	4b06      	ldr	r3, [pc, #24]	; (8005804 <HAL_RCC_OscConfig+0x4ac>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f0      	bne.n	80057d8 <HAL_RCC_OscConfig+0x480>
 80057f6:	e045      	b.n	8005884 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d107      	bne.n	8005810 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e040      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
 8005804:	40023800 	.word	0x40023800
 8005808:	40007000 	.word	0x40007000
 800580c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005810:	4b1f      	ldr	r3, [pc, #124]	; (8005890 <HAL_RCC_OscConfig+0x538>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d030      	beq.n	8005880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005828:	429a      	cmp	r2, r3
 800582a:	d129      	bne.n	8005880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005836:	429a      	cmp	r2, r3
 8005838:	d122      	bne.n	8005880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005840:	4013      	ands	r3, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005846:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005848:	4293      	cmp	r3, r2
 800584a:	d119      	bne.n	8005880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	3b01      	subs	r3, #1
 800585a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800585c:	429a      	cmp	r2, r3
 800585e:	d10f      	bne.n	8005880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800586c:	429a      	cmp	r2, r3
 800586e:	d107      	bne.n	8005880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800587c:	429a      	cmp	r2, r3
 800587e:	d001      	beq.n	8005884 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40023800 	.word	0x40023800

08005894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e041      	b.n	800592a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fb fe40 	bl	8001540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3304      	adds	r3, #4
 80058d0:	4619      	mov	r1, r3
 80058d2:	4610      	mov	r0, r2
 80058d4:	f000 f82e 	bl	8005934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a46      	ldr	r2, [pc, #280]	; (8005a60 <TIM_Base_SetConfig+0x12c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d013      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005952:	d00f      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a43      	ldr	r2, [pc, #268]	; (8005a64 <TIM_Base_SetConfig+0x130>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00b      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a42      	ldr	r2, [pc, #264]	; (8005a68 <TIM_Base_SetConfig+0x134>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d007      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a41      	ldr	r2, [pc, #260]	; (8005a6c <TIM_Base_SetConfig+0x138>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d003      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a40      	ldr	r2, [pc, #256]	; (8005a70 <TIM_Base_SetConfig+0x13c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d108      	bne.n	8005986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a35      	ldr	r2, [pc, #212]	; (8005a60 <TIM_Base_SetConfig+0x12c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d02b      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005994:	d027      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a32      	ldr	r2, [pc, #200]	; (8005a64 <TIM_Base_SetConfig+0x130>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d023      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a31      	ldr	r2, [pc, #196]	; (8005a68 <TIM_Base_SetConfig+0x134>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d01f      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a30      	ldr	r2, [pc, #192]	; (8005a6c <TIM_Base_SetConfig+0x138>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01b      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2f      	ldr	r2, [pc, #188]	; (8005a70 <TIM_Base_SetConfig+0x13c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d017      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2e      	ldr	r2, [pc, #184]	; (8005a74 <TIM_Base_SetConfig+0x140>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a2d      	ldr	r2, [pc, #180]	; (8005a78 <TIM_Base_SetConfig+0x144>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00f      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2c      	ldr	r2, [pc, #176]	; (8005a7c <TIM_Base_SetConfig+0x148>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00b      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2b      	ldr	r2, [pc, #172]	; (8005a80 <TIM_Base_SetConfig+0x14c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d007      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2a      	ldr	r2, [pc, #168]	; (8005a84 <TIM_Base_SetConfig+0x150>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a29      	ldr	r2, [pc, #164]	; (8005a88 <TIM_Base_SetConfig+0x154>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d108      	bne.n	80059f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a10      	ldr	r2, [pc, #64]	; (8005a60 <TIM_Base_SetConfig+0x12c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d003      	beq.n	8005a2c <TIM_Base_SetConfig+0xf8>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a12      	ldr	r2, [pc, #72]	; (8005a70 <TIM_Base_SetConfig+0x13c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d103      	bne.n	8005a34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d105      	bne.n	8005a52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f023 0201 	bic.w	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	611a      	str	r2, [r3, #16]
  }
}
 8005a52:	bf00      	nop
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40010000 	.word	0x40010000
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40000c00 	.word	0x40000c00
 8005a70:	40010400 	.word	0x40010400
 8005a74:	40014000 	.word	0x40014000
 8005a78:	40014400 	.word	0x40014400
 8005a7c:	40014800 	.word	0x40014800
 8005a80:	40001800 	.word	0x40001800
 8005a84:	40001c00 	.word	0x40001c00
 8005a88:	40002000 	.word	0x40002000

08005a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e05a      	b.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a21      	ldr	r2, [pc, #132]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d022      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af0:	d01d      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1d      	ldr	r2, [pc, #116]	; (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d018      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1b      	ldr	r2, [pc, #108]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d013      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1a      	ldr	r2, [pc, #104]	; (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00e      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a18      	ldr	r2, [pc, #96]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d009      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a17      	ldr	r2, [pc, #92]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d004      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a15      	ldr	r2, [pc, #84]	; (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d10c      	bne.n	8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40010000 	.word	0x40010000
 8005b6c:	40000400 	.word	0x40000400
 8005b70:	40000800 	.word	0x40000800
 8005b74:	40000c00 	.word	0x40000c00
 8005b78:	40010400 	.word	0x40010400
 8005b7c:	40014000 	.word	0x40014000
 8005b80:	40001800 	.word	0x40001800

08005b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e042      	b.n	8005c1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fb fcea 	bl	8001584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2224      	movs	r2, #36	; 0x24
 8005bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f973 	bl	8005eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695a      	ldr	r2, [r3, #20]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08a      	sub	sp, #40	; 0x28
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	4613      	mov	r3, r2
 8005c32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d175      	bne.n	8005d30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <HAL_UART_Transmit+0x2c>
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e06e      	b.n	8005d32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2221      	movs	r2, #33	; 0x21
 8005c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c62:	f7fe f84f 	bl	8003d04 <HAL_GetTick>
 8005c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	88fa      	ldrh	r2, [r7, #6]
 8005c6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	88fa      	ldrh	r2, [r7, #6]
 8005c72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7c:	d108      	bne.n	8005c90 <HAL_UART_Transmit+0x6c>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d104      	bne.n	8005c90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	e003      	b.n	8005c98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c98:	e02e      	b.n	8005cf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2180      	movs	r1, #128	; 0x80
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f848 	bl	8005d3a <UART_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e03a      	b.n	8005d32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10b      	bne.n	8005cda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	61bb      	str	r3, [r7, #24]
 8005cd8:	e007      	b.n	8005cea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	781a      	ldrb	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1cb      	bne.n	8005c9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2140      	movs	r1, #64	; 0x40
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f814 	bl	8005d3a <UART_WaitOnFlagUntilTimeout>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e006      	b.n	8005d32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e000      	b.n	8005d32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005d30:	2302      	movs	r3, #2
  }
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b086      	sub	sp, #24
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	603b      	str	r3, [r7, #0]
 8005d46:	4613      	mov	r3, r2
 8005d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d4a:	e03b      	b.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d52:	d037      	beq.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d54:	f7fd ffd6 	bl	8003d04 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	6a3a      	ldr	r2, [r7, #32]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d302      	bcc.n	8005d6a <UART_WaitOnFlagUntilTimeout+0x30>
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e03a      	b.n	8005de4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d023      	beq.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b80      	cmp	r3, #128	; 0x80
 8005d80:	d020      	beq.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b40      	cmp	r3, #64	; 0x40
 8005d86:	d01d      	beq.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d116      	bne.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f81d 	bl	8005dec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2208      	movs	r2, #8
 8005db6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e00f      	b.n	8005de4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	bf0c      	ite	eq
 8005dd4:	2301      	moveq	r3, #1
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d0b4      	beq.n	8005d4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b095      	sub	sp, #84	; 0x54
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	330c      	adds	r3, #12
 8005dfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	330c      	adds	r3, #12
 8005e12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e14:	643a      	str	r2, [r7, #64]	; 0x40
 8005e16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e5      	bne.n	8005df4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3314      	adds	r3, #20
 8005e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f023 0301 	bic.w	r3, r3, #1
 8005e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3314      	adds	r3, #20
 8005e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e5      	bne.n	8005e28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d119      	bne.n	8005e98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f023 0310 	bic.w	r3, r3, #16
 8005e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	330c      	adds	r3, #12
 8005e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e84:	61ba      	str	r2, [r7, #24]
 8005e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	6979      	ldr	r1, [r7, #20]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	e841 2300 	strex	r3, r2, [r1]
 8005e90:	613b      	str	r3, [r7, #16]
   return(result);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e5      	bne.n	8005e64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ea6:	bf00      	nop
 8005ea8:	3754      	adds	r7, #84	; 0x54
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eb8:	b0c0      	sub	sp, #256	; 0x100
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed0:	68d9      	ldr	r1, [r3, #12]
 8005ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	ea40 0301 	orr.w	r3, r0, r1
 8005edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f0c:	f021 010c 	bic.w	r1, r1, #12
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2e:	6999      	ldr	r1, [r3, #24]
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	ea40 0301 	orr.w	r3, r0, r1
 8005f3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4b8f      	ldr	r3, [pc, #572]	; (8006180 <UART_SetConfig+0x2cc>)
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d005      	beq.n	8005f54 <UART_SetConfig+0xa0>
 8005f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4b8d      	ldr	r3, [pc, #564]	; (8006184 <UART_SetConfig+0x2d0>)
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d104      	bne.n	8005f5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f54:	f7ff f842 	bl	8004fdc <HAL_RCC_GetPCLK2Freq>
 8005f58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f5c:	e003      	b.n	8005f66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f5e:	f7ff f829 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8005f62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f70:	f040 810c 	bne.w	800618c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f86:	4622      	mov	r2, r4
 8005f88:	462b      	mov	r3, r5
 8005f8a:	1891      	adds	r1, r2, r2
 8005f8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f8e:	415b      	adcs	r3, r3
 8005f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f96:	4621      	mov	r1, r4
 8005f98:	eb12 0801 	adds.w	r8, r2, r1
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	eb43 0901 	adc.w	r9, r3, r1
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	f04f 0300 	mov.w	r3, #0
 8005faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fb6:	4690      	mov	r8, r2
 8005fb8:	4699      	mov	r9, r3
 8005fba:	4623      	mov	r3, r4
 8005fbc:	eb18 0303 	adds.w	r3, r8, r3
 8005fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	eb49 0303 	adc.w	r3, r9, r3
 8005fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	18db      	adds	r3, r3, r3
 8005fe6:	653b      	str	r3, [r7, #80]	; 0x50
 8005fe8:	4613      	mov	r3, r2
 8005fea:	eb42 0303 	adc.w	r3, r2, r3
 8005fee:	657b      	str	r3, [r7, #84]	; 0x54
 8005ff0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ff4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ff8:	f7fa fdf6 	bl	8000be8 <__aeabi_uldivmod>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4b61      	ldr	r3, [pc, #388]	; (8006188 <UART_SetConfig+0x2d4>)
 8006002:	fba3 2302 	umull	r2, r3, r3, r2
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	011c      	lsls	r4, r3, #4
 800600a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800600e:	2200      	movs	r2, #0
 8006010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006014:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006018:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800601c:	4642      	mov	r2, r8
 800601e:	464b      	mov	r3, r9
 8006020:	1891      	adds	r1, r2, r2
 8006022:	64b9      	str	r1, [r7, #72]	; 0x48
 8006024:	415b      	adcs	r3, r3
 8006026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800602c:	4641      	mov	r1, r8
 800602e:	eb12 0a01 	adds.w	sl, r2, r1
 8006032:	4649      	mov	r1, r9
 8006034:	eb43 0b01 	adc.w	fp, r3, r1
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006044:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800604c:	4692      	mov	sl, r2
 800604e:	469b      	mov	fp, r3
 8006050:	4643      	mov	r3, r8
 8006052:	eb1a 0303 	adds.w	r3, sl, r3
 8006056:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800605a:	464b      	mov	r3, r9
 800605c:	eb4b 0303 	adc.w	r3, fp, r3
 8006060:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006070:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006074:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006078:	460b      	mov	r3, r1
 800607a:	18db      	adds	r3, r3, r3
 800607c:	643b      	str	r3, [r7, #64]	; 0x40
 800607e:	4613      	mov	r3, r2
 8006080:	eb42 0303 	adc.w	r3, r2, r3
 8006084:	647b      	str	r3, [r7, #68]	; 0x44
 8006086:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800608a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800608e:	f7fa fdab 	bl	8000be8 <__aeabi_uldivmod>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4611      	mov	r1, r2
 8006098:	4b3b      	ldr	r3, [pc, #236]	; (8006188 <UART_SetConfig+0x2d4>)
 800609a:	fba3 2301 	umull	r2, r3, r3, r1
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	2264      	movs	r2, #100	; 0x64
 80060a2:	fb02 f303 	mul.w	r3, r2, r3
 80060a6:	1acb      	subs	r3, r1, r3
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80060ae:	4b36      	ldr	r3, [pc, #216]	; (8006188 <UART_SetConfig+0x2d4>)
 80060b0:	fba3 2302 	umull	r2, r3, r3, r2
 80060b4:	095b      	lsrs	r3, r3, #5
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060bc:	441c      	add	r4, r3
 80060be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060d0:	4642      	mov	r2, r8
 80060d2:	464b      	mov	r3, r9
 80060d4:	1891      	adds	r1, r2, r2
 80060d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80060d8:	415b      	adcs	r3, r3
 80060da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060e0:	4641      	mov	r1, r8
 80060e2:	1851      	adds	r1, r2, r1
 80060e4:	6339      	str	r1, [r7, #48]	; 0x30
 80060e6:	4649      	mov	r1, r9
 80060e8:	414b      	adcs	r3, r1
 80060ea:	637b      	str	r3, [r7, #52]	; 0x34
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060f8:	4659      	mov	r1, fp
 80060fa:	00cb      	lsls	r3, r1, #3
 80060fc:	4651      	mov	r1, sl
 80060fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006102:	4651      	mov	r1, sl
 8006104:	00ca      	lsls	r2, r1, #3
 8006106:	4610      	mov	r0, r2
 8006108:	4619      	mov	r1, r3
 800610a:	4603      	mov	r3, r0
 800610c:	4642      	mov	r2, r8
 800610e:	189b      	adds	r3, r3, r2
 8006110:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006114:	464b      	mov	r3, r9
 8006116:	460a      	mov	r2, r1
 8006118:	eb42 0303 	adc.w	r3, r2, r3
 800611c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800612c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006134:	460b      	mov	r3, r1
 8006136:	18db      	adds	r3, r3, r3
 8006138:	62bb      	str	r3, [r7, #40]	; 0x28
 800613a:	4613      	mov	r3, r2
 800613c:	eb42 0303 	adc.w	r3, r2, r3
 8006140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006146:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800614a:	f7fa fd4d 	bl	8000be8 <__aeabi_uldivmod>
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	4b0d      	ldr	r3, [pc, #52]	; (8006188 <UART_SetConfig+0x2d4>)
 8006154:	fba3 1302 	umull	r1, r3, r3, r2
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	2164      	movs	r1, #100	; 0x64
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	3332      	adds	r3, #50	; 0x32
 8006166:	4a08      	ldr	r2, [pc, #32]	; (8006188 <UART_SetConfig+0x2d4>)
 8006168:	fba2 2303 	umull	r2, r3, r2, r3
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	f003 0207 	and.w	r2, r3, #7
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4422      	add	r2, r4
 800617a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800617c:	e106      	b.n	800638c <UART_SetConfig+0x4d8>
 800617e:	bf00      	nop
 8006180:	40011000 	.word	0x40011000
 8006184:	40011400 	.word	0x40011400
 8006188:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800618c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006190:	2200      	movs	r2, #0
 8006192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006196:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800619a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800619e:	4642      	mov	r2, r8
 80061a0:	464b      	mov	r3, r9
 80061a2:	1891      	adds	r1, r2, r2
 80061a4:	6239      	str	r1, [r7, #32]
 80061a6:	415b      	adcs	r3, r3
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
 80061aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061ae:	4641      	mov	r1, r8
 80061b0:	1854      	adds	r4, r2, r1
 80061b2:	4649      	mov	r1, r9
 80061b4:	eb43 0501 	adc.w	r5, r3, r1
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	00eb      	lsls	r3, r5, #3
 80061c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061c6:	00e2      	lsls	r2, r4, #3
 80061c8:	4614      	mov	r4, r2
 80061ca:	461d      	mov	r5, r3
 80061cc:	4643      	mov	r3, r8
 80061ce:	18e3      	adds	r3, r4, r3
 80061d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061d4:	464b      	mov	r3, r9
 80061d6:	eb45 0303 	adc.w	r3, r5, r3
 80061da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	f04f 0300 	mov.w	r3, #0
 80061f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061fa:	4629      	mov	r1, r5
 80061fc:	008b      	lsls	r3, r1, #2
 80061fe:	4621      	mov	r1, r4
 8006200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006204:	4621      	mov	r1, r4
 8006206:	008a      	lsls	r2, r1, #2
 8006208:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800620c:	f7fa fcec 	bl	8000be8 <__aeabi_uldivmod>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4b60      	ldr	r3, [pc, #384]	; (8006398 <UART_SetConfig+0x4e4>)
 8006216:	fba3 2302 	umull	r2, r3, r3, r2
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	011c      	lsls	r4, r3, #4
 800621e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006222:	2200      	movs	r2, #0
 8006224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006228:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800622c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006230:	4642      	mov	r2, r8
 8006232:	464b      	mov	r3, r9
 8006234:	1891      	adds	r1, r2, r2
 8006236:	61b9      	str	r1, [r7, #24]
 8006238:	415b      	adcs	r3, r3
 800623a:	61fb      	str	r3, [r7, #28]
 800623c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006240:	4641      	mov	r1, r8
 8006242:	1851      	adds	r1, r2, r1
 8006244:	6139      	str	r1, [r7, #16]
 8006246:	4649      	mov	r1, r9
 8006248:	414b      	adcs	r3, r1
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006258:	4659      	mov	r1, fp
 800625a:	00cb      	lsls	r3, r1, #3
 800625c:	4651      	mov	r1, sl
 800625e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006262:	4651      	mov	r1, sl
 8006264:	00ca      	lsls	r2, r1, #3
 8006266:	4610      	mov	r0, r2
 8006268:	4619      	mov	r1, r3
 800626a:	4603      	mov	r3, r0
 800626c:	4642      	mov	r2, r8
 800626e:	189b      	adds	r3, r3, r2
 8006270:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006274:	464b      	mov	r3, r9
 8006276:	460a      	mov	r2, r1
 8006278:	eb42 0303 	adc.w	r3, r2, r3
 800627c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	67bb      	str	r3, [r7, #120]	; 0x78
 800628a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006298:	4649      	mov	r1, r9
 800629a:	008b      	lsls	r3, r1, #2
 800629c:	4641      	mov	r1, r8
 800629e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062a2:	4641      	mov	r1, r8
 80062a4:	008a      	lsls	r2, r1, #2
 80062a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80062aa:	f7fa fc9d 	bl	8000be8 <__aeabi_uldivmod>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4611      	mov	r1, r2
 80062b4:	4b38      	ldr	r3, [pc, #224]	; (8006398 <UART_SetConfig+0x4e4>)
 80062b6:	fba3 2301 	umull	r2, r3, r3, r1
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	2264      	movs	r2, #100	; 0x64
 80062be:	fb02 f303 	mul.w	r3, r2, r3
 80062c2:	1acb      	subs	r3, r1, r3
 80062c4:	011b      	lsls	r3, r3, #4
 80062c6:	3332      	adds	r3, #50	; 0x32
 80062c8:	4a33      	ldr	r2, [pc, #204]	; (8006398 <UART_SetConfig+0x4e4>)
 80062ca:	fba2 2303 	umull	r2, r3, r2, r3
 80062ce:	095b      	lsrs	r3, r3, #5
 80062d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062d4:	441c      	add	r4, r3
 80062d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062da:	2200      	movs	r2, #0
 80062dc:	673b      	str	r3, [r7, #112]	; 0x70
 80062de:	677a      	str	r2, [r7, #116]	; 0x74
 80062e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062e4:	4642      	mov	r2, r8
 80062e6:	464b      	mov	r3, r9
 80062e8:	1891      	adds	r1, r2, r2
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	415b      	adcs	r3, r3
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062f4:	4641      	mov	r1, r8
 80062f6:	1851      	adds	r1, r2, r1
 80062f8:	6039      	str	r1, [r7, #0]
 80062fa:	4649      	mov	r1, r9
 80062fc:	414b      	adcs	r3, r1
 80062fe:	607b      	str	r3, [r7, #4]
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800630c:	4659      	mov	r1, fp
 800630e:	00cb      	lsls	r3, r1, #3
 8006310:	4651      	mov	r1, sl
 8006312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006316:	4651      	mov	r1, sl
 8006318:	00ca      	lsls	r2, r1, #3
 800631a:	4610      	mov	r0, r2
 800631c:	4619      	mov	r1, r3
 800631e:	4603      	mov	r3, r0
 8006320:	4642      	mov	r2, r8
 8006322:	189b      	adds	r3, r3, r2
 8006324:	66bb      	str	r3, [r7, #104]	; 0x68
 8006326:	464b      	mov	r3, r9
 8006328:	460a      	mov	r2, r1
 800632a:	eb42 0303 	adc.w	r3, r2, r3
 800632e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	663b      	str	r3, [r7, #96]	; 0x60
 800633a:	667a      	str	r2, [r7, #100]	; 0x64
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	f04f 0300 	mov.w	r3, #0
 8006344:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006348:	4649      	mov	r1, r9
 800634a:	008b      	lsls	r3, r1, #2
 800634c:	4641      	mov	r1, r8
 800634e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006352:	4641      	mov	r1, r8
 8006354:	008a      	lsls	r2, r1, #2
 8006356:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800635a:	f7fa fc45 	bl	8000be8 <__aeabi_uldivmod>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <UART_SetConfig+0x4e4>)
 8006364:	fba3 1302 	umull	r1, r3, r3, r2
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	2164      	movs	r1, #100	; 0x64
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	3332      	adds	r3, #50	; 0x32
 8006376:	4a08      	ldr	r2, [pc, #32]	; (8006398 <UART_SetConfig+0x4e4>)
 8006378:	fba2 2303 	umull	r2, r3, r2, r3
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	f003 020f 	and.w	r2, r3, #15
 8006382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4422      	add	r2, r4
 800638a:	609a      	str	r2, [r3, #8]
}
 800638c:	bf00      	nop
 800638e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006392:	46bd      	mov	sp, r7
 8006394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006398:	51eb851f 	.word	0x51eb851f

0800639c <__cvt>:
 800639c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063a0:	ec55 4b10 	vmov	r4, r5, d0
 80063a4:	2d00      	cmp	r5, #0
 80063a6:	460e      	mov	r6, r1
 80063a8:	4619      	mov	r1, r3
 80063aa:	462b      	mov	r3, r5
 80063ac:	bfbb      	ittet	lt
 80063ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063b2:	461d      	movlt	r5, r3
 80063b4:	2300      	movge	r3, #0
 80063b6:	232d      	movlt	r3, #45	; 0x2d
 80063b8:	700b      	strb	r3, [r1, #0]
 80063ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063c0:	4691      	mov	r9, r2
 80063c2:	f023 0820 	bic.w	r8, r3, #32
 80063c6:	bfbc      	itt	lt
 80063c8:	4622      	movlt	r2, r4
 80063ca:	4614      	movlt	r4, r2
 80063cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063d0:	d005      	beq.n	80063de <__cvt+0x42>
 80063d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063d6:	d100      	bne.n	80063da <__cvt+0x3e>
 80063d8:	3601      	adds	r6, #1
 80063da:	2102      	movs	r1, #2
 80063dc:	e000      	b.n	80063e0 <__cvt+0x44>
 80063de:	2103      	movs	r1, #3
 80063e0:	ab03      	add	r3, sp, #12
 80063e2:	9301      	str	r3, [sp, #4]
 80063e4:	ab02      	add	r3, sp, #8
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	ec45 4b10 	vmov	d0, r4, r5
 80063ec:	4653      	mov	r3, sl
 80063ee:	4632      	mov	r2, r6
 80063f0:	f000 fe76 	bl	80070e0 <_dtoa_r>
 80063f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063f8:	4607      	mov	r7, r0
 80063fa:	d102      	bne.n	8006402 <__cvt+0x66>
 80063fc:	f019 0f01 	tst.w	r9, #1
 8006400:	d022      	beq.n	8006448 <__cvt+0xac>
 8006402:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006406:	eb07 0906 	add.w	r9, r7, r6
 800640a:	d110      	bne.n	800642e <__cvt+0x92>
 800640c:	783b      	ldrb	r3, [r7, #0]
 800640e:	2b30      	cmp	r3, #48	; 0x30
 8006410:	d10a      	bne.n	8006428 <__cvt+0x8c>
 8006412:	2200      	movs	r2, #0
 8006414:	2300      	movs	r3, #0
 8006416:	4620      	mov	r0, r4
 8006418:	4629      	mov	r1, r5
 800641a:	f7fa fb75 	bl	8000b08 <__aeabi_dcmpeq>
 800641e:	b918      	cbnz	r0, 8006428 <__cvt+0x8c>
 8006420:	f1c6 0601 	rsb	r6, r6, #1
 8006424:	f8ca 6000 	str.w	r6, [sl]
 8006428:	f8da 3000 	ldr.w	r3, [sl]
 800642c:	4499      	add	r9, r3
 800642e:	2200      	movs	r2, #0
 8006430:	2300      	movs	r3, #0
 8006432:	4620      	mov	r0, r4
 8006434:	4629      	mov	r1, r5
 8006436:	f7fa fb67 	bl	8000b08 <__aeabi_dcmpeq>
 800643a:	b108      	cbz	r0, 8006440 <__cvt+0xa4>
 800643c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006440:	2230      	movs	r2, #48	; 0x30
 8006442:	9b03      	ldr	r3, [sp, #12]
 8006444:	454b      	cmp	r3, r9
 8006446:	d307      	bcc.n	8006458 <__cvt+0xbc>
 8006448:	9b03      	ldr	r3, [sp, #12]
 800644a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800644c:	1bdb      	subs	r3, r3, r7
 800644e:	4638      	mov	r0, r7
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	b004      	add	sp, #16
 8006454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006458:	1c59      	adds	r1, r3, #1
 800645a:	9103      	str	r1, [sp, #12]
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	e7f0      	b.n	8006442 <__cvt+0xa6>

08006460 <__exponent>:
 8006460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006462:	4603      	mov	r3, r0
 8006464:	2900      	cmp	r1, #0
 8006466:	bfb8      	it	lt
 8006468:	4249      	neglt	r1, r1
 800646a:	f803 2b02 	strb.w	r2, [r3], #2
 800646e:	bfb4      	ite	lt
 8006470:	222d      	movlt	r2, #45	; 0x2d
 8006472:	222b      	movge	r2, #43	; 0x2b
 8006474:	2909      	cmp	r1, #9
 8006476:	7042      	strb	r2, [r0, #1]
 8006478:	dd2a      	ble.n	80064d0 <__exponent+0x70>
 800647a:	f10d 0207 	add.w	r2, sp, #7
 800647e:	4617      	mov	r7, r2
 8006480:	260a      	movs	r6, #10
 8006482:	4694      	mov	ip, r2
 8006484:	fb91 f5f6 	sdiv	r5, r1, r6
 8006488:	fb06 1415 	mls	r4, r6, r5, r1
 800648c:	3430      	adds	r4, #48	; 0x30
 800648e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006492:	460c      	mov	r4, r1
 8006494:	2c63      	cmp	r4, #99	; 0x63
 8006496:	f102 32ff 	add.w	r2, r2, #4294967295
 800649a:	4629      	mov	r1, r5
 800649c:	dcf1      	bgt.n	8006482 <__exponent+0x22>
 800649e:	3130      	adds	r1, #48	; 0x30
 80064a0:	f1ac 0402 	sub.w	r4, ip, #2
 80064a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80064a8:	1c41      	adds	r1, r0, #1
 80064aa:	4622      	mov	r2, r4
 80064ac:	42ba      	cmp	r2, r7
 80064ae:	d30a      	bcc.n	80064c6 <__exponent+0x66>
 80064b0:	f10d 0209 	add.w	r2, sp, #9
 80064b4:	eba2 020c 	sub.w	r2, r2, ip
 80064b8:	42bc      	cmp	r4, r7
 80064ba:	bf88      	it	hi
 80064bc:	2200      	movhi	r2, #0
 80064be:	4413      	add	r3, r2
 80064c0:	1a18      	subs	r0, r3, r0
 80064c2:	b003      	add	sp, #12
 80064c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80064ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 80064ce:	e7ed      	b.n	80064ac <__exponent+0x4c>
 80064d0:	2330      	movs	r3, #48	; 0x30
 80064d2:	3130      	adds	r1, #48	; 0x30
 80064d4:	7083      	strb	r3, [r0, #2]
 80064d6:	70c1      	strb	r1, [r0, #3]
 80064d8:	1d03      	adds	r3, r0, #4
 80064da:	e7f1      	b.n	80064c0 <__exponent+0x60>

080064dc <_printf_float>:
 80064dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e0:	ed2d 8b02 	vpush	{d8}
 80064e4:	b08d      	sub	sp, #52	; 0x34
 80064e6:	460c      	mov	r4, r1
 80064e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80064ec:	4616      	mov	r6, r2
 80064ee:	461f      	mov	r7, r3
 80064f0:	4605      	mov	r5, r0
 80064f2:	f000 fce7 	bl	8006ec4 <_localeconv_r>
 80064f6:	f8d0 a000 	ldr.w	sl, [r0]
 80064fa:	4650      	mov	r0, sl
 80064fc:	f7f9 fed8 	bl	80002b0 <strlen>
 8006500:	2300      	movs	r3, #0
 8006502:	930a      	str	r3, [sp, #40]	; 0x28
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	9305      	str	r3, [sp, #20]
 8006508:	f8d8 3000 	ldr.w	r3, [r8]
 800650c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006510:	3307      	adds	r3, #7
 8006512:	f023 0307 	bic.w	r3, r3, #7
 8006516:	f103 0208 	add.w	r2, r3, #8
 800651a:	f8c8 2000 	str.w	r2, [r8]
 800651e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006522:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006526:	9307      	str	r3, [sp, #28]
 8006528:	f8cd 8018 	str.w	r8, [sp, #24]
 800652c:	ee08 0a10 	vmov	s16, r0
 8006530:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006534:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006538:	4b9e      	ldr	r3, [pc, #632]	; (80067b4 <_printf_float+0x2d8>)
 800653a:	f04f 32ff 	mov.w	r2, #4294967295
 800653e:	f7fa fb15 	bl	8000b6c <__aeabi_dcmpun>
 8006542:	bb88      	cbnz	r0, 80065a8 <_printf_float+0xcc>
 8006544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006548:	4b9a      	ldr	r3, [pc, #616]	; (80067b4 <_printf_float+0x2d8>)
 800654a:	f04f 32ff 	mov.w	r2, #4294967295
 800654e:	f7fa faef 	bl	8000b30 <__aeabi_dcmple>
 8006552:	bb48      	cbnz	r0, 80065a8 <_printf_float+0xcc>
 8006554:	2200      	movs	r2, #0
 8006556:	2300      	movs	r3, #0
 8006558:	4640      	mov	r0, r8
 800655a:	4649      	mov	r1, r9
 800655c:	f7fa fade 	bl	8000b1c <__aeabi_dcmplt>
 8006560:	b110      	cbz	r0, 8006568 <_printf_float+0x8c>
 8006562:	232d      	movs	r3, #45	; 0x2d
 8006564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006568:	4a93      	ldr	r2, [pc, #588]	; (80067b8 <_printf_float+0x2dc>)
 800656a:	4b94      	ldr	r3, [pc, #592]	; (80067bc <_printf_float+0x2e0>)
 800656c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006570:	bf94      	ite	ls
 8006572:	4690      	movls	r8, r2
 8006574:	4698      	movhi	r8, r3
 8006576:	2303      	movs	r3, #3
 8006578:	6123      	str	r3, [r4, #16]
 800657a:	9b05      	ldr	r3, [sp, #20]
 800657c:	f023 0304 	bic.w	r3, r3, #4
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	f04f 0900 	mov.w	r9, #0
 8006586:	9700      	str	r7, [sp, #0]
 8006588:	4633      	mov	r3, r6
 800658a:	aa0b      	add	r2, sp, #44	; 0x2c
 800658c:	4621      	mov	r1, r4
 800658e:	4628      	mov	r0, r5
 8006590:	f000 f9da 	bl	8006948 <_printf_common>
 8006594:	3001      	adds	r0, #1
 8006596:	f040 8090 	bne.w	80066ba <_printf_float+0x1de>
 800659a:	f04f 30ff 	mov.w	r0, #4294967295
 800659e:	b00d      	add	sp, #52	; 0x34
 80065a0:	ecbd 8b02 	vpop	{d8}
 80065a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a8:	4642      	mov	r2, r8
 80065aa:	464b      	mov	r3, r9
 80065ac:	4640      	mov	r0, r8
 80065ae:	4649      	mov	r1, r9
 80065b0:	f7fa fadc 	bl	8000b6c <__aeabi_dcmpun>
 80065b4:	b140      	cbz	r0, 80065c8 <_printf_float+0xec>
 80065b6:	464b      	mov	r3, r9
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bfbc      	itt	lt
 80065bc:	232d      	movlt	r3, #45	; 0x2d
 80065be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80065c2:	4a7f      	ldr	r2, [pc, #508]	; (80067c0 <_printf_float+0x2e4>)
 80065c4:	4b7f      	ldr	r3, [pc, #508]	; (80067c4 <_printf_float+0x2e8>)
 80065c6:	e7d1      	b.n	800656c <_printf_float+0x90>
 80065c8:	6863      	ldr	r3, [r4, #4]
 80065ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80065ce:	9206      	str	r2, [sp, #24]
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	d13f      	bne.n	8006654 <_printf_float+0x178>
 80065d4:	2306      	movs	r3, #6
 80065d6:	6063      	str	r3, [r4, #4]
 80065d8:	9b05      	ldr	r3, [sp, #20]
 80065da:	6861      	ldr	r1, [r4, #4]
 80065dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065e0:	2300      	movs	r3, #0
 80065e2:	9303      	str	r3, [sp, #12]
 80065e4:	ab0a      	add	r3, sp, #40	; 0x28
 80065e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80065ea:	ab09      	add	r3, sp, #36	; 0x24
 80065ec:	ec49 8b10 	vmov	d0, r8, r9
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	6022      	str	r2, [r4, #0]
 80065f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065f8:	4628      	mov	r0, r5
 80065fa:	f7ff fecf 	bl	800639c <__cvt>
 80065fe:	9b06      	ldr	r3, [sp, #24]
 8006600:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006602:	2b47      	cmp	r3, #71	; 0x47
 8006604:	4680      	mov	r8, r0
 8006606:	d108      	bne.n	800661a <_printf_float+0x13e>
 8006608:	1cc8      	adds	r0, r1, #3
 800660a:	db02      	blt.n	8006612 <_printf_float+0x136>
 800660c:	6863      	ldr	r3, [r4, #4]
 800660e:	4299      	cmp	r1, r3
 8006610:	dd41      	ble.n	8006696 <_printf_float+0x1ba>
 8006612:	f1ab 0302 	sub.w	r3, fp, #2
 8006616:	fa5f fb83 	uxtb.w	fp, r3
 800661a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800661e:	d820      	bhi.n	8006662 <_printf_float+0x186>
 8006620:	3901      	subs	r1, #1
 8006622:	465a      	mov	r2, fp
 8006624:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006628:	9109      	str	r1, [sp, #36]	; 0x24
 800662a:	f7ff ff19 	bl	8006460 <__exponent>
 800662e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006630:	1813      	adds	r3, r2, r0
 8006632:	2a01      	cmp	r2, #1
 8006634:	4681      	mov	r9, r0
 8006636:	6123      	str	r3, [r4, #16]
 8006638:	dc02      	bgt.n	8006640 <_printf_float+0x164>
 800663a:	6822      	ldr	r2, [r4, #0]
 800663c:	07d2      	lsls	r2, r2, #31
 800663e:	d501      	bpl.n	8006644 <_printf_float+0x168>
 8006640:	3301      	adds	r3, #1
 8006642:	6123      	str	r3, [r4, #16]
 8006644:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006648:	2b00      	cmp	r3, #0
 800664a:	d09c      	beq.n	8006586 <_printf_float+0xaa>
 800664c:	232d      	movs	r3, #45	; 0x2d
 800664e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006652:	e798      	b.n	8006586 <_printf_float+0xaa>
 8006654:	9a06      	ldr	r2, [sp, #24]
 8006656:	2a47      	cmp	r2, #71	; 0x47
 8006658:	d1be      	bne.n	80065d8 <_printf_float+0xfc>
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1bc      	bne.n	80065d8 <_printf_float+0xfc>
 800665e:	2301      	movs	r3, #1
 8006660:	e7b9      	b.n	80065d6 <_printf_float+0xfa>
 8006662:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006666:	d118      	bne.n	800669a <_printf_float+0x1be>
 8006668:	2900      	cmp	r1, #0
 800666a:	6863      	ldr	r3, [r4, #4]
 800666c:	dd0b      	ble.n	8006686 <_printf_float+0x1aa>
 800666e:	6121      	str	r1, [r4, #16]
 8006670:	b913      	cbnz	r3, 8006678 <_printf_float+0x19c>
 8006672:	6822      	ldr	r2, [r4, #0]
 8006674:	07d0      	lsls	r0, r2, #31
 8006676:	d502      	bpl.n	800667e <_printf_float+0x1a2>
 8006678:	3301      	adds	r3, #1
 800667a:	440b      	add	r3, r1
 800667c:	6123      	str	r3, [r4, #16]
 800667e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006680:	f04f 0900 	mov.w	r9, #0
 8006684:	e7de      	b.n	8006644 <_printf_float+0x168>
 8006686:	b913      	cbnz	r3, 800668e <_printf_float+0x1b2>
 8006688:	6822      	ldr	r2, [r4, #0]
 800668a:	07d2      	lsls	r2, r2, #31
 800668c:	d501      	bpl.n	8006692 <_printf_float+0x1b6>
 800668e:	3302      	adds	r3, #2
 8006690:	e7f4      	b.n	800667c <_printf_float+0x1a0>
 8006692:	2301      	movs	r3, #1
 8006694:	e7f2      	b.n	800667c <_printf_float+0x1a0>
 8006696:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800669a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800669c:	4299      	cmp	r1, r3
 800669e:	db05      	blt.n	80066ac <_printf_float+0x1d0>
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	6121      	str	r1, [r4, #16]
 80066a4:	07d8      	lsls	r0, r3, #31
 80066a6:	d5ea      	bpl.n	800667e <_printf_float+0x1a2>
 80066a8:	1c4b      	adds	r3, r1, #1
 80066aa:	e7e7      	b.n	800667c <_printf_float+0x1a0>
 80066ac:	2900      	cmp	r1, #0
 80066ae:	bfd4      	ite	le
 80066b0:	f1c1 0202 	rsble	r2, r1, #2
 80066b4:	2201      	movgt	r2, #1
 80066b6:	4413      	add	r3, r2
 80066b8:	e7e0      	b.n	800667c <_printf_float+0x1a0>
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	055a      	lsls	r2, r3, #21
 80066be:	d407      	bmi.n	80066d0 <_printf_float+0x1f4>
 80066c0:	6923      	ldr	r3, [r4, #16]
 80066c2:	4642      	mov	r2, r8
 80066c4:	4631      	mov	r1, r6
 80066c6:	4628      	mov	r0, r5
 80066c8:	47b8      	blx	r7
 80066ca:	3001      	adds	r0, #1
 80066cc:	d12c      	bne.n	8006728 <_printf_float+0x24c>
 80066ce:	e764      	b.n	800659a <_printf_float+0xbe>
 80066d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066d4:	f240 80e0 	bls.w	8006898 <_printf_float+0x3bc>
 80066d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066dc:	2200      	movs	r2, #0
 80066de:	2300      	movs	r3, #0
 80066e0:	f7fa fa12 	bl	8000b08 <__aeabi_dcmpeq>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d034      	beq.n	8006752 <_printf_float+0x276>
 80066e8:	4a37      	ldr	r2, [pc, #220]	; (80067c8 <_printf_float+0x2ec>)
 80066ea:	2301      	movs	r3, #1
 80066ec:	4631      	mov	r1, r6
 80066ee:	4628      	mov	r0, r5
 80066f0:	47b8      	blx	r7
 80066f2:	3001      	adds	r0, #1
 80066f4:	f43f af51 	beq.w	800659a <_printf_float+0xbe>
 80066f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066fc:	429a      	cmp	r2, r3
 80066fe:	db02      	blt.n	8006706 <_printf_float+0x22a>
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	07d8      	lsls	r0, r3, #31
 8006704:	d510      	bpl.n	8006728 <_printf_float+0x24c>
 8006706:	ee18 3a10 	vmov	r3, s16
 800670a:	4652      	mov	r2, sl
 800670c:	4631      	mov	r1, r6
 800670e:	4628      	mov	r0, r5
 8006710:	47b8      	blx	r7
 8006712:	3001      	adds	r0, #1
 8006714:	f43f af41 	beq.w	800659a <_printf_float+0xbe>
 8006718:	f04f 0800 	mov.w	r8, #0
 800671c:	f104 091a 	add.w	r9, r4, #26
 8006720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006722:	3b01      	subs	r3, #1
 8006724:	4543      	cmp	r3, r8
 8006726:	dc09      	bgt.n	800673c <_printf_float+0x260>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	079b      	lsls	r3, r3, #30
 800672c:	f100 8107 	bmi.w	800693e <_printf_float+0x462>
 8006730:	68e0      	ldr	r0, [r4, #12]
 8006732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006734:	4298      	cmp	r0, r3
 8006736:	bfb8      	it	lt
 8006738:	4618      	movlt	r0, r3
 800673a:	e730      	b.n	800659e <_printf_float+0xc2>
 800673c:	2301      	movs	r3, #1
 800673e:	464a      	mov	r2, r9
 8006740:	4631      	mov	r1, r6
 8006742:	4628      	mov	r0, r5
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	f43f af27 	beq.w	800659a <_printf_float+0xbe>
 800674c:	f108 0801 	add.w	r8, r8, #1
 8006750:	e7e6      	b.n	8006720 <_printf_float+0x244>
 8006752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006754:	2b00      	cmp	r3, #0
 8006756:	dc39      	bgt.n	80067cc <_printf_float+0x2f0>
 8006758:	4a1b      	ldr	r2, [pc, #108]	; (80067c8 <_printf_float+0x2ec>)
 800675a:	2301      	movs	r3, #1
 800675c:	4631      	mov	r1, r6
 800675e:	4628      	mov	r0, r5
 8006760:	47b8      	blx	r7
 8006762:	3001      	adds	r0, #1
 8006764:	f43f af19 	beq.w	800659a <_printf_float+0xbe>
 8006768:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800676c:	4313      	orrs	r3, r2
 800676e:	d102      	bne.n	8006776 <_printf_float+0x29a>
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	07d9      	lsls	r1, r3, #31
 8006774:	d5d8      	bpl.n	8006728 <_printf_float+0x24c>
 8006776:	ee18 3a10 	vmov	r3, s16
 800677a:	4652      	mov	r2, sl
 800677c:	4631      	mov	r1, r6
 800677e:	4628      	mov	r0, r5
 8006780:	47b8      	blx	r7
 8006782:	3001      	adds	r0, #1
 8006784:	f43f af09 	beq.w	800659a <_printf_float+0xbe>
 8006788:	f04f 0900 	mov.w	r9, #0
 800678c:	f104 0a1a 	add.w	sl, r4, #26
 8006790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006792:	425b      	negs	r3, r3
 8006794:	454b      	cmp	r3, r9
 8006796:	dc01      	bgt.n	800679c <_printf_float+0x2c0>
 8006798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800679a:	e792      	b.n	80066c2 <_printf_float+0x1e6>
 800679c:	2301      	movs	r3, #1
 800679e:	4652      	mov	r2, sl
 80067a0:	4631      	mov	r1, r6
 80067a2:	4628      	mov	r0, r5
 80067a4:	47b8      	blx	r7
 80067a6:	3001      	adds	r0, #1
 80067a8:	f43f aef7 	beq.w	800659a <_printf_float+0xbe>
 80067ac:	f109 0901 	add.w	r9, r9, #1
 80067b0:	e7ee      	b.n	8006790 <_printf_float+0x2b4>
 80067b2:	bf00      	nop
 80067b4:	7fefffff 	.word	0x7fefffff
 80067b8:	0800bf3c 	.word	0x0800bf3c
 80067bc:	0800bf40 	.word	0x0800bf40
 80067c0:	0800bf44 	.word	0x0800bf44
 80067c4:	0800bf48 	.word	0x0800bf48
 80067c8:	0800bf4c 	.word	0x0800bf4c
 80067cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067d0:	429a      	cmp	r2, r3
 80067d2:	bfa8      	it	ge
 80067d4:	461a      	movge	r2, r3
 80067d6:	2a00      	cmp	r2, #0
 80067d8:	4691      	mov	r9, r2
 80067da:	dc37      	bgt.n	800684c <_printf_float+0x370>
 80067dc:	f04f 0b00 	mov.w	fp, #0
 80067e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067e4:	f104 021a 	add.w	r2, r4, #26
 80067e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067ea:	9305      	str	r3, [sp, #20]
 80067ec:	eba3 0309 	sub.w	r3, r3, r9
 80067f0:	455b      	cmp	r3, fp
 80067f2:	dc33      	bgt.n	800685c <_printf_float+0x380>
 80067f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067f8:	429a      	cmp	r2, r3
 80067fa:	db3b      	blt.n	8006874 <_printf_float+0x398>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	07da      	lsls	r2, r3, #31
 8006800:	d438      	bmi.n	8006874 <_printf_float+0x398>
 8006802:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006806:	eba2 0903 	sub.w	r9, r2, r3
 800680a:	9b05      	ldr	r3, [sp, #20]
 800680c:	1ad2      	subs	r2, r2, r3
 800680e:	4591      	cmp	r9, r2
 8006810:	bfa8      	it	ge
 8006812:	4691      	movge	r9, r2
 8006814:	f1b9 0f00 	cmp.w	r9, #0
 8006818:	dc35      	bgt.n	8006886 <_printf_float+0x3aa>
 800681a:	f04f 0800 	mov.w	r8, #0
 800681e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006822:	f104 0a1a 	add.w	sl, r4, #26
 8006826:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	eba3 0309 	sub.w	r3, r3, r9
 8006830:	4543      	cmp	r3, r8
 8006832:	f77f af79 	ble.w	8006728 <_printf_float+0x24c>
 8006836:	2301      	movs	r3, #1
 8006838:	4652      	mov	r2, sl
 800683a:	4631      	mov	r1, r6
 800683c:	4628      	mov	r0, r5
 800683e:	47b8      	blx	r7
 8006840:	3001      	adds	r0, #1
 8006842:	f43f aeaa 	beq.w	800659a <_printf_float+0xbe>
 8006846:	f108 0801 	add.w	r8, r8, #1
 800684a:	e7ec      	b.n	8006826 <_printf_float+0x34a>
 800684c:	4613      	mov	r3, r2
 800684e:	4631      	mov	r1, r6
 8006850:	4642      	mov	r2, r8
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	d1c0      	bne.n	80067dc <_printf_float+0x300>
 800685a:	e69e      	b.n	800659a <_printf_float+0xbe>
 800685c:	2301      	movs	r3, #1
 800685e:	4631      	mov	r1, r6
 8006860:	4628      	mov	r0, r5
 8006862:	9205      	str	r2, [sp, #20]
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	f43f ae97 	beq.w	800659a <_printf_float+0xbe>
 800686c:	9a05      	ldr	r2, [sp, #20]
 800686e:	f10b 0b01 	add.w	fp, fp, #1
 8006872:	e7b9      	b.n	80067e8 <_printf_float+0x30c>
 8006874:	ee18 3a10 	vmov	r3, s16
 8006878:	4652      	mov	r2, sl
 800687a:	4631      	mov	r1, r6
 800687c:	4628      	mov	r0, r5
 800687e:	47b8      	blx	r7
 8006880:	3001      	adds	r0, #1
 8006882:	d1be      	bne.n	8006802 <_printf_float+0x326>
 8006884:	e689      	b.n	800659a <_printf_float+0xbe>
 8006886:	9a05      	ldr	r2, [sp, #20]
 8006888:	464b      	mov	r3, r9
 800688a:	4442      	add	r2, r8
 800688c:	4631      	mov	r1, r6
 800688e:	4628      	mov	r0, r5
 8006890:	47b8      	blx	r7
 8006892:	3001      	adds	r0, #1
 8006894:	d1c1      	bne.n	800681a <_printf_float+0x33e>
 8006896:	e680      	b.n	800659a <_printf_float+0xbe>
 8006898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800689a:	2a01      	cmp	r2, #1
 800689c:	dc01      	bgt.n	80068a2 <_printf_float+0x3c6>
 800689e:	07db      	lsls	r3, r3, #31
 80068a0:	d53a      	bpl.n	8006918 <_printf_float+0x43c>
 80068a2:	2301      	movs	r3, #1
 80068a4:	4642      	mov	r2, r8
 80068a6:	4631      	mov	r1, r6
 80068a8:	4628      	mov	r0, r5
 80068aa:	47b8      	blx	r7
 80068ac:	3001      	adds	r0, #1
 80068ae:	f43f ae74 	beq.w	800659a <_printf_float+0xbe>
 80068b2:	ee18 3a10 	vmov	r3, s16
 80068b6:	4652      	mov	r2, sl
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b8      	blx	r7
 80068be:	3001      	adds	r0, #1
 80068c0:	f43f ae6b 	beq.w	800659a <_printf_float+0xbe>
 80068c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068c8:	2200      	movs	r2, #0
 80068ca:	2300      	movs	r3, #0
 80068cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80068d0:	f7fa f91a 	bl	8000b08 <__aeabi_dcmpeq>
 80068d4:	b9d8      	cbnz	r0, 800690e <_printf_float+0x432>
 80068d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80068da:	f108 0201 	add.w	r2, r8, #1
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	47b8      	blx	r7
 80068e4:	3001      	adds	r0, #1
 80068e6:	d10e      	bne.n	8006906 <_printf_float+0x42a>
 80068e8:	e657      	b.n	800659a <_printf_float+0xbe>
 80068ea:	2301      	movs	r3, #1
 80068ec:	4652      	mov	r2, sl
 80068ee:	4631      	mov	r1, r6
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b8      	blx	r7
 80068f4:	3001      	adds	r0, #1
 80068f6:	f43f ae50 	beq.w	800659a <_printf_float+0xbe>
 80068fa:	f108 0801 	add.w	r8, r8, #1
 80068fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006900:	3b01      	subs	r3, #1
 8006902:	4543      	cmp	r3, r8
 8006904:	dcf1      	bgt.n	80068ea <_printf_float+0x40e>
 8006906:	464b      	mov	r3, r9
 8006908:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800690c:	e6da      	b.n	80066c4 <_printf_float+0x1e8>
 800690e:	f04f 0800 	mov.w	r8, #0
 8006912:	f104 0a1a 	add.w	sl, r4, #26
 8006916:	e7f2      	b.n	80068fe <_printf_float+0x422>
 8006918:	2301      	movs	r3, #1
 800691a:	4642      	mov	r2, r8
 800691c:	e7df      	b.n	80068de <_printf_float+0x402>
 800691e:	2301      	movs	r3, #1
 8006920:	464a      	mov	r2, r9
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	f43f ae36 	beq.w	800659a <_printf_float+0xbe>
 800692e:	f108 0801 	add.w	r8, r8, #1
 8006932:	68e3      	ldr	r3, [r4, #12]
 8006934:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006936:	1a5b      	subs	r3, r3, r1
 8006938:	4543      	cmp	r3, r8
 800693a:	dcf0      	bgt.n	800691e <_printf_float+0x442>
 800693c:	e6f8      	b.n	8006730 <_printf_float+0x254>
 800693e:	f04f 0800 	mov.w	r8, #0
 8006942:	f104 0919 	add.w	r9, r4, #25
 8006946:	e7f4      	b.n	8006932 <_printf_float+0x456>

08006948 <_printf_common>:
 8006948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800694c:	4616      	mov	r6, r2
 800694e:	4699      	mov	r9, r3
 8006950:	688a      	ldr	r2, [r1, #8]
 8006952:	690b      	ldr	r3, [r1, #16]
 8006954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006958:	4293      	cmp	r3, r2
 800695a:	bfb8      	it	lt
 800695c:	4613      	movlt	r3, r2
 800695e:	6033      	str	r3, [r6, #0]
 8006960:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006964:	4607      	mov	r7, r0
 8006966:	460c      	mov	r4, r1
 8006968:	b10a      	cbz	r2, 800696e <_printf_common+0x26>
 800696a:	3301      	adds	r3, #1
 800696c:	6033      	str	r3, [r6, #0]
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	0699      	lsls	r1, r3, #26
 8006972:	bf42      	ittt	mi
 8006974:	6833      	ldrmi	r3, [r6, #0]
 8006976:	3302      	addmi	r3, #2
 8006978:	6033      	strmi	r3, [r6, #0]
 800697a:	6825      	ldr	r5, [r4, #0]
 800697c:	f015 0506 	ands.w	r5, r5, #6
 8006980:	d106      	bne.n	8006990 <_printf_common+0x48>
 8006982:	f104 0a19 	add.w	sl, r4, #25
 8006986:	68e3      	ldr	r3, [r4, #12]
 8006988:	6832      	ldr	r2, [r6, #0]
 800698a:	1a9b      	subs	r3, r3, r2
 800698c:	42ab      	cmp	r3, r5
 800698e:	dc26      	bgt.n	80069de <_printf_common+0x96>
 8006990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006994:	1e13      	subs	r3, r2, #0
 8006996:	6822      	ldr	r2, [r4, #0]
 8006998:	bf18      	it	ne
 800699a:	2301      	movne	r3, #1
 800699c:	0692      	lsls	r2, r2, #26
 800699e:	d42b      	bmi.n	80069f8 <_printf_common+0xb0>
 80069a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069a4:	4649      	mov	r1, r9
 80069a6:	4638      	mov	r0, r7
 80069a8:	47c0      	blx	r8
 80069aa:	3001      	adds	r0, #1
 80069ac:	d01e      	beq.n	80069ec <_printf_common+0xa4>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	6922      	ldr	r2, [r4, #16]
 80069b2:	f003 0306 	and.w	r3, r3, #6
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	bf02      	ittt	eq
 80069ba:	68e5      	ldreq	r5, [r4, #12]
 80069bc:	6833      	ldreq	r3, [r6, #0]
 80069be:	1aed      	subeq	r5, r5, r3
 80069c0:	68a3      	ldr	r3, [r4, #8]
 80069c2:	bf0c      	ite	eq
 80069c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069c8:	2500      	movne	r5, #0
 80069ca:	4293      	cmp	r3, r2
 80069cc:	bfc4      	itt	gt
 80069ce:	1a9b      	subgt	r3, r3, r2
 80069d0:	18ed      	addgt	r5, r5, r3
 80069d2:	2600      	movs	r6, #0
 80069d4:	341a      	adds	r4, #26
 80069d6:	42b5      	cmp	r5, r6
 80069d8:	d11a      	bne.n	8006a10 <_printf_common+0xc8>
 80069da:	2000      	movs	r0, #0
 80069dc:	e008      	b.n	80069f0 <_printf_common+0xa8>
 80069de:	2301      	movs	r3, #1
 80069e0:	4652      	mov	r2, sl
 80069e2:	4649      	mov	r1, r9
 80069e4:	4638      	mov	r0, r7
 80069e6:	47c0      	blx	r8
 80069e8:	3001      	adds	r0, #1
 80069ea:	d103      	bne.n	80069f4 <_printf_common+0xac>
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295
 80069f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f4:	3501      	adds	r5, #1
 80069f6:	e7c6      	b.n	8006986 <_printf_common+0x3e>
 80069f8:	18e1      	adds	r1, r4, r3
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	2030      	movs	r0, #48	; 0x30
 80069fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a02:	4422      	add	r2, r4
 8006a04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a0c:	3302      	adds	r3, #2
 8006a0e:	e7c7      	b.n	80069a0 <_printf_common+0x58>
 8006a10:	2301      	movs	r3, #1
 8006a12:	4622      	mov	r2, r4
 8006a14:	4649      	mov	r1, r9
 8006a16:	4638      	mov	r0, r7
 8006a18:	47c0      	blx	r8
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	d0e6      	beq.n	80069ec <_printf_common+0xa4>
 8006a1e:	3601      	adds	r6, #1
 8006a20:	e7d9      	b.n	80069d6 <_printf_common+0x8e>
	...

08006a24 <_printf_i>:
 8006a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a28:	7e0f      	ldrb	r7, [r1, #24]
 8006a2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a2c:	2f78      	cmp	r7, #120	; 0x78
 8006a2e:	4691      	mov	r9, r2
 8006a30:	4680      	mov	r8, r0
 8006a32:	460c      	mov	r4, r1
 8006a34:	469a      	mov	sl, r3
 8006a36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a3a:	d807      	bhi.n	8006a4c <_printf_i+0x28>
 8006a3c:	2f62      	cmp	r7, #98	; 0x62
 8006a3e:	d80a      	bhi.n	8006a56 <_printf_i+0x32>
 8006a40:	2f00      	cmp	r7, #0
 8006a42:	f000 80d4 	beq.w	8006bee <_printf_i+0x1ca>
 8006a46:	2f58      	cmp	r7, #88	; 0x58
 8006a48:	f000 80c0 	beq.w	8006bcc <_printf_i+0x1a8>
 8006a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a54:	e03a      	b.n	8006acc <_printf_i+0xa8>
 8006a56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a5a:	2b15      	cmp	r3, #21
 8006a5c:	d8f6      	bhi.n	8006a4c <_printf_i+0x28>
 8006a5e:	a101      	add	r1, pc, #4	; (adr r1, 8006a64 <_printf_i+0x40>)
 8006a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a64:	08006abd 	.word	0x08006abd
 8006a68:	08006ad1 	.word	0x08006ad1
 8006a6c:	08006a4d 	.word	0x08006a4d
 8006a70:	08006a4d 	.word	0x08006a4d
 8006a74:	08006a4d 	.word	0x08006a4d
 8006a78:	08006a4d 	.word	0x08006a4d
 8006a7c:	08006ad1 	.word	0x08006ad1
 8006a80:	08006a4d 	.word	0x08006a4d
 8006a84:	08006a4d 	.word	0x08006a4d
 8006a88:	08006a4d 	.word	0x08006a4d
 8006a8c:	08006a4d 	.word	0x08006a4d
 8006a90:	08006bd5 	.word	0x08006bd5
 8006a94:	08006afd 	.word	0x08006afd
 8006a98:	08006b8f 	.word	0x08006b8f
 8006a9c:	08006a4d 	.word	0x08006a4d
 8006aa0:	08006a4d 	.word	0x08006a4d
 8006aa4:	08006bf7 	.word	0x08006bf7
 8006aa8:	08006a4d 	.word	0x08006a4d
 8006aac:	08006afd 	.word	0x08006afd
 8006ab0:	08006a4d 	.word	0x08006a4d
 8006ab4:	08006a4d 	.word	0x08006a4d
 8006ab8:	08006b97 	.word	0x08006b97
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	1d1a      	adds	r2, r3, #4
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	602a      	str	r2, [r5, #0]
 8006ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006acc:	2301      	movs	r3, #1
 8006ace:	e09f      	b.n	8006c10 <_printf_i+0x1ec>
 8006ad0:	6820      	ldr	r0, [r4, #0]
 8006ad2:	682b      	ldr	r3, [r5, #0]
 8006ad4:	0607      	lsls	r7, r0, #24
 8006ad6:	f103 0104 	add.w	r1, r3, #4
 8006ada:	6029      	str	r1, [r5, #0]
 8006adc:	d501      	bpl.n	8006ae2 <_printf_i+0xbe>
 8006ade:	681e      	ldr	r6, [r3, #0]
 8006ae0:	e003      	b.n	8006aea <_printf_i+0xc6>
 8006ae2:	0646      	lsls	r6, r0, #25
 8006ae4:	d5fb      	bpl.n	8006ade <_printf_i+0xba>
 8006ae6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006aea:	2e00      	cmp	r6, #0
 8006aec:	da03      	bge.n	8006af6 <_printf_i+0xd2>
 8006aee:	232d      	movs	r3, #45	; 0x2d
 8006af0:	4276      	negs	r6, r6
 8006af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006af6:	485a      	ldr	r0, [pc, #360]	; (8006c60 <_printf_i+0x23c>)
 8006af8:	230a      	movs	r3, #10
 8006afa:	e012      	b.n	8006b22 <_printf_i+0xfe>
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	6820      	ldr	r0, [r4, #0]
 8006b00:	1d19      	adds	r1, r3, #4
 8006b02:	6029      	str	r1, [r5, #0]
 8006b04:	0605      	lsls	r5, r0, #24
 8006b06:	d501      	bpl.n	8006b0c <_printf_i+0xe8>
 8006b08:	681e      	ldr	r6, [r3, #0]
 8006b0a:	e002      	b.n	8006b12 <_printf_i+0xee>
 8006b0c:	0641      	lsls	r1, r0, #25
 8006b0e:	d5fb      	bpl.n	8006b08 <_printf_i+0xe4>
 8006b10:	881e      	ldrh	r6, [r3, #0]
 8006b12:	4853      	ldr	r0, [pc, #332]	; (8006c60 <_printf_i+0x23c>)
 8006b14:	2f6f      	cmp	r7, #111	; 0x6f
 8006b16:	bf0c      	ite	eq
 8006b18:	2308      	moveq	r3, #8
 8006b1a:	230a      	movne	r3, #10
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b22:	6865      	ldr	r5, [r4, #4]
 8006b24:	60a5      	str	r5, [r4, #8]
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	bfa2      	ittt	ge
 8006b2a:	6821      	ldrge	r1, [r4, #0]
 8006b2c:	f021 0104 	bicge.w	r1, r1, #4
 8006b30:	6021      	strge	r1, [r4, #0]
 8006b32:	b90e      	cbnz	r6, 8006b38 <_printf_i+0x114>
 8006b34:	2d00      	cmp	r5, #0
 8006b36:	d04b      	beq.n	8006bd0 <_printf_i+0x1ac>
 8006b38:	4615      	mov	r5, r2
 8006b3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b3e:	fb03 6711 	mls	r7, r3, r1, r6
 8006b42:	5dc7      	ldrb	r7, [r0, r7]
 8006b44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b48:	4637      	mov	r7, r6
 8006b4a:	42bb      	cmp	r3, r7
 8006b4c:	460e      	mov	r6, r1
 8006b4e:	d9f4      	bls.n	8006b3a <_printf_i+0x116>
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d10b      	bne.n	8006b6c <_printf_i+0x148>
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	07de      	lsls	r6, r3, #31
 8006b58:	d508      	bpl.n	8006b6c <_printf_i+0x148>
 8006b5a:	6923      	ldr	r3, [r4, #16]
 8006b5c:	6861      	ldr	r1, [r4, #4]
 8006b5e:	4299      	cmp	r1, r3
 8006b60:	bfde      	ittt	le
 8006b62:	2330      	movle	r3, #48	; 0x30
 8006b64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b6c:	1b52      	subs	r2, r2, r5
 8006b6e:	6122      	str	r2, [r4, #16]
 8006b70:	f8cd a000 	str.w	sl, [sp]
 8006b74:	464b      	mov	r3, r9
 8006b76:	aa03      	add	r2, sp, #12
 8006b78:	4621      	mov	r1, r4
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	f7ff fee4 	bl	8006948 <_printf_common>
 8006b80:	3001      	adds	r0, #1
 8006b82:	d14a      	bne.n	8006c1a <_printf_i+0x1f6>
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295
 8006b88:	b004      	add	sp, #16
 8006b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	f043 0320 	orr.w	r3, r3, #32
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	4833      	ldr	r0, [pc, #204]	; (8006c64 <_printf_i+0x240>)
 8006b98:	2778      	movs	r7, #120	; 0x78
 8006b9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	6829      	ldr	r1, [r5, #0]
 8006ba2:	061f      	lsls	r7, r3, #24
 8006ba4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ba8:	d402      	bmi.n	8006bb0 <_printf_i+0x18c>
 8006baa:	065f      	lsls	r7, r3, #25
 8006bac:	bf48      	it	mi
 8006bae:	b2b6      	uxthmi	r6, r6
 8006bb0:	07df      	lsls	r7, r3, #31
 8006bb2:	bf48      	it	mi
 8006bb4:	f043 0320 	orrmi.w	r3, r3, #32
 8006bb8:	6029      	str	r1, [r5, #0]
 8006bba:	bf48      	it	mi
 8006bbc:	6023      	strmi	r3, [r4, #0]
 8006bbe:	b91e      	cbnz	r6, 8006bc8 <_printf_i+0x1a4>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	f023 0320 	bic.w	r3, r3, #32
 8006bc6:	6023      	str	r3, [r4, #0]
 8006bc8:	2310      	movs	r3, #16
 8006bca:	e7a7      	b.n	8006b1c <_printf_i+0xf8>
 8006bcc:	4824      	ldr	r0, [pc, #144]	; (8006c60 <_printf_i+0x23c>)
 8006bce:	e7e4      	b.n	8006b9a <_printf_i+0x176>
 8006bd0:	4615      	mov	r5, r2
 8006bd2:	e7bd      	b.n	8006b50 <_printf_i+0x12c>
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	6826      	ldr	r6, [r4, #0]
 8006bd8:	6961      	ldr	r1, [r4, #20]
 8006bda:	1d18      	adds	r0, r3, #4
 8006bdc:	6028      	str	r0, [r5, #0]
 8006bde:	0635      	lsls	r5, r6, #24
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	d501      	bpl.n	8006be8 <_printf_i+0x1c4>
 8006be4:	6019      	str	r1, [r3, #0]
 8006be6:	e002      	b.n	8006bee <_printf_i+0x1ca>
 8006be8:	0670      	lsls	r0, r6, #25
 8006bea:	d5fb      	bpl.n	8006be4 <_printf_i+0x1c0>
 8006bec:	8019      	strh	r1, [r3, #0]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6123      	str	r3, [r4, #16]
 8006bf2:	4615      	mov	r5, r2
 8006bf4:	e7bc      	b.n	8006b70 <_printf_i+0x14c>
 8006bf6:	682b      	ldr	r3, [r5, #0]
 8006bf8:	1d1a      	adds	r2, r3, #4
 8006bfa:	602a      	str	r2, [r5, #0]
 8006bfc:	681d      	ldr	r5, [r3, #0]
 8006bfe:	6862      	ldr	r2, [r4, #4]
 8006c00:	2100      	movs	r1, #0
 8006c02:	4628      	mov	r0, r5
 8006c04:	f7f9 fb04 	bl	8000210 <memchr>
 8006c08:	b108      	cbz	r0, 8006c0e <_printf_i+0x1ea>
 8006c0a:	1b40      	subs	r0, r0, r5
 8006c0c:	6060      	str	r0, [r4, #4]
 8006c0e:	6863      	ldr	r3, [r4, #4]
 8006c10:	6123      	str	r3, [r4, #16]
 8006c12:	2300      	movs	r3, #0
 8006c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c18:	e7aa      	b.n	8006b70 <_printf_i+0x14c>
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	462a      	mov	r2, r5
 8006c1e:	4649      	mov	r1, r9
 8006c20:	4640      	mov	r0, r8
 8006c22:	47d0      	blx	sl
 8006c24:	3001      	adds	r0, #1
 8006c26:	d0ad      	beq.n	8006b84 <_printf_i+0x160>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	079b      	lsls	r3, r3, #30
 8006c2c:	d413      	bmi.n	8006c56 <_printf_i+0x232>
 8006c2e:	68e0      	ldr	r0, [r4, #12]
 8006c30:	9b03      	ldr	r3, [sp, #12]
 8006c32:	4298      	cmp	r0, r3
 8006c34:	bfb8      	it	lt
 8006c36:	4618      	movlt	r0, r3
 8006c38:	e7a6      	b.n	8006b88 <_printf_i+0x164>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	4649      	mov	r1, r9
 8006c40:	4640      	mov	r0, r8
 8006c42:	47d0      	blx	sl
 8006c44:	3001      	adds	r0, #1
 8006c46:	d09d      	beq.n	8006b84 <_printf_i+0x160>
 8006c48:	3501      	adds	r5, #1
 8006c4a:	68e3      	ldr	r3, [r4, #12]
 8006c4c:	9903      	ldr	r1, [sp, #12]
 8006c4e:	1a5b      	subs	r3, r3, r1
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	dcf2      	bgt.n	8006c3a <_printf_i+0x216>
 8006c54:	e7eb      	b.n	8006c2e <_printf_i+0x20a>
 8006c56:	2500      	movs	r5, #0
 8006c58:	f104 0619 	add.w	r6, r4, #25
 8006c5c:	e7f5      	b.n	8006c4a <_printf_i+0x226>
 8006c5e:	bf00      	nop
 8006c60:	0800bf4e 	.word	0x0800bf4e
 8006c64:	0800bf5f 	.word	0x0800bf5f

08006c68 <std>:
 8006c68:	2300      	movs	r3, #0
 8006c6a:	b510      	push	{r4, lr}
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c76:	6083      	str	r3, [r0, #8]
 8006c78:	8181      	strh	r1, [r0, #12]
 8006c7a:	6643      	str	r3, [r0, #100]	; 0x64
 8006c7c:	81c2      	strh	r2, [r0, #14]
 8006c7e:	6183      	str	r3, [r0, #24]
 8006c80:	4619      	mov	r1, r3
 8006c82:	2208      	movs	r2, #8
 8006c84:	305c      	adds	r0, #92	; 0x5c
 8006c86:	f000 f914 	bl	8006eb2 <memset>
 8006c8a:	4b0d      	ldr	r3, [pc, #52]	; (8006cc0 <std+0x58>)
 8006c8c:	6263      	str	r3, [r4, #36]	; 0x24
 8006c8e:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <std+0x5c>)
 8006c90:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c92:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <std+0x60>)
 8006c94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c96:	4b0d      	ldr	r3, [pc, #52]	; (8006ccc <std+0x64>)
 8006c98:	6323      	str	r3, [r4, #48]	; 0x30
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	; (8006cd0 <std+0x68>)
 8006c9c:	6224      	str	r4, [r4, #32]
 8006c9e:	429c      	cmp	r4, r3
 8006ca0:	d006      	beq.n	8006cb0 <std+0x48>
 8006ca2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006ca6:	4294      	cmp	r4, r2
 8006ca8:	d002      	beq.n	8006cb0 <std+0x48>
 8006caa:	33d0      	adds	r3, #208	; 0xd0
 8006cac:	429c      	cmp	r4, r3
 8006cae:	d105      	bne.n	8006cbc <std+0x54>
 8006cb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cb8:	f000 b978 	b.w	8006fac <__retarget_lock_init_recursive>
 8006cbc:	bd10      	pop	{r4, pc}
 8006cbe:	bf00      	nop
 8006cc0:	08006e2d 	.word	0x08006e2d
 8006cc4:	08006e4f 	.word	0x08006e4f
 8006cc8:	08006e87 	.word	0x08006e87
 8006ccc:	08006eab 	.word	0x08006eab
 8006cd0:	200033b4 	.word	0x200033b4

08006cd4 <stdio_exit_handler>:
 8006cd4:	4a02      	ldr	r2, [pc, #8]	; (8006ce0 <stdio_exit_handler+0xc>)
 8006cd6:	4903      	ldr	r1, [pc, #12]	; (8006ce4 <stdio_exit_handler+0x10>)
 8006cd8:	4803      	ldr	r0, [pc, #12]	; (8006ce8 <stdio_exit_handler+0x14>)
 8006cda:	f000 b869 	b.w	8006db0 <_fwalk_sglue>
 8006cde:	bf00      	nop
 8006ce0:	20002010 	.word	0x20002010
 8006ce4:	08008979 	.word	0x08008979
 8006ce8:	2000201c 	.word	0x2000201c

08006cec <cleanup_stdio>:
 8006cec:	6841      	ldr	r1, [r0, #4]
 8006cee:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <cleanup_stdio+0x34>)
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	d001      	beq.n	8006cfc <cleanup_stdio+0x10>
 8006cf8:	f001 fe3e 	bl	8008978 <_fflush_r>
 8006cfc:	68a1      	ldr	r1, [r4, #8]
 8006cfe:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <cleanup_stdio+0x38>)
 8006d00:	4299      	cmp	r1, r3
 8006d02:	d002      	beq.n	8006d0a <cleanup_stdio+0x1e>
 8006d04:	4620      	mov	r0, r4
 8006d06:	f001 fe37 	bl	8008978 <_fflush_r>
 8006d0a:	68e1      	ldr	r1, [r4, #12]
 8006d0c:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <cleanup_stdio+0x3c>)
 8006d0e:	4299      	cmp	r1, r3
 8006d10:	d004      	beq.n	8006d1c <cleanup_stdio+0x30>
 8006d12:	4620      	mov	r0, r4
 8006d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d18:	f001 be2e 	b.w	8008978 <_fflush_r>
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	bf00      	nop
 8006d20:	200033b4 	.word	0x200033b4
 8006d24:	2000341c 	.word	0x2000341c
 8006d28:	20003484 	.word	0x20003484

08006d2c <global_stdio_init.part.0>:
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <global_stdio_init.part.0+0x30>)
 8006d30:	4c0b      	ldr	r4, [pc, #44]	; (8006d60 <global_stdio_init.part.0+0x34>)
 8006d32:	4a0c      	ldr	r2, [pc, #48]	; (8006d64 <global_stdio_init.part.0+0x38>)
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	4620      	mov	r0, r4
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2104      	movs	r1, #4
 8006d3c:	f7ff ff94 	bl	8006c68 <std>
 8006d40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006d44:	2201      	movs	r2, #1
 8006d46:	2109      	movs	r1, #9
 8006d48:	f7ff ff8e 	bl	8006c68 <std>
 8006d4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006d50:	2202      	movs	r2, #2
 8006d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d56:	2112      	movs	r1, #18
 8006d58:	f7ff bf86 	b.w	8006c68 <std>
 8006d5c:	200034ec 	.word	0x200034ec
 8006d60:	200033b4 	.word	0x200033b4
 8006d64:	08006cd5 	.word	0x08006cd5

08006d68 <__sfp_lock_acquire>:
 8006d68:	4801      	ldr	r0, [pc, #4]	; (8006d70 <__sfp_lock_acquire+0x8>)
 8006d6a:	f000 b920 	b.w	8006fae <__retarget_lock_acquire_recursive>
 8006d6e:	bf00      	nop
 8006d70:	200034f5 	.word	0x200034f5

08006d74 <__sfp_lock_release>:
 8006d74:	4801      	ldr	r0, [pc, #4]	; (8006d7c <__sfp_lock_release+0x8>)
 8006d76:	f000 b91b 	b.w	8006fb0 <__retarget_lock_release_recursive>
 8006d7a:	bf00      	nop
 8006d7c:	200034f5 	.word	0x200034f5

08006d80 <__sinit>:
 8006d80:	b510      	push	{r4, lr}
 8006d82:	4604      	mov	r4, r0
 8006d84:	f7ff fff0 	bl	8006d68 <__sfp_lock_acquire>
 8006d88:	6a23      	ldr	r3, [r4, #32]
 8006d8a:	b11b      	cbz	r3, 8006d94 <__sinit+0x14>
 8006d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d90:	f7ff bff0 	b.w	8006d74 <__sfp_lock_release>
 8006d94:	4b04      	ldr	r3, [pc, #16]	; (8006da8 <__sinit+0x28>)
 8006d96:	6223      	str	r3, [r4, #32]
 8006d98:	4b04      	ldr	r3, [pc, #16]	; (8006dac <__sinit+0x2c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1f5      	bne.n	8006d8c <__sinit+0xc>
 8006da0:	f7ff ffc4 	bl	8006d2c <global_stdio_init.part.0>
 8006da4:	e7f2      	b.n	8006d8c <__sinit+0xc>
 8006da6:	bf00      	nop
 8006da8:	08006ced 	.word	0x08006ced
 8006dac:	200034ec 	.word	0x200034ec

08006db0 <_fwalk_sglue>:
 8006db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db4:	4607      	mov	r7, r0
 8006db6:	4688      	mov	r8, r1
 8006db8:	4614      	mov	r4, r2
 8006dba:	2600      	movs	r6, #0
 8006dbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dc0:	f1b9 0901 	subs.w	r9, r9, #1
 8006dc4:	d505      	bpl.n	8006dd2 <_fwalk_sglue+0x22>
 8006dc6:	6824      	ldr	r4, [r4, #0]
 8006dc8:	2c00      	cmp	r4, #0
 8006dca:	d1f7      	bne.n	8006dbc <_fwalk_sglue+0xc>
 8006dcc:	4630      	mov	r0, r6
 8006dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd2:	89ab      	ldrh	r3, [r5, #12]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d907      	bls.n	8006de8 <_fwalk_sglue+0x38>
 8006dd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	d003      	beq.n	8006de8 <_fwalk_sglue+0x38>
 8006de0:	4629      	mov	r1, r5
 8006de2:	4638      	mov	r0, r7
 8006de4:	47c0      	blx	r8
 8006de6:	4306      	orrs	r6, r0
 8006de8:	3568      	adds	r5, #104	; 0x68
 8006dea:	e7e9      	b.n	8006dc0 <_fwalk_sglue+0x10>

08006dec <siprintf>:
 8006dec:	b40e      	push	{r1, r2, r3}
 8006dee:	b500      	push	{lr}
 8006df0:	b09c      	sub	sp, #112	; 0x70
 8006df2:	ab1d      	add	r3, sp, #116	; 0x74
 8006df4:	9002      	str	r0, [sp, #8]
 8006df6:	9006      	str	r0, [sp, #24]
 8006df8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dfc:	4809      	ldr	r0, [pc, #36]	; (8006e24 <siprintf+0x38>)
 8006dfe:	9107      	str	r1, [sp, #28]
 8006e00:	9104      	str	r1, [sp, #16]
 8006e02:	4909      	ldr	r1, [pc, #36]	; (8006e28 <siprintf+0x3c>)
 8006e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e08:	9105      	str	r1, [sp, #20]
 8006e0a:	6800      	ldr	r0, [r0, #0]
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	a902      	add	r1, sp, #8
 8006e10:	f001 fc2e 	bl	8008670 <_svfiprintf_r>
 8006e14:	9b02      	ldr	r3, [sp, #8]
 8006e16:	2200      	movs	r2, #0
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	b01c      	add	sp, #112	; 0x70
 8006e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e20:	b003      	add	sp, #12
 8006e22:	4770      	bx	lr
 8006e24:	20002068 	.word	0x20002068
 8006e28:	ffff0208 	.word	0xffff0208

08006e2c <__sread>:
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	460c      	mov	r4, r1
 8006e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e34:	f000 f86c 	bl	8006f10 <_read_r>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	bfab      	itete	ge
 8006e3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e3e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e40:	181b      	addge	r3, r3, r0
 8006e42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e46:	bfac      	ite	ge
 8006e48:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e4a:	81a3      	strhlt	r3, [r4, #12]
 8006e4c:	bd10      	pop	{r4, pc}

08006e4e <__swrite>:
 8006e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e52:	461f      	mov	r7, r3
 8006e54:	898b      	ldrh	r3, [r1, #12]
 8006e56:	05db      	lsls	r3, r3, #23
 8006e58:	4605      	mov	r5, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	4616      	mov	r6, r2
 8006e5e:	d505      	bpl.n	8006e6c <__swrite+0x1e>
 8006e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e64:	2302      	movs	r3, #2
 8006e66:	2200      	movs	r2, #0
 8006e68:	f000 f840 	bl	8006eec <_lseek_r>
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e76:	81a3      	strh	r3, [r4, #12]
 8006e78:	4632      	mov	r2, r6
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e82:	f000 b857 	b.w	8006f34 <_write_r>

08006e86 <__sseek>:
 8006e86:	b510      	push	{r4, lr}
 8006e88:	460c      	mov	r4, r1
 8006e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e8e:	f000 f82d 	bl	8006eec <_lseek_r>
 8006e92:	1c43      	adds	r3, r0, #1
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	bf15      	itete	ne
 8006e98:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ea2:	81a3      	strheq	r3, [r4, #12]
 8006ea4:	bf18      	it	ne
 8006ea6:	81a3      	strhne	r3, [r4, #12]
 8006ea8:	bd10      	pop	{r4, pc}

08006eaa <__sclose>:
 8006eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eae:	f000 b80d 	b.w	8006ecc <_close_r>

08006eb2 <memset>:
 8006eb2:	4402      	add	r2, r0
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d100      	bne.n	8006ebc <memset+0xa>
 8006eba:	4770      	bx	lr
 8006ebc:	f803 1b01 	strb.w	r1, [r3], #1
 8006ec0:	e7f9      	b.n	8006eb6 <memset+0x4>
	...

08006ec4 <_localeconv_r>:
 8006ec4:	4800      	ldr	r0, [pc, #0]	; (8006ec8 <_localeconv_r+0x4>)
 8006ec6:	4770      	bx	lr
 8006ec8:	2000215c 	.word	0x2000215c

08006ecc <_close_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	4d06      	ldr	r5, [pc, #24]	; (8006ee8 <_close_r+0x1c>)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	602b      	str	r3, [r5, #0]
 8006ed8:	f7fa fc2b 	bl	8001732 <_close>
 8006edc:	1c43      	adds	r3, r0, #1
 8006ede:	d102      	bne.n	8006ee6 <_close_r+0x1a>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	b103      	cbz	r3, 8006ee6 <_close_r+0x1a>
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
 8006ee8:	200034f0 	.word	0x200034f0

08006eec <_lseek_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4d07      	ldr	r5, [pc, #28]	; (8006f0c <_lseek_r+0x20>)
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	4608      	mov	r0, r1
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	602a      	str	r2, [r5, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f7fa fc40 	bl	8001780 <_lseek>
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	d102      	bne.n	8006f0a <_lseek_r+0x1e>
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	b103      	cbz	r3, 8006f0a <_lseek_r+0x1e>
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	200034f0 	.word	0x200034f0

08006f10 <_read_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4d07      	ldr	r5, [pc, #28]	; (8006f30 <_read_r+0x20>)
 8006f14:	4604      	mov	r4, r0
 8006f16:	4608      	mov	r0, r1
 8006f18:	4611      	mov	r1, r2
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	602a      	str	r2, [r5, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f7fa fbce 	bl	80016c0 <_read>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d102      	bne.n	8006f2e <_read_r+0x1e>
 8006f28:	682b      	ldr	r3, [r5, #0]
 8006f2a:	b103      	cbz	r3, 8006f2e <_read_r+0x1e>
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	bd38      	pop	{r3, r4, r5, pc}
 8006f30:	200034f0 	.word	0x200034f0

08006f34 <_write_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	4d07      	ldr	r5, [pc, #28]	; (8006f54 <_write_r+0x20>)
 8006f38:	4604      	mov	r4, r0
 8006f3a:	4608      	mov	r0, r1
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	2200      	movs	r2, #0
 8006f40:	602a      	str	r2, [r5, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	f7fa fbd9 	bl	80016fa <_write>
 8006f48:	1c43      	adds	r3, r0, #1
 8006f4a:	d102      	bne.n	8006f52 <_write_r+0x1e>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	b103      	cbz	r3, 8006f52 <_write_r+0x1e>
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	bd38      	pop	{r3, r4, r5, pc}
 8006f54:	200034f0 	.word	0x200034f0

08006f58 <__errno>:
 8006f58:	4b01      	ldr	r3, [pc, #4]	; (8006f60 <__errno+0x8>)
 8006f5a:	6818      	ldr	r0, [r3, #0]
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	20002068 	.word	0x20002068

08006f64 <__libc_init_array>:
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	4d0d      	ldr	r5, [pc, #52]	; (8006f9c <__libc_init_array+0x38>)
 8006f68:	4c0d      	ldr	r4, [pc, #52]	; (8006fa0 <__libc_init_array+0x3c>)
 8006f6a:	1b64      	subs	r4, r4, r5
 8006f6c:	10a4      	asrs	r4, r4, #2
 8006f6e:	2600      	movs	r6, #0
 8006f70:	42a6      	cmp	r6, r4
 8006f72:	d109      	bne.n	8006f88 <__libc_init_array+0x24>
 8006f74:	4d0b      	ldr	r5, [pc, #44]	; (8006fa4 <__libc_init_array+0x40>)
 8006f76:	4c0c      	ldr	r4, [pc, #48]	; (8006fa8 <__libc_init_array+0x44>)
 8006f78:	f002 f894 	bl	80090a4 <_init>
 8006f7c:	1b64      	subs	r4, r4, r5
 8006f7e:	10a4      	asrs	r4, r4, #2
 8006f80:	2600      	movs	r6, #0
 8006f82:	42a6      	cmp	r6, r4
 8006f84:	d105      	bne.n	8006f92 <__libc_init_array+0x2e>
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f8c:	4798      	blx	r3
 8006f8e:	3601      	adds	r6, #1
 8006f90:	e7ee      	b.n	8006f70 <__libc_init_array+0xc>
 8006f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f96:	4798      	blx	r3
 8006f98:	3601      	adds	r6, #1
 8006f9a:	e7f2      	b.n	8006f82 <__libc_init_array+0x1e>
 8006f9c:	0800c2b4 	.word	0x0800c2b4
 8006fa0:	0800c2b4 	.word	0x0800c2b4
 8006fa4:	0800c2b4 	.word	0x0800c2b4
 8006fa8:	0800c2b8 	.word	0x0800c2b8

08006fac <__retarget_lock_init_recursive>:
 8006fac:	4770      	bx	lr

08006fae <__retarget_lock_acquire_recursive>:
 8006fae:	4770      	bx	lr

08006fb0 <__retarget_lock_release_recursive>:
 8006fb0:	4770      	bx	lr

08006fb2 <memcpy>:
 8006fb2:	440a      	add	r2, r1
 8006fb4:	4291      	cmp	r1, r2
 8006fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fba:	d100      	bne.n	8006fbe <memcpy+0xc>
 8006fbc:	4770      	bx	lr
 8006fbe:	b510      	push	{r4, lr}
 8006fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fc8:	4291      	cmp	r1, r2
 8006fca:	d1f9      	bne.n	8006fc0 <memcpy+0xe>
 8006fcc:	bd10      	pop	{r4, pc}

08006fce <quorem>:
 8006fce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd2:	6903      	ldr	r3, [r0, #16]
 8006fd4:	690c      	ldr	r4, [r1, #16]
 8006fd6:	42a3      	cmp	r3, r4
 8006fd8:	4607      	mov	r7, r0
 8006fda:	db7e      	blt.n	80070da <quorem+0x10c>
 8006fdc:	3c01      	subs	r4, #1
 8006fde:	f101 0814 	add.w	r8, r1, #20
 8006fe2:	f100 0514 	add.w	r5, r0, #20
 8006fe6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fea:	9301      	str	r3, [sp, #4]
 8006fec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ff0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ffc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007000:	fbb2 f6f3 	udiv	r6, r2, r3
 8007004:	d331      	bcc.n	800706a <quorem+0x9c>
 8007006:	f04f 0e00 	mov.w	lr, #0
 800700a:	4640      	mov	r0, r8
 800700c:	46ac      	mov	ip, r5
 800700e:	46f2      	mov	sl, lr
 8007010:	f850 2b04 	ldr.w	r2, [r0], #4
 8007014:	b293      	uxth	r3, r2
 8007016:	fb06 e303 	mla	r3, r6, r3, lr
 800701a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800701e:	0c1a      	lsrs	r2, r3, #16
 8007020:	b29b      	uxth	r3, r3
 8007022:	ebaa 0303 	sub.w	r3, sl, r3
 8007026:	f8dc a000 	ldr.w	sl, [ip]
 800702a:	fa13 f38a 	uxtah	r3, r3, sl
 800702e:	fb06 220e 	mla	r2, r6, lr, r2
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	9b00      	ldr	r3, [sp, #0]
 8007036:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800703a:	b292      	uxth	r2, r2
 800703c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007040:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007044:	f8bd 3000 	ldrh.w	r3, [sp]
 8007048:	4581      	cmp	r9, r0
 800704a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800704e:	f84c 3b04 	str.w	r3, [ip], #4
 8007052:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007056:	d2db      	bcs.n	8007010 <quorem+0x42>
 8007058:	f855 300b 	ldr.w	r3, [r5, fp]
 800705c:	b92b      	cbnz	r3, 800706a <quorem+0x9c>
 800705e:	9b01      	ldr	r3, [sp, #4]
 8007060:	3b04      	subs	r3, #4
 8007062:	429d      	cmp	r5, r3
 8007064:	461a      	mov	r2, r3
 8007066:	d32c      	bcc.n	80070c2 <quorem+0xf4>
 8007068:	613c      	str	r4, [r7, #16]
 800706a:	4638      	mov	r0, r7
 800706c:	f001 f9a6 	bl	80083bc <__mcmp>
 8007070:	2800      	cmp	r0, #0
 8007072:	db22      	blt.n	80070ba <quorem+0xec>
 8007074:	3601      	adds	r6, #1
 8007076:	4629      	mov	r1, r5
 8007078:	2000      	movs	r0, #0
 800707a:	f858 2b04 	ldr.w	r2, [r8], #4
 800707e:	f8d1 c000 	ldr.w	ip, [r1]
 8007082:	b293      	uxth	r3, r2
 8007084:	1ac3      	subs	r3, r0, r3
 8007086:	0c12      	lsrs	r2, r2, #16
 8007088:	fa13 f38c 	uxtah	r3, r3, ip
 800708c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007090:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007094:	b29b      	uxth	r3, r3
 8007096:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800709a:	45c1      	cmp	r9, r8
 800709c:	f841 3b04 	str.w	r3, [r1], #4
 80070a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070a4:	d2e9      	bcs.n	800707a <quorem+0xac>
 80070a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070ae:	b922      	cbnz	r2, 80070ba <quorem+0xec>
 80070b0:	3b04      	subs	r3, #4
 80070b2:	429d      	cmp	r5, r3
 80070b4:	461a      	mov	r2, r3
 80070b6:	d30a      	bcc.n	80070ce <quorem+0x100>
 80070b8:	613c      	str	r4, [r7, #16]
 80070ba:	4630      	mov	r0, r6
 80070bc:	b003      	add	sp, #12
 80070be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c2:	6812      	ldr	r2, [r2, #0]
 80070c4:	3b04      	subs	r3, #4
 80070c6:	2a00      	cmp	r2, #0
 80070c8:	d1ce      	bne.n	8007068 <quorem+0x9a>
 80070ca:	3c01      	subs	r4, #1
 80070cc:	e7c9      	b.n	8007062 <quorem+0x94>
 80070ce:	6812      	ldr	r2, [r2, #0]
 80070d0:	3b04      	subs	r3, #4
 80070d2:	2a00      	cmp	r2, #0
 80070d4:	d1f0      	bne.n	80070b8 <quorem+0xea>
 80070d6:	3c01      	subs	r4, #1
 80070d8:	e7eb      	b.n	80070b2 <quorem+0xe4>
 80070da:	2000      	movs	r0, #0
 80070dc:	e7ee      	b.n	80070bc <quorem+0xee>
	...

080070e0 <_dtoa_r>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	ed2d 8b04 	vpush	{d8-d9}
 80070e8:	69c5      	ldr	r5, [r0, #28]
 80070ea:	b093      	sub	sp, #76	; 0x4c
 80070ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80070f0:	ec57 6b10 	vmov	r6, r7, d0
 80070f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80070f8:	9107      	str	r1, [sp, #28]
 80070fa:	4604      	mov	r4, r0
 80070fc:	920a      	str	r2, [sp, #40]	; 0x28
 80070fe:	930d      	str	r3, [sp, #52]	; 0x34
 8007100:	b975      	cbnz	r5, 8007120 <_dtoa_r+0x40>
 8007102:	2010      	movs	r0, #16
 8007104:	f000 fe2a 	bl	8007d5c <malloc>
 8007108:	4602      	mov	r2, r0
 800710a:	61e0      	str	r0, [r4, #28]
 800710c:	b920      	cbnz	r0, 8007118 <_dtoa_r+0x38>
 800710e:	4bae      	ldr	r3, [pc, #696]	; (80073c8 <_dtoa_r+0x2e8>)
 8007110:	21ef      	movs	r1, #239	; 0xef
 8007112:	48ae      	ldr	r0, [pc, #696]	; (80073cc <_dtoa_r+0x2ec>)
 8007114:	f001 fc82 	bl	8008a1c <__assert_func>
 8007118:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800711c:	6005      	str	r5, [r0, #0]
 800711e:	60c5      	str	r5, [r0, #12]
 8007120:	69e3      	ldr	r3, [r4, #28]
 8007122:	6819      	ldr	r1, [r3, #0]
 8007124:	b151      	cbz	r1, 800713c <_dtoa_r+0x5c>
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	604a      	str	r2, [r1, #4]
 800712a:	2301      	movs	r3, #1
 800712c:	4093      	lsls	r3, r2
 800712e:	608b      	str	r3, [r1, #8]
 8007130:	4620      	mov	r0, r4
 8007132:	f000 ff07 	bl	8007f44 <_Bfree>
 8007136:	69e3      	ldr	r3, [r4, #28]
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	1e3b      	subs	r3, r7, #0
 800713e:	bfbb      	ittet	lt
 8007140:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007144:	9303      	strlt	r3, [sp, #12]
 8007146:	2300      	movge	r3, #0
 8007148:	2201      	movlt	r2, #1
 800714a:	bfac      	ite	ge
 800714c:	f8c8 3000 	strge.w	r3, [r8]
 8007150:	f8c8 2000 	strlt.w	r2, [r8]
 8007154:	4b9e      	ldr	r3, [pc, #632]	; (80073d0 <_dtoa_r+0x2f0>)
 8007156:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800715a:	ea33 0308 	bics.w	r3, r3, r8
 800715e:	d11b      	bne.n	8007198 <_dtoa_r+0xb8>
 8007160:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007162:	f242 730f 	movw	r3, #9999	; 0x270f
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800716c:	4333      	orrs	r3, r6
 800716e:	f000 8593 	beq.w	8007c98 <_dtoa_r+0xbb8>
 8007172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007174:	b963      	cbnz	r3, 8007190 <_dtoa_r+0xb0>
 8007176:	4b97      	ldr	r3, [pc, #604]	; (80073d4 <_dtoa_r+0x2f4>)
 8007178:	e027      	b.n	80071ca <_dtoa_r+0xea>
 800717a:	4b97      	ldr	r3, [pc, #604]	; (80073d8 <_dtoa_r+0x2f8>)
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	3308      	adds	r3, #8
 8007180:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	9800      	ldr	r0, [sp, #0]
 8007186:	b013      	add	sp, #76	; 0x4c
 8007188:	ecbd 8b04 	vpop	{d8-d9}
 800718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007190:	4b90      	ldr	r3, [pc, #576]	; (80073d4 <_dtoa_r+0x2f4>)
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	3303      	adds	r3, #3
 8007196:	e7f3      	b.n	8007180 <_dtoa_r+0xa0>
 8007198:	ed9d 7b02 	vldr	d7, [sp, #8]
 800719c:	2200      	movs	r2, #0
 800719e:	ec51 0b17 	vmov	r0, r1, d7
 80071a2:	eeb0 8a47 	vmov.f32	s16, s14
 80071a6:	eef0 8a67 	vmov.f32	s17, s15
 80071aa:	2300      	movs	r3, #0
 80071ac:	f7f9 fcac 	bl	8000b08 <__aeabi_dcmpeq>
 80071b0:	4681      	mov	r9, r0
 80071b2:	b160      	cbz	r0, 80071ce <_dtoa_r+0xee>
 80071b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071b6:	2301      	movs	r3, #1
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 8568 	beq.w	8007c92 <_dtoa_r+0xbb2>
 80071c2:	4b86      	ldr	r3, [pc, #536]	; (80073dc <_dtoa_r+0x2fc>)
 80071c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	e7da      	b.n	8007184 <_dtoa_r+0xa4>
 80071ce:	aa10      	add	r2, sp, #64	; 0x40
 80071d0:	a911      	add	r1, sp, #68	; 0x44
 80071d2:	4620      	mov	r0, r4
 80071d4:	eeb0 0a48 	vmov.f32	s0, s16
 80071d8:	eef0 0a68 	vmov.f32	s1, s17
 80071dc:	f001 f994 	bl	8008508 <__d2b>
 80071e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80071e4:	4682      	mov	sl, r0
 80071e6:	2d00      	cmp	r5, #0
 80071e8:	d07f      	beq.n	80072ea <_dtoa_r+0x20a>
 80071ea:	ee18 3a90 	vmov	r3, s17
 80071ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80071f6:	ec51 0b18 	vmov	r0, r1, d8
 80071fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80071fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007202:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007206:	4619      	mov	r1, r3
 8007208:	2200      	movs	r2, #0
 800720a:	4b75      	ldr	r3, [pc, #468]	; (80073e0 <_dtoa_r+0x300>)
 800720c:	f7f9 f85c 	bl	80002c8 <__aeabi_dsub>
 8007210:	a367      	add	r3, pc, #412	; (adr r3, 80073b0 <_dtoa_r+0x2d0>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f7f9 fa0f 	bl	8000638 <__aeabi_dmul>
 800721a:	a367      	add	r3, pc, #412	; (adr r3, 80073b8 <_dtoa_r+0x2d8>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f7f9 f854 	bl	80002cc <__adddf3>
 8007224:	4606      	mov	r6, r0
 8007226:	4628      	mov	r0, r5
 8007228:	460f      	mov	r7, r1
 800722a:	f7f9 f99b 	bl	8000564 <__aeabi_i2d>
 800722e:	a364      	add	r3, pc, #400	; (adr r3, 80073c0 <_dtoa_r+0x2e0>)
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f7f9 fa00 	bl	8000638 <__aeabi_dmul>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4630      	mov	r0, r6
 800723e:	4639      	mov	r1, r7
 8007240:	f7f9 f844 	bl	80002cc <__adddf3>
 8007244:	4606      	mov	r6, r0
 8007246:	460f      	mov	r7, r1
 8007248:	f7f9 fca6 	bl	8000b98 <__aeabi_d2iz>
 800724c:	2200      	movs	r2, #0
 800724e:	4683      	mov	fp, r0
 8007250:	2300      	movs	r3, #0
 8007252:	4630      	mov	r0, r6
 8007254:	4639      	mov	r1, r7
 8007256:	f7f9 fc61 	bl	8000b1c <__aeabi_dcmplt>
 800725a:	b148      	cbz	r0, 8007270 <_dtoa_r+0x190>
 800725c:	4658      	mov	r0, fp
 800725e:	f7f9 f981 	bl	8000564 <__aeabi_i2d>
 8007262:	4632      	mov	r2, r6
 8007264:	463b      	mov	r3, r7
 8007266:	f7f9 fc4f 	bl	8000b08 <__aeabi_dcmpeq>
 800726a:	b908      	cbnz	r0, 8007270 <_dtoa_r+0x190>
 800726c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007270:	f1bb 0f16 	cmp.w	fp, #22
 8007274:	d857      	bhi.n	8007326 <_dtoa_r+0x246>
 8007276:	4b5b      	ldr	r3, [pc, #364]	; (80073e4 <_dtoa_r+0x304>)
 8007278:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	ec51 0b18 	vmov	r0, r1, d8
 8007284:	f7f9 fc4a 	bl	8000b1c <__aeabi_dcmplt>
 8007288:	2800      	cmp	r0, #0
 800728a:	d04e      	beq.n	800732a <_dtoa_r+0x24a>
 800728c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007290:	2300      	movs	r3, #0
 8007292:	930c      	str	r3, [sp, #48]	; 0x30
 8007294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007296:	1b5b      	subs	r3, r3, r5
 8007298:	1e5a      	subs	r2, r3, #1
 800729a:	bf45      	ittet	mi
 800729c:	f1c3 0301 	rsbmi	r3, r3, #1
 80072a0:	9305      	strmi	r3, [sp, #20]
 80072a2:	2300      	movpl	r3, #0
 80072a4:	2300      	movmi	r3, #0
 80072a6:	9206      	str	r2, [sp, #24]
 80072a8:	bf54      	ite	pl
 80072aa:	9305      	strpl	r3, [sp, #20]
 80072ac:	9306      	strmi	r3, [sp, #24]
 80072ae:	f1bb 0f00 	cmp.w	fp, #0
 80072b2:	db3c      	blt.n	800732e <_dtoa_r+0x24e>
 80072b4:	9b06      	ldr	r3, [sp, #24]
 80072b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80072ba:	445b      	add	r3, fp
 80072bc:	9306      	str	r3, [sp, #24]
 80072be:	2300      	movs	r3, #0
 80072c0:	9308      	str	r3, [sp, #32]
 80072c2:	9b07      	ldr	r3, [sp, #28]
 80072c4:	2b09      	cmp	r3, #9
 80072c6:	d868      	bhi.n	800739a <_dtoa_r+0x2ba>
 80072c8:	2b05      	cmp	r3, #5
 80072ca:	bfc4      	itt	gt
 80072cc:	3b04      	subgt	r3, #4
 80072ce:	9307      	strgt	r3, [sp, #28]
 80072d0:	9b07      	ldr	r3, [sp, #28]
 80072d2:	f1a3 0302 	sub.w	r3, r3, #2
 80072d6:	bfcc      	ite	gt
 80072d8:	2500      	movgt	r5, #0
 80072da:	2501      	movle	r5, #1
 80072dc:	2b03      	cmp	r3, #3
 80072de:	f200 8085 	bhi.w	80073ec <_dtoa_r+0x30c>
 80072e2:	e8df f003 	tbb	[pc, r3]
 80072e6:	3b2e      	.short	0x3b2e
 80072e8:	5839      	.short	0x5839
 80072ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80072ee:	441d      	add	r5, r3
 80072f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80072f4:	2b20      	cmp	r3, #32
 80072f6:	bfc1      	itttt	gt
 80072f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8007300:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007304:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007308:	bfd6      	itet	le
 800730a:	f1c3 0320 	rsble	r3, r3, #32
 800730e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007312:	fa06 f003 	lslle.w	r0, r6, r3
 8007316:	f7f9 f915 	bl	8000544 <__aeabi_ui2d>
 800731a:	2201      	movs	r2, #1
 800731c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007320:	3d01      	subs	r5, #1
 8007322:	920e      	str	r2, [sp, #56]	; 0x38
 8007324:	e76f      	b.n	8007206 <_dtoa_r+0x126>
 8007326:	2301      	movs	r3, #1
 8007328:	e7b3      	b.n	8007292 <_dtoa_r+0x1b2>
 800732a:	900c      	str	r0, [sp, #48]	; 0x30
 800732c:	e7b2      	b.n	8007294 <_dtoa_r+0x1b4>
 800732e:	9b05      	ldr	r3, [sp, #20]
 8007330:	eba3 030b 	sub.w	r3, r3, fp
 8007334:	9305      	str	r3, [sp, #20]
 8007336:	f1cb 0300 	rsb	r3, fp, #0
 800733a:	9308      	str	r3, [sp, #32]
 800733c:	2300      	movs	r3, #0
 800733e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007340:	e7bf      	b.n	80072c2 <_dtoa_r+0x1e2>
 8007342:	2300      	movs	r3, #0
 8007344:	9309      	str	r3, [sp, #36]	; 0x24
 8007346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007348:	2b00      	cmp	r3, #0
 800734a:	dc52      	bgt.n	80073f2 <_dtoa_r+0x312>
 800734c:	2301      	movs	r3, #1
 800734e:	9301      	str	r3, [sp, #4]
 8007350:	9304      	str	r3, [sp, #16]
 8007352:	461a      	mov	r2, r3
 8007354:	920a      	str	r2, [sp, #40]	; 0x28
 8007356:	e00b      	b.n	8007370 <_dtoa_r+0x290>
 8007358:	2301      	movs	r3, #1
 800735a:	e7f3      	b.n	8007344 <_dtoa_r+0x264>
 800735c:	2300      	movs	r3, #0
 800735e:	9309      	str	r3, [sp, #36]	; 0x24
 8007360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007362:	445b      	add	r3, fp
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	3301      	adds	r3, #1
 8007368:	2b01      	cmp	r3, #1
 800736a:	9304      	str	r3, [sp, #16]
 800736c:	bfb8      	it	lt
 800736e:	2301      	movlt	r3, #1
 8007370:	69e0      	ldr	r0, [r4, #28]
 8007372:	2100      	movs	r1, #0
 8007374:	2204      	movs	r2, #4
 8007376:	f102 0614 	add.w	r6, r2, #20
 800737a:	429e      	cmp	r6, r3
 800737c:	d93d      	bls.n	80073fa <_dtoa_r+0x31a>
 800737e:	6041      	str	r1, [r0, #4]
 8007380:	4620      	mov	r0, r4
 8007382:	f000 fd9f 	bl	8007ec4 <_Balloc>
 8007386:	9000      	str	r0, [sp, #0]
 8007388:	2800      	cmp	r0, #0
 800738a:	d139      	bne.n	8007400 <_dtoa_r+0x320>
 800738c:	4b16      	ldr	r3, [pc, #88]	; (80073e8 <_dtoa_r+0x308>)
 800738e:	4602      	mov	r2, r0
 8007390:	f240 11af 	movw	r1, #431	; 0x1af
 8007394:	e6bd      	b.n	8007112 <_dtoa_r+0x32>
 8007396:	2301      	movs	r3, #1
 8007398:	e7e1      	b.n	800735e <_dtoa_r+0x27e>
 800739a:	2501      	movs	r5, #1
 800739c:	2300      	movs	r3, #0
 800739e:	9307      	str	r3, [sp, #28]
 80073a0:	9509      	str	r5, [sp, #36]	; 0x24
 80073a2:	f04f 33ff 	mov.w	r3, #4294967295
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	2200      	movs	r2, #0
 80073ac:	2312      	movs	r3, #18
 80073ae:	e7d1      	b.n	8007354 <_dtoa_r+0x274>
 80073b0:	636f4361 	.word	0x636f4361
 80073b4:	3fd287a7 	.word	0x3fd287a7
 80073b8:	8b60c8b3 	.word	0x8b60c8b3
 80073bc:	3fc68a28 	.word	0x3fc68a28
 80073c0:	509f79fb 	.word	0x509f79fb
 80073c4:	3fd34413 	.word	0x3fd34413
 80073c8:	0800bf7d 	.word	0x0800bf7d
 80073cc:	0800bf94 	.word	0x0800bf94
 80073d0:	7ff00000 	.word	0x7ff00000
 80073d4:	0800bf79 	.word	0x0800bf79
 80073d8:	0800bf70 	.word	0x0800bf70
 80073dc:	0800bf4d 	.word	0x0800bf4d
 80073e0:	3ff80000 	.word	0x3ff80000
 80073e4:	0800c080 	.word	0x0800c080
 80073e8:	0800bfec 	.word	0x0800bfec
 80073ec:	2301      	movs	r3, #1
 80073ee:	9309      	str	r3, [sp, #36]	; 0x24
 80073f0:	e7d7      	b.n	80073a2 <_dtoa_r+0x2c2>
 80073f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	e7ba      	b.n	8007370 <_dtoa_r+0x290>
 80073fa:	3101      	adds	r1, #1
 80073fc:	0052      	lsls	r2, r2, #1
 80073fe:	e7ba      	b.n	8007376 <_dtoa_r+0x296>
 8007400:	69e3      	ldr	r3, [r4, #28]
 8007402:	9a00      	ldr	r2, [sp, #0]
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	9b04      	ldr	r3, [sp, #16]
 8007408:	2b0e      	cmp	r3, #14
 800740a:	f200 80a8 	bhi.w	800755e <_dtoa_r+0x47e>
 800740e:	2d00      	cmp	r5, #0
 8007410:	f000 80a5 	beq.w	800755e <_dtoa_r+0x47e>
 8007414:	f1bb 0f00 	cmp.w	fp, #0
 8007418:	dd38      	ble.n	800748c <_dtoa_r+0x3ac>
 800741a:	4bc0      	ldr	r3, [pc, #768]	; (800771c <_dtoa_r+0x63c>)
 800741c:	f00b 020f 	and.w	r2, fp, #15
 8007420:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007424:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007428:	e9d3 6700 	ldrd	r6, r7, [r3]
 800742c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007430:	d019      	beq.n	8007466 <_dtoa_r+0x386>
 8007432:	4bbb      	ldr	r3, [pc, #748]	; (8007720 <_dtoa_r+0x640>)
 8007434:	ec51 0b18 	vmov	r0, r1, d8
 8007438:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800743c:	f7f9 fa26 	bl	800088c <__aeabi_ddiv>
 8007440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007444:	f008 080f 	and.w	r8, r8, #15
 8007448:	2503      	movs	r5, #3
 800744a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007720 <_dtoa_r+0x640>
 800744e:	f1b8 0f00 	cmp.w	r8, #0
 8007452:	d10a      	bne.n	800746a <_dtoa_r+0x38a>
 8007454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007458:	4632      	mov	r2, r6
 800745a:	463b      	mov	r3, r7
 800745c:	f7f9 fa16 	bl	800088c <__aeabi_ddiv>
 8007460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007464:	e02b      	b.n	80074be <_dtoa_r+0x3de>
 8007466:	2502      	movs	r5, #2
 8007468:	e7ef      	b.n	800744a <_dtoa_r+0x36a>
 800746a:	f018 0f01 	tst.w	r8, #1
 800746e:	d008      	beq.n	8007482 <_dtoa_r+0x3a2>
 8007470:	4630      	mov	r0, r6
 8007472:	4639      	mov	r1, r7
 8007474:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007478:	f7f9 f8de 	bl	8000638 <__aeabi_dmul>
 800747c:	3501      	adds	r5, #1
 800747e:	4606      	mov	r6, r0
 8007480:	460f      	mov	r7, r1
 8007482:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007486:	f109 0908 	add.w	r9, r9, #8
 800748a:	e7e0      	b.n	800744e <_dtoa_r+0x36e>
 800748c:	f000 809f 	beq.w	80075ce <_dtoa_r+0x4ee>
 8007490:	f1cb 0600 	rsb	r6, fp, #0
 8007494:	4ba1      	ldr	r3, [pc, #644]	; (800771c <_dtoa_r+0x63c>)
 8007496:	4fa2      	ldr	r7, [pc, #648]	; (8007720 <_dtoa_r+0x640>)
 8007498:	f006 020f 	and.w	r2, r6, #15
 800749c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a4:	ec51 0b18 	vmov	r0, r1, d8
 80074a8:	f7f9 f8c6 	bl	8000638 <__aeabi_dmul>
 80074ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074b0:	1136      	asrs	r6, r6, #4
 80074b2:	2300      	movs	r3, #0
 80074b4:	2502      	movs	r5, #2
 80074b6:	2e00      	cmp	r6, #0
 80074b8:	d17e      	bne.n	80075b8 <_dtoa_r+0x4d8>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1d0      	bne.n	8007460 <_dtoa_r+0x380>
 80074be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 8084 	beq.w	80075d2 <_dtoa_r+0x4f2>
 80074ca:	4b96      	ldr	r3, [pc, #600]	; (8007724 <_dtoa_r+0x644>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	4640      	mov	r0, r8
 80074d0:	4649      	mov	r1, r9
 80074d2:	f7f9 fb23 	bl	8000b1c <__aeabi_dcmplt>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d07b      	beq.n	80075d2 <_dtoa_r+0x4f2>
 80074da:	9b04      	ldr	r3, [sp, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d078      	beq.n	80075d2 <_dtoa_r+0x4f2>
 80074e0:	9b01      	ldr	r3, [sp, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	dd39      	ble.n	800755a <_dtoa_r+0x47a>
 80074e6:	4b90      	ldr	r3, [pc, #576]	; (8007728 <_dtoa_r+0x648>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	4640      	mov	r0, r8
 80074ec:	4649      	mov	r1, r9
 80074ee:	f7f9 f8a3 	bl	8000638 <__aeabi_dmul>
 80074f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f6:	9e01      	ldr	r6, [sp, #4]
 80074f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80074fc:	3501      	adds	r5, #1
 80074fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007502:	4628      	mov	r0, r5
 8007504:	f7f9 f82e 	bl	8000564 <__aeabi_i2d>
 8007508:	4642      	mov	r2, r8
 800750a:	464b      	mov	r3, r9
 800750c:	f7f9 f894 	bl	8000638 <__aeabi_dmul>
 8007510:	4b86      	ldr	r3, [pc, #536]	; (800772c <_dtoa_r+0x64c>)
 8007512:	2200      	movs	r2, #0
 8007514:	f7f8 feda 	bl	80002cc <__adddf3>
 8007518:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800751c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007520:	9303      	str	r3, [sp, #12]
 8007522:	2e00      	cmp	r6, #0
 8007524:	d158      	bne.n	80075d8 <_dtoa_r+0x4f8>
 8007526:	4b82      	ldr	r3, [pc, #520]	; (8007730 <_dtoa_r+0x650>)
 8007528:	2200      	movs	r2, #0
 800752a:	4640      	mov	r0, r8
 800752c:	4649      	mov	r1, r9
 800752e:	f7f8 fecb 	bl	80002c8 <__aeabi_dsub>
 8007532:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007536:	4680      	mov	r8, r0
 8007538:	4689      	mov	r9, r1
 800753a:	f7f9 fb0d 	bl	8000b58 <__aeabi_dcmpgt>
 800753e:	2800      	cmp	r0, #0
 8007540:	f040 8296 	bne.w	8007a70 <_dtoa_r+0x990>
 8007544:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007548:	4640      	mov	r0, r8
 800754a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800754e:	4649      	mov	r1, r9
 8007550:	f7f9 fae4 	bl	8000b1c <__aeabi_dcmplt>
 8007554:	2800      	cmp	r0, #0
 8007556:	f040 8289 	bne.w	8007a6c <_dtoa_r+0x98c>
 800755a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800755e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007560:	2b00      	cmp	r3, #0
 8007562:	f2c0 814e 	blt.w	8007802 <_dtoa_r+0x722>
 8007566:	f1bb 0f0e 	cmp.w	fp, #14
 800756a:	f300 814a 	bgt.w	8007802 <_dtoa_r+0x722>
 800756e:	4b6b      	ldr	r3, [pc, #428]	; (800771c <_dtoa_r+0x63c>)
 8007570:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007574:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800757a:	2b00      	cmp	r3, #0
 800757c:	f280 80dc 	bge.w	8007738 <_dtoa_r+0x658>
 8007580:	9b04      	ldr	r3, [sp, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	f300 80d8 	bgt.w	8007738 <_dtoa_r+0x658>
 8007588:	f040 826f 	bne.w	8007a6a <_dtoa_r+0x98a>
 800758c:	4b68      	ldr	r3, [pc, #416]	; (8007730 <_dtoa_r+0x650>)
 800758e:	2200      	movs	r2, #0
 8007590:	4640      	mov	r0, r8
 8007592:	4649      	mov	r1, r9
 8007594:	f7f9 f850 	bl	8000638 <__aeabi_dmul>
 8007598:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800759c:	f7f9 fad2 	bl	8000b44 <__aeabi_dcmpge>
 80075a0:	9e04      	ldr	r6, [sp, #16]
 80075a2:	4637      	mov	r7, r6
 80075a4:	2800      	cmp	r0, #0
 80075a6:	f040 8245 	bne.w	8007a34 <_dtoa_r+0x954>
 80075aa:	9d00      	ldr	r5, [sp, #0]
 80075ac:	2331      	movs	r3, #49	; 0x31
 80075ae:	f805 3b01 	strb.w	r3, [r5], #1
 80075b2:	f10b 0b01 	add.w	fp, fp, #1
 80075b6:	e241      	b.n	8007a3c <_dtoa_r+0x95c>
 80075b8:	07f2      	lsls	r2, r6, #31
 80075ba:	d505      	bpl.n	80075c8 <_dtoa_r+0x4e8>
 80075bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c0:	f7f9 f83a 	bl	8000638 <__aeabi_dmul>
 80075c4:	3501      	adds	r5, #1
 80075c6:	2301      	movs	r3, #1
 80075c8:	1076      	asrs	r6, r6, #1
 80075ca:	3708      	adds	r7, #8
 80075cc:	e773      	b.n	80074b6 <_dtoa_r+0x3d6>
 80075ce:	2502      	movs	r5, #2
 80075d0:	e775      	b.n	80074be <_dtoa_r+0x3de>
 80075d2:	9e04      	ldr	r6, [sp, #16]
 80075d4:	465f      	mov	r7, fp
 80075d6:	e792      	b.n	80074fe <_dtoa_r+0x41e>
 80075d8:	9900      	ldr	r1, [sp, #0]
 80075da:	4b50      	ldr	r3, [pc, #320]	; (800771c <_dtoa_r+0x63c>)
 80075dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075e0:	4431      	add	r1, r6
 80075e2:	9102      	str	r1, [sp, #8]
 80075e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075e6:	eeb0 9a47 	vmov.f32	s18, s14
 80075ea:	eef0 9a67 	vmov.f32	s19, s15
 80075ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80075f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075f6:	2900      	cmp	r1, #0
 80075f8:	d044      	beq.n	8007684 <_dtoa_r+0x5a4>
 80075fa:	494e      	ldr	r1, [pc, #312]	; (8007734 <_dtoa_r+0x654>)
 80075fc:	2000      	movs	r0, #0
 80075fe:	f7f9 f945 	bl	800088c <__aeabi_ddiv>
 8007602:	ec53 2b19 	vmov	r2, r3, d9
 8007606:	f7f8 fe5f 	bl	80002c8 <__aeabi_dsub>
 800760a:	9d00      	ldr	r5, [sp, #0]
 800760c:	ec41 0b19 	vmov	d9, r0, r1
 8007610:	4649      	mov	r1, r9
 8007612:	4640      	mov	r0, r8
 8007614:	f7f9 fac0 	bl	8000b98 <__aeabi_d2iz>
 8007618:	4606      	mov	r6, r0
 800761a:	f7f8 ffa3 	bl	8000564 <__aeabi_i2d>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	4640      	mov	r0, r8
 8007624:	4649      	mov	r1, r9
 8007626:	f7f8 fe4f 	bl	80002c8 <__aeabi_dsub>
 800762a:	3630      	adds	r6, #48	; 0x30
 800762c:	f805 6b01 	strb.w	r6, [r5], #1
 8007630:	ec53 2b19 	vmov	r2, r3, d9
 8007634:	4680      	mov	r8, r0
 8007636:	4689      	mov	r9, r1
 8007638:	f7f9 fa70 	bl	8000b1c <__aeabi_dcmplt>
 800763c:	2800      	cmp	r0, #0
 800763e:	d164      	bne.n	800770a <_dtoa_r+0x62a>
 8007640:	4642      	mov	r2, r8
 8007642:	464b      	mov	r3, r9
 8007644:	4937      	ldr	r1, [pc, #220]	; (8007724 <_dtoa_r+0x644>)
 8007646:	2000      	movs	r0, #0
 8007648:	f7f8 fe3e 	bl	80002c8 <__aeabi_dsub>
 800764c:	ec53 2b19 	vmov	r2, r3, d9
 8007650:	f7f9 fa64 	bl	8000b1c <__aeabi_dcmplt>
 8007654:	2800      	cmp	r0, #0
 8007656:	f040 80b6 	bne.w	80077c6 <_dtoa_r+0x6e6>
 800765a:	9b02      	ldr	r3, [sp, #8]
 800765c:	429d      	cmp	r5, r3
 800765e:	f43f af7c 	beq.w	800755a <_dtoa_r+0x47a>
 8007662:	4b31      	ldr	r3, [pc, #196]	; (8007728 <_dtoa_r+0x648>)
 8007664:	ec51 0b19 	vmov	r0, r1, d9
 8007668:	2200      	movs	r2, #0
 800766a:	f7f8 ffe5 	bl	8000638 <__aeabi_dmul>
 800766e:	4b2e      	ldr	r3, [pc, #184]	; (8007728 <_dtoa_r+0x648>)
 8007670:	ec41 0b19 	vmov	d9, r0, r1
 8007674:	2200      	movs	r2, #0
 8007676:	4640      	mov	r0, r8
 8007678:	4649      	mov	r1, r9
 800767a:	f7f8 ffdd 	bl	8000638 <__aeabi_dmul>
 800767e:	4680      	mov	r8, r0
 8007680:	4689      	mov	r9, r1
 8007682:	e7c5      	b.n	8007610 <_dtoa_r+0x530>
 8007684:	ec51 0b17 	vmov	r0, r1, d7
 8007688:	f7f8 ffd6 	bl	8000638 <__aeabi_dmul>
 800768c:	9b02      	ldr	r3, [sp, #8]
 800768e:	9d00      	ldr	r5, [sp, #0]
 8007690:	930f      	str	r3, [sp, #60]	; 0x3c
 8007692:	ec41 0b19 	vmov	d9, r0, r1
 8007696:	4649      	mov	r1, r9
 8007698:	4640      	mov	r0, r8
 800769a:	f7f9 fa7d 	bl	8000b98 <__aeabi_d2iz>
 800769e:	4606      	mov	r6, r0
 80076a0:	f7f8 ff60 	bl	8000564 <__aeabi_i2d>
 80076a4:	3630      	adds	r6, #48	; 0x30
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4640      	mov	r0, r8
 80076ac:	4649      	mov	r1, r9
 80076ae:	f7f8 fe0b 	bl	80002c8 <__aeabi_dsub>
 80076b2:	f805 6b01 	strb.w	r6, [r5], #1
 80076b6:	9b02      	ldr	r3, [sp, #8]
 80076b8:	429d      	cmp	r5, r3
 80076ba:	4680      	mov	r8, r0
 80076bc:	4689      	mov	r9, r1
 80076be:	f04f 0200 	mov.w	r2, #0
 80076c2:	d124      	bne.n	800770e <_dtoa_r+0x62e>
 80076c4:	4b1b      	ldr	r3, [pc, #108]	; (8007734 <_dtoa_r+0x654>)
 80076c6:	ec51 0b19 	vmov	r0, r1, d9
 80076ca:	f7f8 fdff 	bl	80002cc <__adddf3>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	4640      	mov	r0, r8
 80076d4:	4649      	mov	r1, r9
 80076d6:	f7f9 fa3f 	bl	8000b58 <__aeabi_dcmpgt>
 80076da:	2800      	cmp	r0, #0
 80076dc:	d173      	bne.n	80077c6 <_dtoa_r+0x6e6>
 80076de:	ec53 2b19 	vmov	r2, r3, d9
 80076e2:	4914      	ldr	r1, [pc, #80]	; (8007734 <_dtoa_r+0x654>)
 80076e4:	2000      	movs	r0, #0
 80076e6:	f7f8 fdef 	bl	80002c8 <__aeabi_dsub>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4640      	mov	r0, r8
 80076f0:	4649      	mov	r1, r9
 80076f2:	f7f9 fa13 	bl	8000b1c <__aeabi_dcmplt>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	f43f af2f 	beq.w	800755a <_dtoa_r+0x47a>
 80076fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80076fe:	1e6b      	subs	r3, r5, #1
 8007700:	930f      	str	r3, [sp, #60]	; 0x3c
 8007702:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007706:	2b30      	cmp	r3, #48	; 0x30
 8007708:	d0f8      	beq.n	80076fc <_dtoa_r+0x61c>
 800770a:	46bb      	mov	fp, r7
 800770c:	e04a      	b.n	80077a4 <_dtoa_r+0x6c4>
 800770e:	4b06      	ldr	r3, [pc, #24]	; (8007728 <_dtoa_r+0x648>)
 8007710:	f7f8 ff92 	bl	8000638 <__aeabi_dmul>
 8007714:	4680      	mov	r8, r0
 8007716:	4689      	mov	r9, r1
 8007718:	e7bd      	b.n	8007696 <_dtoa_r+0x5b6>
 800771a:	bf00      	nop
 800771c:	0800c080 	.word	0x0800c080
 8007720:	0800c058 	.word	0x0800c058
 8007724:	3ff00000 	.word	0x3ff00000
 8007728:	40240000 	.word	0x40240000
 800772c:	401c0000 	.word	0x401c0000
 8007730:	40140000 	.word	0x40140000
 8007734:	3fe00000 	.word	0x3fe00000
 8007738:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800773c:	9d00      	ldr	r5, [sp, #0]
 800773e:	4642      	mov	r2, r8
 8007740:	464b      	mov	r3, r9
 8007742:	4630      	mov	r0, r6
 8007744:	4639      	mov	r1, r7
 8007746:	f7f9 f8a1 	bl	800088c <__aeabi_ddiv>
 800774a:	f7f9 fa25 	bl	8000b98 <__aeabi_d2iz>
 800774e:	9001      	str	r0, [sp, #4]
 8007750:	f7f8 ff08 	bl	8000564 <__aeabi_i2d>
 8007754:	4642      	mov	r2, r8
 8007756:	464b      	mov	r3, r9
 8007758:	f7f8 ff6e 	bl	8000638 <__aeabi_dmul>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4630      	mov	r0, r6
 8007762:	4639      	mov	r1, r7
 8007764:	f7f8 fdb0 	bl	80002c8 <__aeabi_dsub>
 8007768:	9e01      	ldr	r6, [sp, #4]
 800776a:	9f04      	ldr	r7, [sp, #16]
 800776c:	3630      	adds	r6, #48	; 0x30
 800776e:	f805 6b01 	strb.w	r6, [r5], #1
 8007772:	9e00      	ldr	r6, [sp, #0]
 8007774:	1bae      	subs	r6, r5, r6
 8007776:	42b7      	cmp	r7, r6
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	d134      	bne.n	80077e8 <_dtoa_r+0x708>
 800777e:	f7f8 fda5 	bl	80002cc <__adddf3>
 8007782:	4642      	mov	r2, r8
 8007784:	464b      	mov	r3, r9
 8007786:	4606      	mov	r6, r0
 8007788:	460f      	mov	r7, r1
 800778a:	f7f9 f9e5 	bl	8000b58 <__aeabi_dcmpgt>
 800778e:	b9c8      	cbnz	r0, 80077c4 <_dtoa_r+0x6e4>
 8007790:	4642      	mov	r2, r8
 8007792:	464b      	mov	r3, r9
 8007794:	4630      	mov	r0, r6
 8007796:	4639      	mov	r1, r7
 8007798:	f7f9 f9b6 	bl	8000b08 <__aeabi_dcmpeq>
 800779c:	b110      	cbz	r0, 80077a4 <_dtoa_r+0x6c4>
 800779e:	9b01      	ldr	r3, [sp, #4]
 80077a0:	07db      	lsls	r3, r3, #31
 80077a2:	d40f      	bmi.n	80077c4 <_dtoa_r+0x6e4>
 80077a4:	4651      	mov	r1, sl
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 fbcc 	bl	8007f44 <_Bfree>
 80077ac:	2300      	movs	r3, #0
 80077ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077b0:	702b      	strb	r3, [r5, #0]
 80077b2:	f10b 0301 	add.w	r3, fp, #1
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f43f ace2 	beq.w	8007184 <_dtoa_r+0xa4>
 80077c0:	601d      	str	r5, [r3, #0]
 80077c2:	e4df      	b.n	8007184 <_dtoa_r+0xa4>
 80077c4:	465f      	mov	r7, fp
 80077c6:	462b      	mov	r3, r5
 80077c8:	461d      	mov	r5, r3
 80077ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077ce:	2a39      	cmp	r2, #57	; 0x39
 80077d0:	d106      	bne.n	80077e0 <_dtoa_r+0x700>
 80077d2:	9a00      	ldr	r2, [sp, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d1f7      	bne.n	80077c8 <_dtoa_r+0x6e8>
 80077d8:	9900      	ldr	r1, [sp, #0]
 80077da:	2230      	movs	r2, #48	; 0x30
 80077dc:	3701      	adds	r7, #1
 80077de:	700a      	strb	r2, [r1, #0]
 80077e0:	781a      	ldrb	r2, [r3, #0]
 80077e2:	3201      	adds	r2, #1
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	e790      	b.n	800770a <_dtoa_r+0x62a>
 80077e8:	4ba3      	ldr	r3, [pc, #652]	; (8007a78 <_dtoa_r+0x998>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	f7f8 ff24 	bl	8000638 <__aeabi_dmul>
 80077f0:	2200      	movs	r2, #0
 80077f2:	2300      	movs	r3, #0
 80077f4:	4606      	mov	r6, r0
 80077f6:	460f      	mov	r7, r1
 80077f8:	f7f9 f986 	bl	8000b08 <__aeabi_dcmpeq>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d09e      	beq.n	800773e <_dtoa_r+0x65e>
 8007800:	e7d0      	b.n	80077a4 <_dtoa_r+0x6c4>
 8007802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007804:	2a00      	cmp	r2, #0
 8007806:	f000 80ca 	beq.w	800799e <_dtoa_r+0x8be>
 800780a:	9a07      	ldr	r2, [sp, #28]
 800780c:	2a01      	cmp	r2, #1
 800780e:	f300 80ad 	bgt.w	800796c <_dtoa_r+0x88c>
 8007812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007814:	2a00      	cmp	r2, #0
 8007816:	f000 80a5 	beq.w	8007964 <_dtoa_r+0x884>
 800781a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800781e:	9e08      	ldr	r6, [sp, #32]
 8007820:	9d05      	ldr	r5, [sp, #20]
 8007822:	9a05      	ldr	r2, [sp, #20]
 8007824:	441a      	add	r2, r3
 8007826:	9205      	str	r2, [sp, #20]
 8007828:	9a06      	ldr	r2, [sp, #24]
 800782a:	2101      	movs	r1, #1
 800782c:	441a      	add	r2, r3
 800782e:	4620      	mov	r0, r4
 8007830:	9206      	str	r2, [sp, #24]
 8007832:	f000 fc3d 	bl	80080b0 <__i2b>
 8007836:	4607      	mov	r7, r0
 8007838:	b165      	cbz	r5, 8007854 <_dtoa_r+0x774>
 800783a:	9b06      	ldr	r3, [sp, #24]
 800783c:	2b00      	cmp	r3, #0
 800783e:	dd09      	ble.n	8007854 <_dtoa_r+0x774>
 8007840:	42ab      	cmp	r3, r5
 8007842:	9a05      	ldr	r2, [sp, #20]
 8007844:	bfa8      	it	ge
 8007846:	462b      	movge	r3, r5
 8007848:	1ad2      	subs	r2, r2, r3
 800784a:	9205      	str	r2, [sp, #20]
 800784c:	9a06      	ldr	r2, [sp, #24]
 800784e:	1aed      	subs	r5, r5, r3
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	9306      	str	r3, [sp, #24]
 8007854:	9b08      	ldr	r3, [sp, #32]
 8007856:	b1f3      	cbz	r3, 8007896 <_dtoa_r+0x7b6>
 8007858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 80a3 	beq.w	80079a6 <_dtoa_r+0x8c6>
 8007860:	2e00      	cmp	r6, #0
 8007862:	dd10      	ble.n	8007886 <_dtoa_r+0x7a6>
 8007864:	4639      	mov	r1, r7
 8007866:	4632      	mov	r2, r6
 8007868:	4620      	mov	r0, r4
 800786a:	f000 fce1 	bl	8008230 <__pow5mult>
 800786e:	4652      	mov	r2, sl
 8007870:	4601      	mov	r1, r0
 8007872:	4607      	mov	r7, r0
 8007874:	4620      	mov	r0, r4
 8007876:	f000 fc31 	bl	80080dc <__multiply>
 800787a:	4651      	mov	r1, sl
 800787c:	4680      	mov	r8, r0
 800787e:	4620      	mov	r0, r4
 8007880:	f000 fb60 	bl	8007f44 <_Bfree>
 8007884:	46c2      	mov	sl, r8
 8007886:	9b08      	ldr	r3, [sp, #32]
 8007888:	1b9a      	subs	r2, r3, r6
 800788a:	d004      	beq.n	8007896 <_dtoa_r+0x7b6>
 800788c:	4651      	mov	r1, sl
 800788e:	4620      	mov	r0, r4
 8007890:	f000 fcce 	bl	8008230 <__pow5mult>
 8007894:	4682      	mov	sl, r0
 8007896:	2101      	movs	r1, #1
 8007898:	4620      	mov	r0, r4
 800789a:	f000 fc09 	bl	80080b0 <__i2b>
 800789e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	4606      	mov	r6, r0
 80078a4:	f340 8081 	ble.w	80079aa <_dtoa_r+0x8ca>
 80078a8:	461a      	mov	r2, r3
 80078aa:	4601      	mov	r1, r0
 80078ac:	4620      	mov	r0, r4
 80078ae:	f000 fcbf 	bl	8008230 <__pow5mult>
 80078b2:	9b07      	ldr	r3, [sp, #28]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	4606      	mov	r6, r0
 80078b8:	dd7a      	ble.n	80079b0 <_dtoa_r+0x8d0>
 80078ba:	f04f 0800 	mov.w	r8, #0
 80078be:	6933      	ldr	r3, [r6, #16]
 80078c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078c4:	6918      	ldr	r0, [r3, #16]
 80078c6:	f000 fba5 	bl	8008014 <__hi0bits>
 80078ca:	f1c0 0020 	rsb	r0, r0, #32
 80078ce:	9b06      	ldr	r3, [sp, #24]
 80078d0:	4418      	add	r0, r3
 80078d2:	f010 001f 	ands.w	r0, r0, #31
 80078d6:	f000 8094 	beq.w	8007a02 <_dtoa_r+0x922>
 80078da:	f1c0 0320 	rsb	r3, r0, #32
 80078de:	2b04      	cmp	r3, #4
 80078e0:	f340 8085 	ble.w	80079ee <_dtoa_r+0x90e>
 80078e4:	9b05      	ldr	r3, [sp, #20]
 80078e6:	f1c0 001c 	rsb	r0, r0, #28
 80078ea:	4403      	add	r3, r0
 80078ec:	9305      	str	r3, [sp, #20]
 80078ee:	9b06      	ldr	r3, [sp, #24]
 80078f0:	4403      	add	r3, r0
 80078f2:	4405      	add	r5, r0
 80078f4:	9306      	str	r3, [sp, #24]
 80078f6:	9b05      	ldr	r3, [sp, #20]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dd05      	ble.n	8007908 <_dtoa_r+0x828>
 80078fc:	4651      	mov	r1, sl
 80078fe:	461a      	mov	r2, r3
 8007900:	4620      	mov	r0, r4
 8007902:	f000 fcef 	bl	80082e4 <__lshift>
 8007906:	4682      	mov	sl, r0
 8007908:	9b06      	ldr	r3, [sp, #24]
 800790a:	2b00      	cmp	r3, #0
 800790c:	dd05      	ble.n	800791a <_dtoa_r+0x83a>
 800790e:	4631      	mov	r1, r6
 8007910:	461a      	mov	r2, r3
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fce6 	bl	80082e4 <__lshift>
 8007918:	4606      	mov	r6, r0
 800791a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800791c:	2b00      	cmp	r3, #0
 800791e:	d072      	beq.n	8007a06 <_dtoa_r+0x926>
 8007920:	4631      	mov	r1, r6
 8007922:	4650      	mov	r0, sl
 8007924:	f000 fd4a 	bl	80083bc <__mcmp>
 8007928:	2800      	cmp	r0, #0
 800792a:	da6c      	bge.n	8007a06 <_dtoa_r+0x926>
 800792c:	2300      	movs	r3, #0
 800792e:	4651      	mov	r1, sl
 8007930:	220a      	movs	r2, #10
 8007932:	4620      	mov	r0, r4
 8007934:	f000 fb28 	bl	8007f88 <__multadd>
 8007938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800793e:	4682      	mov	sl, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 81b0 	beq.w	8007ca6 <_dtoa_r+0xbc6>
 8007946:	2300      	movs	r3, #0
 8007948:	4639      	mov	r1, r7
 800794a:	220a      	movs	r2, #10
 800794c:	4620      	mov	r0, r4
 800794e:	f000 fb1b 	bl	8007f88 <__multadd>
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	4607      	mov	r7, r0
 8007958:	f300 8096 	bgt.w	8007a88 <_dtoa_r+0x9a8>
 800795c:	9b07      	ldr	r3, [sp, #28]
 800795e:	2b02      	cmp	r3, #2
 8007960:	dc59      	bgt.n	8007a16 <_dtoa_r+0x936>
 8007962:	e091      	b.n	8007a88 <_dtoa_r+0x9a8>
 8007964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007966:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800796a:	e758      	b.n	800781e <_dtoa_r+0x73e>
 800796c:	9b04      	ldr	r3, [sp, #16]
 800796e:	1e5e      	subs	r6, r3, #1
 8007970:	9b08      	ldr	r3, [sp, #32]
 8007972:	42b3      	cmp	r3, r6
 8007974:	bfbf      	itttt	lt
 8007976:	9b08      	ldrlt	r3, [sp, #32]
 8007978:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800797a:	9608      	strlt	r6, [sp, #32]
 800797c:	1af3      	sublt	r3, r6, r3
 800797e:	bfb4      	ite	lt
 8007980:	18d2      	addlt	r2, r2, r3
 8007982:	1b9e      	subge	r6, r3, r6
 8007984:	9b04      	ldr	r3, [sp, #16]
 8007986:	bfbc      	itt	lt
 8007988:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800798a:	2600      	movlt	r6, #0
 800798c:	2b00      	cmp	r3, #0
 800798e:	bfb7      	itett	lt
 8007990:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007994:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007998:	1a9d      	sublt	r5, r3, r2
 800799a:	2300      	movlt	r3, #0
 800799c:	e741      	b.n	8007822 <_dtoa_r+0x742>
 800799e:	9e08      	ldr	r6, [sp, #32]
 80079a0:	9d05      	ldr	r5, [sp, #20]
 80079a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80079a4:	e748      	b.n	8007838 <_dtoa_r+0x758>
 80079a6:	9a08      	ldr	r2, [sp, #32]
 80079a8:	e770      	b.n	800788c <_dtoa_r+0x7ac>
 80079aa:	9b07      	ldr	r3, [sp, #28]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	dc19      	bgt.n	80079e4 <_dtoa_r+0x904>
 80079b0:	9b02      	ldr	r3, [sp, #8]
 80079b2:	b9bb      	cbnz	r3, 80079e4 <_dtoa_r+0x904>
 80079b4:	9b03      	ldr	r3, [sp, #12]
 80079b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079ba:	b99b      	cbnz	r3, 80079e4 <_dtoa_r+0x904>
 80079bc:	9b03      	ldr	r3, [sp, #12]
 80079be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079c2:	0d1b      	lsrs	r3, r3, #20
 80079c4:	051b      	lsls	r3, r3, #20
 80079c6:	b183      	cbz	r3, 80079ea <_dtoa_r+0x90a>
 80079c8:	9b05      	ldr	r3, [sp, #20]
 80079ca:	3301      	adds	r3, #1
 80079cc:	9305      	str	r3, [sp, #20]
 80079ce:	9b06      	ldr	r3, [sp, #24]
 80079d0:	3301      	adds	r3, #1
 80079d2:	9306      	str	r3, [sp, #24]
 80079d4:	f04f 0801 	mov.w	r8, #1
 80079d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f47f af6f 	bne.w	80078be <_dtoa_r+0x7de>
 80079e0:	2001      	movs	r0, #1
 80079e2:	e774      	b.n	80078ce <_dtoa_r+0x7ee>
 80079e4:	f04f 0800 	mov.w	r8, #0
 80079e8:	e7f6      	b.n	80079d8 <_dtoa_r+0x8f8>
 80079ea:	4698      	mov	r8, r3
 80079ec:	e7f4      	b.n	80079d8 <_dtoa_r+0x8f8>
 80079ee:	d082      	beq.n	80078f6 <_dtoa_r+0x816>
 80079f0:	9a05      	ldr	r2, [sp, #20]
 80079f2:	331c      	adds	r3, #28
 80079f4:	441a      	add	r2, r3
 80079f6:	9205      	str	r2, [sp, #20]
 80079f8:	9a06      	ldr	r2, [sp, #24]
 80079fa:	441a      	add	r2, r3
 80079fc:	441d      	add	r5, r3
 80079fe:	9206      	str	r2, [sp, #24]
 8007a00:	e779      	b.n	80078f6 <_dtoa_r+0x816>
 8007a02:	4603      	mov	r3, r0
 8007a04:	e7f4      	b.n	80079f0 <_dtoa_r+0x910>
 8007a06:	9b04      	ldr	r3, [sp, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	dc37      	bgt.n	8007a7c <_dtoa_r+0x99c>
 8007a0c:	9b07      	ldr	r3, [sp, #28]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	dd34      	ble.n	8007a7c <_dtoa_r+0x99c>
 8007a12:	9b04      	ldr	r3, [sp, #16]
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	9b01      	ldr	r3, [sp, #4]
 8007a18:	b963      	cbnz	r3, 8007a34 <_dtoa_r+0x954>
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	2205      	movs	r2, #5
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f000 fab2 	bl	8007f88 <__multadd>
 8007a24:	4601      	mov	r1, r0
 8007a26:	4606      	mov	r6, r0
 8007a28:	4650      	mov	r0, sl
 8007a2a:	f000 fcc7 	bl	80083bc <__mcmp>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f73f adbb 	bgt.w	80075aa <_dtoa_r+0x4ca>
 8007a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a36:	9d00      	ldr	r5, [sp, #0]
 8007a38:	ea6f 0b03 	mvn.w	fp, r3
 8007a3c:	f04f 0800 	mov.w	r8, #0
 8007a40:	4631      	mov	r1, r6
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 fa7e 	bl	8007f44 <_Bfree>
 8007a48:	2f00      	cmp	r7, #0
 8007a4a:	f43f aeab 	beq.w	80077a4 <_dtoa_r+0x6c4>
 8007a4e:	f1b8 0f00 	cmp.w	r8, #0
 8007a52:	d005      	beq.n	8007a60 <_dtoa_r+0x980>
 8007a54:	45b8      	cmp	r8, r7
 8007a56:	d003      	beq.n	8007a60 <_dtoa_r+0x980>
 8007a58:	4641      	mov	r1, r8
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 fa72 	bl	8007f44 <_Bfree>
 8007a60:	4639      	mov	r1, r7
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 fa6e 	bl	8007f44 <_Bfree>
 8007a68:	e69c      	b.n	80077a4 <_dtoa_r+0x6c4>
 8007a6a:	2600      	movs	r6, #0
 8007a6c:	4637      	mov	r7, r6
 8007a6e:	e7e1      	b.n	8007a34 <_dtoa_r+0x954>
 8007a70:	46bb      	mov	fp, r7
 8007a72:	4637      	mov	r7, r6
 8007a74:	e599      	b.n	80075aa <_dtoa_r+0x4ca>
 8007a76:	bf00      	nop
 8007a78:	40240000 	.word	0x40240000
 8007a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 80c8 	beq.w	8007c14 <_dtoa_r+0xb34>
 8007a84:	9b04      	ldr	r3, [sp, #16]
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	2d00      	cmp	r5, #0
 8007a8a:	dd05      	ble.n	8007a98 <_dtoa_r+0x9b8>
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	462a      	mov	r2, r5
 8007a90:	4620      	mov	r0, r4
 8007a92:	f000 fc27 	bl	80082e4 <__lshift>
 8007a96:	4607      	mov	r7, r0
 8007a98:	f1b8 0f00 	cmp.w	r8, #0
 8007a9c:	d05b      	beq.n	8007b56 <_dtoa_r+0xa76>
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f000 fa0f 	bl	8007ec4 <_Balloc>
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	b928      	cbnz	r0, 8007ab6 <_dtoa_r+0x9d6>
 8007aaa:	4b83      	ldr	r3, [pc, #524]	; (8007cb8 <_dtoa_r+0xbd8>)
 8007aac:	4602      	mov	r2, r0
 8007aae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007ab2:	f7ff bb2e 	b.w	8007112 <_dtoa_r+0x32>
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	3202      	adds	r2, #2
 8007aba:	0092      	lsls	r2, r2, #2
 8007abc:	f107 010c 	add.w	r1, r7, #12
 8007ac0:	300c      	adds	r0, #12
 8007ac2:	f7ff fa76 	bl	8006fb2 <memcpy>
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4620      	mov	r0, r4
 8007acc:	f000 fc0a 	bl	80082e4 <__lshift>
 8007ad0:	9b00      	ldr	r3, [sp, #0]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ada:	4413      	add	r3, r2
 8007adc:	9308      	str	r3, [sp, #32]
 8007ade:	9b02      	ldr	r3, [sp, #8]
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	46b8      	mov	r8, r7
 8007ae6:	9306      	str	r3, [sp, #24]
 8007ae8:	4607      	mov	r7, r0
 8007aea:	9b04      	ldr	r3, [sp, #16]
 8007aec:	4631      	mov	r1, r6
 8007aee:	3b01      	subs	r3, #1
 8007af0:	4650      	mov	r0, sl
 8007af2:	9301      	str	r3, [sp, #4]
 8007af4:	f7ff fa6b 	bl	8006fce <quorem>
 8007af8:	4641      	mov	r1, r8
 8007afa:	9002      	str	r0, [sp, #8]
 8007afc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b00:	4650      	mov	r0, sl
 8007b02:	f000 fc5b 	bl	80083bc <__mcmp>
 8007b06:	463a      	mov	r2, r7
 8007b08:	9005      	str	r0, [sp, #20]
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f000 fc71 	bl	80083f4 <__mdiff>
 8007b12:	68c2      	ldr	r2, [r0, #12]
 8007b14:	4605      	mov	r5, r0
 8007b16:	bb02      	cbnz	r2, 8007b5a <_dtoa_r+0xa7a>
 8007b18:	4601      	mov	r1, r0
 8007b1a:	4650      	mov	r0, sl
 8007b1c:	f000 fc4e 	bl	80083bc <__mcmp>
 8007b20:	4602      	mov	r2, r0
 8007b22:	4629      	mov	r1, r5
 8007b24:	4620      	mov	r0, r4
 8007b26:	9209      	str	r2, [sp, #36]	; 0x24
 8007b28:	f000 fa0c 	bl	8007f44 <_Bfree>
 8007b2c:	9b07      	ldr	r3, [sp, #28]
 8007b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b30:	9d04      	ldr	r5, [sp, #16]
 8007b32:	ea43 0102 	orr.w	r1, r3, r2
 8007b36:	9b06      	ldr	r3, [sp, #24]
 8007b38:	4319      	orrs	r1, r3
 8007b3a:	d110      	bne.n	8007b5e <_dtoa_r+0xa7e>
 8007b3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b40:	d029      	beq.n	8007b96 <_dtoa_r+0xab6>
 8007b42:	9b05      	ldr	r3, [sp, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	dd02      	ble.n	8007b4e <_dtoa_r+0xa6e>
 8007b48:	9b02      	ldr	r3, [sp, #8]
 8007b4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007b4e:	9b01      	ldr	r3, [sp, #4]
 8007b50:	f883 9000 	strb.w	r9, [r3]
 8007b54:	e774      	b.n	8007a40 <_dtoa_r+0x960>
 8007b56:	4638      	mov	r0, r7
 8007b58:	e7ba      	b.n	8007ad0 <_dtoa_r+0x9f0>
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	e7e1      	b.n	8007b22 <_dtoa_r+0xa42>
 8007b5e:	9b05      	ldr	r3, [sp, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	db04      	blt.n	8007b6e <_dtoa_r+0xa8e>
 8007b64:	9907      	ldr	r1, [sp, #28]
 8007b66:	430b      	orrs	r3, r1
 8007b68:	9906      	ldr	r1, [sp, #24]
 8007b6a:	430b      	orrs	r3, r1
 8007b6c:	d120      	bne.n	8007bb0 <_dtoa_r+0xad0>
 8007b6e:	2a00      	cmp	r2, #0
 8007b70:	dded      	ble.n	8007b4e <_dtoa_r+0xa6e>
 8007b72:	4651      	mov	r1, sl
 8007b74:	2201      	movs	r2, #1
 8007b76:	4620      	mov	r0, r4
 8007b78:	f000 fbb4 	bl	80082e4 <__lshift>
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4682      	mov	sl, r0
 8007b80:	f000 fc1c 	bl	80083bc <__mcmp>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	dc03      	bgt.n	8007b90 <_dtoa_r+0xab0>
 8007b88:	d1e1      	bne.n	8007b4e <_dtoa_r+0xa6e>
 8007b8a:	f019 0f01 	tst.w	r9, #1
 8007b8e:	d0de      	beq.n	8007b4e <_dtoa_r+0xa6e>
 8007b90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b94:	d1d8      	bne.n	8007b48 <_dtoa_r+0xa68>
 8007b96:	9a01      	ldr	r2, [sp, #4]
 8007b98:	2339      	movs	r3, #57	; 0x39
 8007b9a:	7013      	strb	r3, [r2, #0]
 8007b9c:	462b      	mov	r3, r5
 8007b9e:	461d      	mov	r5, r3
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ba6:	2a39      	cmp	r2, #57	; 0x39
 8007ba8:	d06c      	beq.n	8007c84 <_dtoa_r+0xba4>
 8007baa:	3201      	adds	r2, #1
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	e747      	b.n	8007a40 <_dtoa_r+0x960>
 8007bb0:	2a00      	cmp	r2, #0
 8007bb2:	dd07      	ble.n	8007bc4 <_dtoa_r+0xae4>
 8007bb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bb8:	d0ed      	beq.n	8007b96 <_dtoa_r+0xab6>
 8007bba:	9a01      	ldr	r2, [sp, #4]
 8007bbc:	f109 0301 	add.w	r3, r9, #1
 8007bc0:	7013      	strb	r3, [r2, #0]
 8007bc2:	e73d      	b.n	8007a40 <_dtoa_r+0x960>
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	9a08      	ldr	r2, [sp, #32]
 8007bc8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d043      	beq.n	8007c58 <_dtoa_r+0xb78>
 8007bd0:	4651      	mov	r1, sl
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	220a      	movs	r2, #10
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f000 f9d6 	bl	8007f88 <__multadd>
 8007bdc:	45b8      	cmp	r8, r7
 8007bde:	4682      	mov	sl, r0
 8007be0:	f04f 0300 	mov.w	r3, #0
 8007be4:	f04f 020a 	mov.w	r2, #10
 8007be8:	4641      	mov	r1, r8
 8007bea:	4620      	mov	r0, r4
 8007bec:	d107      	bne.n	8007bfe <_dtoa_r+0xb1e>
 8007bee:	f000 f9cb 	bl	8007f88 <__multadd>
 8007bf2:	4680      	mov	r8, r0
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	9304      	str	r3, [sp, #16]
 8007bfc:	e775      	b.n	8007aea <_dtoa_r+0xa0a>
 8007bfe:	f000 f9c3 	bl	8007f88 <__multadd>
 8007c02:	4639      	mov	r1, r7
 8007c04:	4680      	mov	r8, r0
 8007c06:	2300      	movs	r3, #0
 8007c08:	220a      	movs	r2, #10
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f000 f9bc 	bl	8007f88 <__multadd>
 8007c10:	4607      	mov	r7, r0
 8007c12:	e7f0      	b.n	8007bf6 <_dtoa_r+0xb16>
 8007c14:	9b04      	ldr	r3, [sp, #16]
 8007c16:	9301      	str	r3, [sp, #4]
 8007c18:	9d00      	ldr	r5, [sp, #0]
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4650      	mov	r0, sl
 8007c1e:	f7ff f9d6 	bl	8006fce <quorem>
 8007c22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c26:	9b00      	ldr	r3, [sp, #0]
 8007c28:	f805 9b01 	strb.w	r9, [r5], #1
 8007c2c:	1aea      	subs	r2, r5, r3
 8007c2e:	9b01      	ldr	r3, [sp, #4]
 8007c30:	4293      	cmp	r3, r2
 8007c32:	dd07      	ble.n	8007c44 <_dtoa_r+0xb64>
 8007c34:	4651      	mov	r1, sl
 8007c36:	2300      	movs	r3, #0
 8007c38:	220a      	movs	r2, #10
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 f9a4 	bl	8007f88 <__multadd>
 8007c40:	4682      	mov	sl, r0
 8007c42:	e7ea      	b.n	8007c1a <_dtoa_r+0xb3a>
 8007c44:	9b01      	ldr	r3, [sp, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	bfc8      	it	gt
 8007c4a:	461d      	movgt	r5, r3
 8007c4c:	9b00      	ldr	r3, [sp, #0]
 8007c4e:	bfd8      	it	le
 8007c50:	2501      	movle	r5, #1
 8007c52:	441d      	add	r5, r3
 8007c54:	f04f 0800 	mov.w	r8, #0
 8007c58:	4651      	mov	r1, sl
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f000 fb41 	bl	80082e4 <__lshift>
 8007c62:	4631      	mov	r1, r6
 8007c64:	4682      	mov	sl, r0
 8007c66:	f000 fba9 	bl	80083bc <__mcmp>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	dc96      	bgt.n	8007b9c <_dtoa_r+0xabc>
 8007c6e:	d102      	bne.n	8007c76 <_dtoa_r+0xb96>
 8007c70:	f019 0f01 	tst.w	r9, #1
 8007c74:	d192      	bne.n	8007b9c <_dtoa_r+0xabc>
 8007c76:	462b      	mov	r3, r5
 8007c78:	461d      	mov	r5, r3
 8007c7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c7e:	2a30      	cmp	r2, #48	; 0x30
 8007c80:	d0fa      	beq.n	8007c78 <_dtoa_r+0xb98>
 8007c82:	e6dd      	b.n	8007a40 <_dtoa_r+0x960>
 8007c84:	9a00      	ldr	r2, [sp, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d189      	bne.n	8007b9e <_dtoa_r+0xabe>
 8007c8a:	f10b 0b01 	add.w	fp, fp, #1
 8007c8e:	2331      	movs	r3, #49	; 0x31
 8007c90:	e796      	b.n	8007bc0 <_dtoa_r+0xae0>
 8007c92:	4b0a      	ldr	r3, [pc, #40]	; (8007cbc <_dtoa_r+0xbdc>)
 8007c94:	f7ff ba99 	b.w	80071ca <_dtoa_r+0xea>
 8007c98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f47f aa6d 	bne.w	800717a <_dtoa_r+0x9a>
 8007ca0:	4b07      	ldr	r3, [pc, #28]	; (8007cc0 <_dtoa_r+0xbe0>)
 8007ca2:	f7ff ba92 	b.w	80071ca <_dtoa_r+0xea>
 8007ca6:	9b01      	ldr	r3, [sp, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	dcb5      	bgt.n	8007c18 <_dtoa_r+0xb38>
 8007cac:	9b07      	ldr	r3, [sp, #28]
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	f73f aeb1 	bgt.w	8007a16 <_dtoa_r+0x936>
 8007cb4:	e7b0      	b.n	8007c18 <_dtoa_r+0xb38>
 8007cb6:	bf00      	nop
 8007cb8:	0800bfec 	.word	0x0800bfec
 8007cbc:	0800bf4c 	.word	0x0800bf4c
 8007cc0:	0800bf70 	.word	0x0800bf70

08007cc4 <_free_r>:
 8007cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cc6:	2900      	cmp	r1, #0
 8007cc8:	d044      	beq.n	8007d54 <_free_r+0x90>
 8007cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cce:	9001      	str	r0, [sp, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8007cd6:	bfb8      	it	lt
 8007cd8:	18e4      	addlt	r4, r4, r3
 8007cda:	f000 f8e7 	bl	8007eac <__malloc_lock>
 8007cde:	4a1e      	ldr	r2, [pc, #120]	; (8007d58 <_free_r+0x94>)
 8007ce0:	9801      	ldr	r0, [sp, #4]
 8007ce2:	6813      	ldr	r3, [r2, #0]
 8007ce4:	b933      	cbnz	r3, 8007cf4 <_free_r+0x30>
 8007ce6:	6063      	str	r3, [r4, #4]
 8007ce8:	6014      	str	r4, [r2, #0]
 8007cea:	b003      	add	sp, #12
 8007cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cf0:	f000 b8e2 	b.w	8007eb8 <__malloc_unlock>
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	d908      	bls.n	8007d0a <_free_r+0x46>
 8007cf8:	6825      	ldr	r5, [r4, #0]
 8007cfa:	1961      	adds	r1, r4, r5
 8007cfc:	428b      	cmp	r3, r1
 8007cfe:	bf01      	itttt	eq
 8007d00:	6819      	ldreq	r1, [r3, #0]
 8007d02:	685b      	ldreq	r3, [r3, #4]
 8007d04:	1949      	addeq	r1, r1, r5
 8007d06:	6021      	streq	r1, [r4, #0]
 8007d08:	e7ed      	b.n	8007ce6 <_free_r+0x22>
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	b10b      	cbz	r3, 8007d14 <_free_r+0x50>
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	d9fa      	bls.n	8007d0a <_free_r+0x46>
 8007d14:	6811      	ldr	r1, [r2, #0]
 8007d16:	1855      	adds	r5, r2, r1
 8007d18:	42a5      	cmp	r5, r4
 8007d1a:	d10b      	bne.n	8007d34 <_free_r+0x70>
 8007d1c:	6824      	ldr	r4, [r4, #0]
 8007d1e:	4421      	add	r1, r4
 8007d20:	1854      	adds	r4, r2, r1
 8007d22:	42a3      	cmp	r3, r4
 8007d24:	6011      	str	r1, [r2, #0]
 8007d26:	d1e0      	bne.n	8007cea <_free_r+0x26>
 8007d28:	681c      	ldr	r4, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	6053      	str	r3, [r2, #4]
 8007d2e:	440c      	add	r4, r1
 8007d30:	6014      	str	r4, [r2, #0]
 8007d32:	e7da      	b.n	8007cea <_free_r+0x26>
 8007d34:	d902      	bls.n	8007d3c <_free_r+0x78>
 8007d36:	230c      	movs	r3, #12
 8007d38:	6003      	str	r3, [r0, #0]
 8007d3a:	e7d6      	b.n	8007cea <_free_r+0x26>
 8007d3c:	6825      	ldr	r5, [r4, #0]
 8007d3e:	1961      	adds	r1, r4, r5
 8007d40:	428b      	cmp	r3, r1
 8007d42:	bf04      	itt	eq
 8007d44:	6819      	ldreq	r1, [r3, #0]
 8007d46:	685b      	ldreq	r3, [r3, #4]
 8007d48:	6063      	str	r3, [r4, #4]
 8007d4a:	bf04      	itt	eq
 8007d4c:	1949      	addeq	r1, r1, r5
 8007d4e:	6021      	streq	r1, [r4, #0]
 8007d50:	6054      	str	r4, [r2, #4]
 8007d52:	e7ca      	b.n	8007cea <_free_r+0x26>
 8007d54:	b003      	add	sp, #12
 8007d56:	bd30      	pop	{r4, r5, pc}
 8007d58:	200034f8 	.word	0x200034f8

08007d5c <malloc>:
 8007d5c:	4b02      	ldr	r3, [pc, #8]	; (8007d68 <malloc+0xc>)
 8007d5e:	4601      	mov	r1, r0
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	f000 b823 	b.w	8007dac <_malloc_r>
 8007d66:	bf00      	nop
 8007d68:	20002068 	.word	0x20002068

08007d6c <sbrk_aligned>:
 8007d6c:	b570      	push	{r4, r5, r6, lr}
 8007d6e:	4e0e      	ldr	r6, [pc, #56]	; (8007da8 <sbrk_aligned+0x3c>)
 8007d70:	460c      	mov	r4, r1
 8007d72:	6831      	ldr	r1, [r6, #0]
 8007d74:	4605      	mov	r5, r0
 8007d76:	b911      	cbnz	r1, 8007d7e <sbrk_aligned+0x12>
 8007d78:	f000 fe40 	bl	80089fc <_sbrk_r>
 8007d7c:	6030      	str	r0, [r6, #0]
 8007d7e:	4621      	mov	r1, r4
 8007d80:	4628      	mov	r0, r5
 8007d82:	f000 fe3b 	bl	80089fc <_sbrk_r>
 8007d86:	1c43      	adds	r3, r0, #1
 8007d88:	d00a      	beq.n	8007da0 <sbrk_aligned+0x34>
 8007d8a:	1cc4      	adds	r4, r0, #3
 8007d8c:	f024 0403 	bic.w	r4, r4, #3
 8007d90:	42a0      	cmp	r0, r4
 8007d92:	d007      	beq.n	8007da4 <sbrk_aligned+0x38>
 8007d94:	1a21      	subs	r1, r4, r0
 8007d96:	4628      	mov	r0, r5
 8007d98:	f000 fe30 	bl	80089fc <_sbrk_r>
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d101      	bne.n	8007da4 <sbrk_aligned+0x38>
 8007da0:	f04f 34ff 	mov.w	r4, #4294967295
 8007da4:	4620      	mov	r0, r4
 8007da6:	bd70      	pop	{r4, r5, r6, pc}
 8007da8:	200034fc 	.word	0x200034fc

08007dac <_malloc_r>:
 8007dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007db0:	1ccd      	adds	r5, r1, #3
 8007db2:	f025 0503 	bic.w	r5, r5, #3
 8007db6:	3508      	adds	r5, #8
 8007db8:	2d0c      	cmp	r5, #12
 8007dba:	bf38      	it	cc
 8007dbc:	250c      	movcc	r5, #12
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	db01      	blt.n	8007dc8 <_malloc_r+0x1c>
 8007dc4:	42a9      	cmp	r1, r5
 8007dc6:	d905      	bls.n	8007dd4 <_malloc_r+0x28>
 8007dc8:	230c      	movs	r3, #12
 8007dca:	603b      	str	r3, [r7, #0]
 8007dcc:	2600      	movs	r6, #0
 8007dce:	4630      	mov	r0, r6
 8007dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ea8 <_malloc_r+0xfc>
 8007dd8:	f000 f868 	bl	8007eac <__malloc_lock>
 8007ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8007de0:	461c      	mov	r4, r3
 8007de2:	bb5c      	cbnz	r4, 8007e3c <_malloc_r+0x90>
 8007de4:	4629      	mov	r1, r5
 8007de6:	4638      	mov	r0, r7
 8007de8:	f7ff ffc0 	bl	8007d6c <sbrk_aligned>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	4604      	mov	r4, r0
 8007df0:	d155      	bne.n	8007e9e <_malloc_r+0xf2>
 8007df2:	f8d8 4000 	ldr.w	r4, [r8]
 8007df6:	4626      	mov	r6, r4
 8007df8:	2e00      	cmp	r6, #0
 8007dfa:	d145      	bne.n	8007e88 <_malloc_r+0xdc>
 8007dfc:	2c00      	cmp	r4, #0
 8007dfe:	d048      	beq.n	8007e92 <_malloc_r+0xe6>
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	4631      	mov	r1, r6
 8007e04:	4638      	mov	r0, r7
 8007e06:	eb04 0903 	add.w	r9, r4, r3
 8007e0a:	f000 fdf7 	bl	80089fc <_sbrk_r>
 8007e0e:	4581      	cmp	r9, r0
 8007e10:	d13f      	bne.n	8007e92 <_malloc_r+0xe6>
 8007e12:	6821      	ldr	r1, [r4, #0]
 8007e14:	1a6d      	subs	r5, r5, r1
 8007e16:	4629      	mov	r1, r5
 8007e18:	4638      	mov	r0, r7
 8007e1a:	f7ff ffa7 	bl	8007d6c <sbrk_aligned>
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d037      	beq.n	8007e92 <_malloc_r+0xe6>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	442b      	add	r3, r5
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	f8d8 3000 	ldr.w	r3, [r8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d038      	beq.n	8007ea2 <_malloc_r+0xf6>
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	42a2      	cmp	r2, r4
 8007e34:	d12b      	bne.n	8007e8e <_malloc_r+0xe2>
 8007e36:	2200      	movs	r2, #0
 8007e38:	605a      	str	r2, [r3, #4]
 8007e3a:	e00f      	b.n	8007e5c <_malloc_r+0xb0>
 8007e3c:	6822      	ldr	r2, [r4, #0]
 8007e3e:	1b52      	subs	r2, r2, r5
 8007e40:	d41f      	bmi.n	8007e82 <_malloc_r+0xd6>
 8007e42:	2a0b      	cmp	r2, #11
 8007e44:	d917      	bls.n	8007e76 <_malloc_r+0xca>
 8007e46:	1961      	adds	r1, r4, r5
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	6025      	str	r5, [r4, #0]
 8007e4c:	bf18      	it	ne
 8007e4e:	6059      	strne	r1, [r3, #4]
 8007e50:	6863      	ldr	r3, [r4, #4]
 8007e52:	bf08      	it	eq
 8007e54:	f8c8 1000 	streq.w	r1, [r8]
 8007e58:	5162      	str	r2, [r4, r5]
 8007e5a:	604b      	str	r3, [r1, #4]
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	f104 060b 	add.w	r6, r4, #11
 8007e62:	f000 f829 	bl	8007eb8 <__malloc_unlock>
 8007e66:	f026 0607 	bic.w	r6, r6, #7
 8007e6a:	1d23      	adds	r3, r4, #4
 8007e6c:	1af2      	subs	r2, r6, r3
 8007e6e:	d0ae      	beq.n	8007dce <_malloc_r+0x22>
 8007e70:	1b9b      	subs	r3, r3, r6
 8007e72:	50a3      	str	r3, [r4, r2]
 8007e74:	e7ab      	b.n	8007dce <_malloc_r+0x22>
 8007e76:	42a3      	cmp	r3, r4
 8007e78:	6862      	ldr	r2, [r4, #4]
 8007e7a:	d1dd      	bne.n	8007e38 <_malloc_r+0x8c>
 8007e7c:	f8c8 2000 	str.w	r2, [r8]
 8007e80:	e7ec      	b.n	8007e5c <_malloc_r+0xb0>
 8007e82:	4623      	mov	r3, r4
 8007e84:	6864      	ldr	r4, [r4, #4]
 8007e86:	e7ac      	b.n	8007de2 <_malloc_r+0x36>
 8007e88:	4634      	mov	r4, r6
 8007e8a:	6876      	ldr	r6, [r6, #4]
 8007e8c:	e7b4      	b.n	8007df8 <_malloc_r+0x4c>
 8007e8e:	4613      	mov	r3, r2
 8007e90:	e7cc      	b.n	8007e2c <_malloc_r+0x80>
 8007e92:	230c      	movs	r3, #12
 8007e94:	603b      	str	r3, [r7, #0]
 8007e96:	4638      	mov	r0, r7
 8007e98:	f000 f80e 	bl	8007eb8 <__malloc_unlock>
 8007e9c:	e797      	b.n	8007dce <_malloc_r+0x22>
 8007e9e:	6025      	str	r5, [r4, #0]
 8007ea0:	e7dc      	b.n	8007e5c <_malloc_r+0xb0>
 8007ea2:	605b      	str	r3, [r3, #4]
 8007ea4:	deff      	udf	#255	; 0xff
 8007ea6:	bf00      	nop
 8007ea8:	200034f8 	.word	0x200034f8

08007eac <__malloc_lock>:
 8007eac:	4801      	ldr	r0, [pc, #4]	; (8007eb4 <__malloc_lock+0x8>)
 8007eae:	f7ff b87e 	b.w	8006fae <__retarget_lock_acquire_recursive>
 8007eb2:	bf00      	nop
 8007eb4:	200034f4 	.word	0x200034f4

08007eb8 <__malloc_unlock>:
 8007eb8:	4801      	ldr	r0, [pc, #4]	; (8007ec0 <__malloc_unlock+0x8>)
 8007eba:	f7ff b879 	b.w	8006fb0 <__retarget_lock_release_recursive>
 8007ebe:	bf00      	nop
 8007ec0:	200034f4 	.word	0x200034f4

08007ec4 <_Balloc>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	69c6      	ldr	r6, [r0, #28]
 8007ec8:	4604      	mov	r4, r0
 8007eca:	460d      	mov	r5, r1
 8007ecc:	b976      	cbnz	r6, 8007eec <_Balloc+0x28>
 8007ece:	2010      	movs	r0, #16
 8007ed0:	f7ff ff44 	bl	8007d5c <malloc>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	61e0      	str	r0, [r4, #28]
 8007ed8:	b920      	cbnz	r0, 8007ee4 <_Balloc+0x20>
 8007eda:	4b18      	ldr	r3, [pc, #96]	; (8007f3c <_Balloc+0x78>)
 8007edc:	4818      	ldr	r0, [pc, #96]	; (8007f40 <_Balloc+0x7c>)
 8007ede:	216b      	movs	r1, #107	; 0x6b
 8007ee0:	f000 fd9c 	bl	8008a1c <__assert_func>
 8007ee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ee8:	6006      	str	r6, [r0, #0]
 8007eea:	60c6      	str	r6, [r0, #12]
 8007eec:	69e6      	ldr	r6, [r4, #28]
 8007eee:	68f3      	ldr	r3, [r6, #12]
 8007ef0:	b183      	cbz	r3, 8007f14 <_Balloc+0x50>
 8007ef2:	69e3      	ldr	r3, [r4, #28]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007efa:	b9b8      	cbnz	r0, 8007f2c <_Balloc+0x68>
 8007efc:	2101      	movs	r1, #1
 8007efe:	fa01 f605 	lsl.w	r6, r1, r5
 8007f02:	1d72      	adds	r2, r6, #5
 8007f04:	0092      	lsls	r2, r2, #2
 8007f06:	4620      	mov	r0, r4
 8007f08:	f000 fda6 	bl	8008a58 <_calloc_r>
 8007f0c:	b160      	cbz	r0, 8007f28 <_Balloc+0x64>
 8007f0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f12:	e00e      	b.n	8007f32 <_Balloc+0x6e>
 8007f14:	2221      	movs	r2, #33	; 0x21
 8007f16:	2104      	movs	r1, #4
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 fd9d 	bl	8008a58 <_calloc_r>
 8007f1e:	69e3      	ldr	r3, [r4, #28]
 8007f20:	60f0      	str	r0, [r6, #12]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e4      	bne.n	8007ef2 <_Balloc+0x2e>
 8007f28:	2000      	movs	r0, #0
 8007f2a:	bd70      	pop	{r4, r5, r6, pc}
 8007f2c:	6802      	ldr	r2, [r0, #0]
 8007f2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f32:	2300      	movs	r3, #0
 8007f34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f38:	e7f7      	b.n	8007f2a <_Balloc+0x66>
 8007f3a:	bf00      	nop
 8007f3c:	0800bf7d 	.word	0x0800bf7d
 8007f40:	0800bffd 	.word	0x0800bffd

08007f44 <_Bfree>:
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	69c6      	ldr	r6, [r0, #28]
 8007f48:	4605      	mov	r5, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	b976      	cbnz	r6, 8007f6c <_Bfree+0x28>
 8007f4e:	2010      	movs	r0, #16
 8007f50:	f7ff ff04 	bl	8007d5c <malloc>
 8007f54:	4602      	mov	r2, r0
 8007f56:	61e8      	str	r0, [r5, #28]
 8007f58:	b920      	cbnz	r0, 8007f64 <_Bfree+0x20>
 8007f5a:	4b09      	ldr	r3, [pc, #36]	; (8007f80 <_Bfree+0x3c>)
 8007f5c:	4809      	ldr	r0, [pc, #36]	; (8007f84 <_Bfree+0x40>)
 8007f5e:	218f      	movs	r1, #143	; 0x8f
 8007f60:	f000 fd5c 	bl	8008a1c <__assert_func>
 8007f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f68:	6006      	str	r6, [r0, #0]
 8007f6a:	60c6      	str	r6, [r0, #12]
 8007f6c:	b13c      	cbz	r4, 8007f7e <_Bfree+0x3a>
 8007f6e:	69eb      	ldr	r3, [r5, #28]
 8007f70:	6862      	ldr	r2, [r4, #4]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f78:	6021      	str	r1, [r4, #0]
 8007f7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	0800bf7d 	.word	0x0800bf7d
 8007f84:	0800bffd 	.word	0x0800bffd

08007f88 <__multadd>:
 8007f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f8c:	690d      	ldr	r5, [r1, #16]
 8007f8e:	4607      	mov	r7, r0
 8007f90:	460c      	mov	r4, r1
 8007f92:	461e      	mov	r6, r3
 8007f94:	f101 0c14 	add.w	ip, r1, #20
 8007f98:	2000      	movs	r0, #0
 8007f9a:	f8dc 3000 	ldr.w	r3, [ip]
 8007f9e:	b299      	uxth	r1, r3
 8007fa0:	fb02 6101 	mla	r1, r2, r1, r6
 8007fa4:	0c1e      	lsrs	r6, r3, #16
 8007fa6:	0c0b      	lsrs	r3, r1, #16
 8007fa8:	fb02 3306 	mla	r3, r2, r6, r3
 8007fac:	b289      	uxth	r1, r1
 8007fae:	3001      	adds	r0, #1
 8007fb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fb4:	4285      	cmp	r5, r0
 8007fb6:	f84c 1b04 	str.w	r1, [ip], #4
 8007fba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fbe:	dcec      	bgt.n	8007f9a <__multadd+0x12>
 8007fc0:	b30e      	cbz	r6, 8008006 <__multadd+0x7e>
 8007fc2:	68a3      	ldr	r3, [r4, #8]
 8007fc4:	42ab      	cmp	r3, r5
 8007fc6:	dc19      	bgt.n	8007ffc <__multadd+0x74>
 8007fc8:	6861      	ldr	r1, [r4, #4]
 8007fca:	4638      	mov	r0, r7
 8007fcc:	3101      	adds	r1, #1
 8007fce:	f7ff ff79 	bl	8007ec4 <_Balloc>
 8007fd2:	4680      	mov	r8, r0
 8007fd4:	b928      	cbnz	r0, 8007fe2 <__multadd+0x5a>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	4b0c      	ldr	r3, [pc, #48]	; (800800c <__multadd+0x84>)
 8007fda:	480d      	ldr	r0, [pc, #52]	; (8008010 <__multadd+0x88>)
 8007fdc:	21ba      	movs	r1, #186	; 0xba
 8007fde:	f000 fd1d 	bl	8008a1c <__assert_func>
 8007fe2:	6922      	ldr	r2, [r4, #16]
 8007fe4:	3202      	adds	r2, #2
 8007fe6:	f104 010c 	add.w	r1, r4, #12
 8007fea:	0092      	lsls	r2, r2, #2
 8007fec:	300c      	adds	r0, #12
 8007fee:	f7fe ffe0 	bl	8006fb2 <memcpy>
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	f7ff ffa5 	bl	8007f44 <_Bfree>
 8007ffa:	4644      	mov	r4, r8
 8007ffc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008000:	3501      	adds	r5, #1
 8008002:	615e      	str	r6, [r3, #20]
 8008004:	6125      	str	r5, [r4, #16]
 8008006:	4620      	mov	r0, r4
 8008008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800800c:	0800bfec 	.word	0x0800bfec
 8008010:	0800bffd 	.word	0x0800bffd

08008014 <__hi0bits>:
 8008014:	0c03      	lsrs	r3, r0, #16
 8008016:	041b      	lsls	r3, r3, #16
 8008018:	b9d3      	cbnz	r3, 8008050 <__hi0bits+0x3c>
 800801a:	0400      	lsls	r0, r0, #16
 800801c:	2310      	movs	r3, #16
 800801e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008022:	bf04      	itt	eq
 8008024:	0200      	lsleq	r0, r0, #8
 8008026:	3308      	addeq	r3, #8
 8008028:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800802c:	bf04      	itt	eq
 800802e:	0100      	lsleq	r0, r0, #4
 8008030:	3304      	addeq	r3, #4
 8008032:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008036:	bf04      	itt	eq
 8008038:	0080      	lsleq	r0, r0, #2
 800803a:	3302      	addeq	r3, #2
 800803c:	2800      	cmp	r0, #0
 800803e:	db05      	blt.n	800804c <__hi0bits+0x38>
 8008040:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008044:	f103 0301 	add.w	r3, r3, #1
 8008048:	bf08      	it	eq
 800804a:	2320      	moveq	r3, #32
 800804c:	4618      	mov	r0, r3
 800804e:	4770      	bx	lr
 8008050:	2300      	movs	r3, #0
 8008052:	e7e4      	b.n	800801e <__hi0bits+0xa>

08008054 <__lo0bits>:
 8008054:	6803      	ldr	r3, [r0, #0]
 8008056:	f013 0207 	ands.w	r2, r3, #7
 800805a:	d00c      	beq.n	8008076 <__lo0bits+0x22>
 800805c:	07d9      	lsls	r1, r3, #31
 800805e:	d422      	bmi.n	80080a6 <__lo0bits+0x52>
 8008060:	079a      	lsls	r2, r3, #30
 8008062:	bf49      	itett	mi
 8008064:	085b      	lsrmi	r3, r3, #1
 8008066:	089b      	lsrpl	r3, r3, #2
 8008068:	6003      	strmi	r3, [r0, #0]
 800806a:	2201      	movmi	r2, #1
 800806c:	bf5c      	itt	pl
 800806e:	6003      	strpl	r3, [r0, #0]
 8008070:	2202      	movpl	r2, #2
 8008072:	4610      	mov	r0, r2
 8008074:	4770      	bx	lr
 8008076:	b299      	uxth	r1, r3
 8008078:	b909      	cbnz	r1, 800807e <__lo0bits+0x2a>
 800807a:	0c1b      	lsrs	r3, r3, #16
 800807c:	2210      	movs	r2, #16
 800807e:	b2d9      	uxtb	r1, r3
 8008080:	b909      	cbnz	r1, 8008086 <__lo0bits+0x32>
 8008082:	3208      	adds	r2, #8
 8008084:	0a1b      	lsrs	r3, r3, #8
 8008086:	0719      	lsls	r1, r3, #28
 8008088:	bf04      	itt	eq
 800808a:	091b      	lsreq	r3, r3, #4
 800808c:	3204      	addeq	r2, #4
 800808e:	0799      	lsls	r1, r3, #30
 8008090:	bf04      	itt	eq
 8008092:	089b      	lsreq	r3, r3, #2
 8008094:	3202      	addeq	r2, #2
 8008096:	07d9      	lsls	r1, r3, #31
 8008098:	d403      	bmi.n	80080a2 <__lo0bits+0x4e>
 800809a:	085b      	lsrs	r3, r3, #1
 800809c:	f102 0201 	add.w	r2, r2, #1
 80080a0:	d003      	beq.n	80080aa <__lo0bits+0x56>
 80080a2:	6003      	str	r3, [r0, #0]
 80080a4:	e7e5      	b.n	8008072 <__lo0bits+0x1e>
 80080a6:	2200      	movs	r2, #0
 80080a8:	e7e3      	b.n	8008072 <__lo0bits+0x1e>
 80080aa:	2220      	movs	r2, #32
 80080ac:	e7e1      	b.n	8008072 <__lo0bits+0x1e>
	...

080080b0 <__i2b>:
 80080b0:	b510      	push	{r4, lr}
 80080b2:	460c      	mov	r4, r1
 80080b4:	2101      	movs	r1, #1
 80080b6:	f7ff ff05 	bl	8007ec4 <_Balloc>
 80080ba:	4602      	mov	r2, r0
 80080bc:	b928      	cbnz	r0, 80080ca <__i2b+0x1a>
 80080be:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <__i2b+0x24>)
 80080c0:	4805      	ldr	r0, [pc, #20]	; (80080d8 <__i2b+0x28>)
 80080c2:	f240 1145 	movw	r1, #325	; 0x145
 80080c6:	f000 fca9 	bl	8008a1c <__assert_func>
 80080ca:	2301      	movs	r3, #1
 80080cc:	6144      	str	r4, [r0, #20]
 80080ce:	6103      	str	r3, [r0, #16]
 80080d0:	bd10      	pop	{r4, pc}
 80080d2:	bf00      	nop
 80080d4:	0800bfec 	.word	0x0800bfec
 80080d8:	0800bffd 	.word	0x0800bffd

080080dc <__multiply>:
 80080dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	4691      	mov	r9, r2
 80080e2:	690a      	ldr	r2, [r1, #16]
 80080e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	bfb8      	it	lt
 80080ec:	460b      	movlt	r3, r1
 80080ee:	460c      	mov	r4, r1
 80080f0:	bfbc      	itt	lt
 80080f2:	464c      	movlt	r4, r9
 80080f4:	4699      	movlt	r9, r3
 80080f6:	6927      	ldr	r7, [r4, #16]
 80080f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80080fc:	68a3      	ldr	r3, [r4, #8]
 80080fe:	6861      	ldr	r1, [r4, #4]
 8008100:	eb07 060a 	add.w	r6, r7, sl
 8008104:	42b3      	cmp	r3, r6
 8008106:	b085      	sub	sp, #20
 8008108:	bfb8      	it	lt
 800810a:	3101      	addlt	r1, #1
 800810c:	f7ff feda 	bl	8007ec4 <_Balloc>
 8008110:	b930      	cbnz	r0, 8008120 <__multiply+0x44>
 8008112:	4602      	mov	r2, r0
 8008114:	4b44      	ldr	r3, [pc, #272]	; (8008228 <__multiply+0x14c>)
 8008116:	4845      	ldr	r0, [pc, #276]	; (800822c <__multiply+0x150>)
 8008118:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800811c:	f000 fc7e 	bl	8008a1c <__assert_func>
 8008120:	f100 0514 	add.w	r5, r0, #20
 8008124:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008128:	462b      	mov	r3, r5
 800812a:	2200      	movs	r2, #0
 800812c:	4543      	cmp	r3, r8
 800812e:	d321      	bcc.n	8008174 <__multiply+0x98>
 8008130:	f104 0314 	add.w	r3, r4, #20
 8008134:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008138:	f109 0314 	add.w	r3, r9, #20
 800813c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008140:	9202      	str	r2, [sp, #8]
 8008142:	1b3a      	subs	r2, r7, r4
 8008144:	3a15      	subs	r2, #21
 8008146:	f022 0203 	bic.w	r2, r2, #3
 800814a:	3204      	adds	r2, #4
 800814c:	f104 0115 	add.w	r1, r4, #21
 8008150:	428f      	cmp	r7, r1
 8008152:	bf38      	it	cc
 8008154:	2204      	movcc	r2, #4
 8008156:	9201      	str	r2, [sp, #4]
 8008158:	9a02      	ldr	r2, [sp, #8]
 800815a:	9303      	str	r3, [sp, #12]
 800815c:	429a      	cmp	r2, r3
 800815e:	d80c      	bhi.n	800817a <__multiply+0x9e>
 8008160:	2e00      	cmp	r6, #0
 8008162:	dd03      	ble.n	800816c <__multiply+0x90>
 8008164:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008168:	2b00      	cmp	r3, #0
 800816a:	d05b      	beq.n	8008224 <__multiply+0x148>
 800816c:	6106      	str	r6, [r0, #16]
 800816e:	b005      	add	sp, #20
 8008170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008174:	f843 2b04 	str.w	r2, [r3], #4
 8008178:	e7d8      	b.n	800812c <__multiply+0x50>
 800817a:	f8b3 a000 	ldrh.w	sl, [r3]
 800817e:	f1ba 0f00 	cmp.w	sl, #0
 8008182:	d024      	beq.n	80081ce <__multiply+0xf2>
 8008184:	f104 0e14 	add.w	lr, r4, #20
 8008188:	46a9      	mov	r9, r5
 800818a:	f04f 0c00 	mov.w	ip, #0
 800818e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008192:	f8d9 1000 	ldr.w	r1, [r9]
 8008196:	fa1f fb82 	uxth.w	fp, r2
 800819a:	b289      	uxth	r1, r1
 800819c:	fb0a 110b 	mla	r1, sl, fp, r1
 80081a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80081a4:	f8d9 2000 	ldr.w	r2, [r9]
 80081a8:	4461      	add	r1, ip
 80081aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80081b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081b6:	b289      	uxth	r1, r1
 80081b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081bc:	4577      	cmp	r7, lr
 80081be:	f849 1b04 	str.w	r1, [r9], #4
 80081c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081c6:	d8e2      	bhi.n	800818e <__multiply+0xb2>
 80081c8:	9a01      	ldr	r2, [sp, #4]
 80081ca:	f845 c002 	str.w	ip, [r5, r2]
 80081ce:	9a03      	ldr	r2, [sp, #12]
 80081d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081d4:	3304      	adds	r3, #4
 80081d6:	f1b9 0f00 	cmp.w	r9, #0
 80081da:	d021      	beq.n	8008220 <__multiply+0x144>
 80081dc:	6829      	ldr	r1, [r5, #0]
 80081de:	f104 0c14 	add.w	ip, r4, #20
 80081e2:	46ae      	mov	lr, r5
 80081e4:	f04f 0a00 	mov.w	sl, #0
 80081e8:	f8bc b000 	ldrh.w	fp, [ip]
 80081ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80081f0:	fb09 220b 	mla	r2, r9, fp, r2
 80081f4:	4452      	add	r2, sl
 80081f6:	b289      	uxth	r1, r1
 80081f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081fc:	f84e 1b04 	str.w	r1, [lr], #4
 8008200:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008204:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008208:	f8be 1000 	ldrh.w	r1, [lr]
 800820c:	fb09 110a 	mla	r1, r9, sl, r1
 8008210:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008214:	4567      	cmp	r7, ip
 8008216:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800821a:	d8e5      	bhi.n	80081e8 <__multiply+0x10c>
 800821c:	9a01      	ldr	r2, [sp, #4]
 800821e:	50a9      	str	r1, [r5, r2]
 8008220:	3504      	adds	r5, #4
 8008222:	e799      	b.n	8008158 <__multiply+0x7c>
 8008224:	3e01      	subs	r6, #1
 8008226:	e79b      	b.n	8008160 <__multiply+0x84>
 8008228:	0800bfec 	.word	0x0800bfec
 800822c:	0800bffd 	.word	0x0800bffd

08008230 <__pow5mult>:
 8008230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008234:	4615      	mov	r5, r2
 8008236:	f012 0203 	ands.w	r2, r2, #3
 800823a:	4606      	mov	r6, r0
 800823c:	460f      	mov	r7, r1
 800823e:	d007      	beq.n	8008250 <__pow5mult+0x20>
 8008240:	4c25      	ldr	r4, [pc, #148]	; (80082d8 <__pow5mult+0xa8>)
 8008242:	3a01      	subs	r2, #1
 8008244:	2300      	movs	r3, #0
 8008246:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800824a:	f7ff fe9d 	bl	8007f88 <__multadd>
 800824e:	4607      	mov	r7, r0
 8008250:	10ad      	asrs	r5, r5, #2
 8008252:	d03d      	beq.n	80082d0 <__pow5mult+0xa0>
 8008254:	69f4      	ldr	r4, [r6, #28]
 8008256:	b97c      	cbnz	r4, 8008278 <__pow5mult+0x48>
 8008258:	2010      	movs	r0, #16
 800825a:	f7ff fd7f 	bl	8007d5c <malloc>
 800825e:	4602      	mov	r2, r0
 8008260:	61f0      	str	r0, [r6, #28]
 8008262:	b928      	cbnz	r0, 8008270 <__pow5mult+0x40>
 8008264:	4b1d      	ldr	r3, [pc, #116]	; (80082dc <__pow5mult+0xac>)
 8008266:	481e      	ldr	r0, [pc, #120]	; (80082e0 <__pow5mult+0xb0>)
 8008268:	f240 11b3 	movw	r1, #435	; 0x1b3
 800826c:	f000 fbd6 	bl	8008a1c <__assert_func>
 8008270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008274:	6004      	str	r4, [r0, #0]
 8008276:	60c4      	str	r4, [r0, #12]
 8008278:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800827c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008280:	b94c      	cbnz	r4, 8008296 <__pow5mult+0x66>
 8008282:	f240 2171 	movw	r1, #625	; 0x271
 8008286:	4630      	mov	r0, r6
 8008288:	f7ff ff12 	bl	80080b0 <__i2b>
 800828c:	2300      	movs	r3, #0
 800828e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008292:	4604      	mov	r4, r0
 8008294:	6003      	str	r3, [r0, #0]
 8008296:	f04f 0900 	mov.w	r9, #0
 800829a:	07eb      	lsls	r3, r5, #31
 800829c:	d50a      	bpl.n	80082b4 <__pow5mult+0x84>
 800829e:	4639      	mov	r1, r7
 80082a0:	4622      	mov	r2, r4
 80082a2:	4630      	mov	r0, r6
 80082a4:	f7ff ff1a 	bl	80080dc <__multiply>
 80082a8:	4639      	mov	r1, r7
 80082aa:	4680      	mov	r8, r0
 80082ac:	4630      	mov	r0, r6
 80082ae:	f7ff fe49 	bl	8007f44 <_Bfree>
 80082b2:	4647      	mov	r7, r8
 80082b4:	106d      	asrs	r5, r5, #1
 80082b6:	d00b      	beq.n	80082d0 <__pow5mult+0xa0>
 80082b8:	6820      	ldr	r0, [r4, #0]
 80082ba:	b938      	cbnz	r0, 80082cc <__pow5mult+0x9c>
 80082bc:	4622      	mov	r2, r4
 80082be:	4621      	mov	r1, r4
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7ff ff0b 	bl	80080dc <__multiply>
 80082c6:	6020      	str	r0, [r4, #0]
 80082c8:	f8c0 9000 	str.w	r9, [r0]
 80082cc:	4604      	mov	r4, r0
 80082ce:	e7e4      	b.n	800829a <__pow5mult+0x6a>
 80082d0:	4638      	mov	r0, r7
 80082d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082d6:	bf00      	nop
 80082d8:	0800c148 	.word	0x0800c148
 80082dc:	0800bf7d 	.word	0x0800bf7d
 80082e0:	0800bffd 	.word	0x0800bffd

080082e4 <__lshift>:
 80082e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e8:	460c      	mov	r4, r1
 80082ea:	6849      	ldr	r1, [r1, #4]
 80082ec:	6923      	ldr	r3, [r4, #16]
 80082ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082f2:	68a3      	ldr	r3, [r4, #8]
 80082f4:	4607      	mov	r7, r0
 80082f6:	4691      	mov	r9, r2
 80082f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082fc:	f108 0601 	add.w	r6, r8, #1
 8008300:	42b3      	cmp	r3, r6
 8008302:	db0b      	blt.n	800831c <__lshift+0x38>
 8008304:	4638      	mov	r0, r7
 8008306:	f7ff fddd 	bl	8007ec4 <_Balloc>
 800830a:	4605      	mov	r5, r0
 800830c:	b948      	cbnz	r0, 8008322 <__lshift+0x3e>
 800830e:	4602      	mov	r2, r0
 8008310:	4b28      	ldr	r3, [pc, #160]	; (80083b4 <__lshift+0xd0>)
 8008312:	4829      	ldr	r0, [pc, #164]	; (80083b8 <__lshift+0xd4>)
 8008314:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008318:	f000 fb80 	bl	8008a1c <__assert_func>
 800831c:	3101      	adds	r1, #1
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	e7ee      	b.n	8008300 <__lshift+0x1c>
 8008322:	2300      	movs	r3, #0
 8008324:	f100 0114 	add.w	r1, r0, #20
 8008328:	f100 0210 	add.w	r2, r0, #16
 800832c:	4618      	mov	r0, r3
 800832e:	4553      	cmp	r3, sl
 8008330:	db33      	blt.n	800839a <__lshift+0xb6>
 8008332:	6920      	ldr	r0, [r4, #16]
 8008334:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008338:	f104 0314 	add.w	r3, r4, #20
 800833c:	f019 091f 	ands.w	r9, r9, #31
 8008340:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008344:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008348:	d02b      	beq.n	80083a2 <__lshift+0xbe>
 800834a:	f1c9 0e20 	rsb	lr, r9, #32
 800834e:	468a      	mov	sl, r1
 8008350:	2200      	movs	r2, #0
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	fa00 f009 	lsl.w	r0, r0, r9
 8008358:	4310      	orrs	r0, r2
 800835a:	f84a 0b04 	str.w	r0, [sl], #4
 800835e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008362:	459c      	cmp	ip, r3
 8008364:	fa22 f20e 	lsr.w	r2, r2, lr
 8008368:	d8f3      	bhi.n	8008352 <__lshift+0x6e>
 800836a:	ebac 0304 	sub.w	r3, ip, r4
 800836e:	3b15      	subs	r3, #21
 8008370:	f023 0303 	bic.w	r3, r3, #3
 8008374:	3304      	adds	r3, #4
 8008376:	f104 0015 	add.w	r0, r4, #21
 800837a:	4584      	cmp	ip, r0
 800837c:	bf38      	it	cc
 800837e:	2304      	movcc	r3, #4
 8008380:	50ca      	str	r2, [r1, r3]
 8008382:	b10a      	cbz	r2, 8008388 <__lshift+0xa4>
 8008384:	f108 0602 	add.w	r6, r8, #2
 8008388:	3e01      	subs	r6, #1
 800838a:	4638      	mov	r0, r7
 800838c:	612e      	str	r6, [r5, #16]
 800838e:	4621      	mov	r1, r4
 8008390:	f7ff fdd8 	bl	8007f44 <_Bfree>
 8008394:	4628      	mov	r0, r5
 8008396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839a:	f842 0f04 	str.w	r0, [r2, #4]!
 800839e:	3301      	adds	r3, #1
 80083a0:	e7c5      	b.n	800832e <__lshift+0x4a>
 80083a2:	3904      	subs	r1, #4
 80083a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80083ac:	459c      	cmp	ip, r3
 80083ae:	d8f9      	bhi.n	80083a4 <__lshift+0xc0>
 80083b0:	e7ea      	b.n	8008388 <__lshift+0xa4>
 80083b2:	bf00      	nop
 80083b4:	0800bfec 	.word	0x0800bfec
 80083b8:	0800bffd 	.word	0x0800bffd

080083bc <__mcmp>:
 80083bc:	b530      	push	{r4, r5, lr}
 80083be:	6902      	ldr	r2, [r0, #16]
 80083c0:	690c      	ldr	r4, [r1, #16]
 80083c2:	1b12      	subs	r2, r2, r4
 80083c4:	d10e      	bne.n	80083e4 <__mcmp+0x28>
 80083c6:	f100 0314 	add.w	r3, r0, #20
 80083ca:	3114      	adds	r1, #20
 80083cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80083d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80083d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80083d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80083dc:	42a5      	cmp	r5, r4
 80083de:	d003      	beq.n	80083e8 <__mcmp+0x2c>
 80083e0:	d305      	bcc.n	80083ee <__mcmp+0x32>
 80083e2:	2201      	movs	r2, #1
 80083e4:	4610      	mov	r0, r2
 80083e6:	bd30      	pop	{r4, r5, pc}
 80083e8:	4283      	cmp	r3, r0
 80083ea:	d3f3      	bcc.n	80083d4 <__mcmp+0x18>
 80083ec:	e7fa      	b.n	80083e4 <__mcmp+0x28>
 80083ee:	f04f 32ff 	mov.w	r2, #4294967295
 80083f2:	e7f7      	b.n	80083e4 <__mcmp+0x28>

080083f4 <__mdiff>:
 80083f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	460c      	mov	r4, r1
 80083fa:	4606      	mov	r6, r0
 80083fc:	4611      	mov	r1, r2
 80083fe:	4620      	mov	r0, r4
 8008400:	4690      	mov	r8, r2
 8008402:	f7ff ffdb 	bl	80083bc <__mcmp>
 8008406:	1e05      	subs	r5, r0, #0
 8008408:	d110      	bne.n	800842c <__mdiff+0x38>
 800840a:	4629      	mov	r1, r5
 800840c:	4630      	mov	r0, r6
 800840e:	f7ff fd59 	bl	8007ec4 <_Balloc>
 8008412:	b930      	cbnz	r0, 8008422 <__mdiff+0x2e>
 8008414:	4b3a      	ldr	r3, [pc, #232]	; (8008500 <__mdiff+0x10c>)
 8008416:	4602      	mov	r2, r0
 8008418:	f240 2137 	movw	r1, #567	; 0x237
 800841c:	4839      	ldr	r0, [pc, #228]	; (8008504 <__mdiff+0x110>)
 800841e:	f000 fafd 	bl	8008a1c <__assert_func>
 8008422:	2301      	movs	r3, #1
 8008424:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842c:	bfa4      	itt	ge
 800842e:	4643      	movge	r3, r8
 8008430:	46a0      	movge	r8, r4
 8008432:	4630      	mov	r0, r6
 8008434:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008438:	bfa6      	itte	ge
 800843a:	461c      	movge	r4, r3
 800843c:	2500      	movge	r5, #0
 800843e:	2501      	movlt	r5, #1
 8008440:	f7ff fd40 	bl	8007ec4 <_Balloc>
 8008444:	b920      	cbnz	r0, 8008450 <__mdiff+0x5c>
 8008446:	4b2e      	ldr	r3, [pc, #184]	; (8008500 <__mdiff+0x10c>)
 8008448:	4602      	mov	r2, r0
 800844a:	f240 2145 	movw	r1, #581	; 0x245
 800844e:	e7e5      	b.n	800841c <__mdiff+0x28>
 8008450:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008454:	6926      	ldr	r6, [r4, #16]
 8008456:	60c5      	str	r5, [r0, #12]
 8008458:	f104 0914 	add.w	r9, r4, #20
 800845c:	f108 0514 	add.w	r5, r8, #20
 8008460:	f100 0e14 	add.w	lr, r0, #20
 8008464:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008468:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800846c:	f108 0210 	add.w	r2, r8, #16
 8008470:	46f2      	mov	sl, lr
 8008472:	2100      	movs	r1, #0
 8008474:	f859 3b04 	ldr.w	r3, [r9], #4
 8008478:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800847c:	fa11 f88b 	uxtah	r8, r1, fp
 8008480:	b299      	uxth	r1, r3
 8008482:	0c1b      	lsrs	r3, r3, #16
 8008484:	eba8 0801 	sub.w	r8, r8, r1
 8008488:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800848c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008490:	fa1f f888 	uxth.w	r8, r8
 8008494:	1419      	asrs	r1, r3, #16
 8008496:	454e      	cmp	r6, r9
 8008498:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800849c:	f84a 3b04 	str.w	r3, [sl], #4
 80084a0:	d8e8      	bhi.n	8008474 <__mdiff+0x80>
 80084a2:	1b33      	subs	r3, r6, r4
 80084a4:	3b15      	subs	r3, #21
 80084a6:	f023 0303 	bic.w	r3, r3, #3
 80084aa:	3304      	adds	r3, #4
 80084ac:	3415      	adds	r4, #21
 80084ae:	42a6      	cmp	r6, r4
 80084b0:	bf38      	it	cc
 80084b2:	2304      	movcc	r3, #4
 80084b4:	441d      	add	r5, r3
 80084b6:	4473      	add	r3, lr
 80084b8:	469e      	mov	lr, r3
 80084ba:	462e      	mov	r6, r5
 80084bc:	4566      	cmp	r6, ip
 80084be:	d30e      	bcc.n	80084de <__mdiff+0xea>
 80084c0:	f10c 0203 	add.w	r2, ip, #3
 80084c4:	1b52      	subs	r2, r2, r5
 80084c6:	f022 0203 	bic.w	r2, r2, #3
 80084ca:	3d03      	subs	r5, #3
 80084cc:	45ac      	cmp	ip, r5
 80084ce:	bf38      	it	cc
 80084d0:	2200      	movcc	r2, #0
 80084d2:	4413      	add	r3, r2
 80084d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80084d8:	b17a      	cbz	r2, 80084fa <__mdiff+0x106>
 80084da:	6107      	str	r7, [r0, #16]
 80084dc:	e7a4      	b.n	8008428 <__mdiff+0x34>
 80084de:	f856 8b04 	ldr.w	r8, [r6], #4
 80084e2:	fa11 f288 	uxtah	r2, r1, r8
 80084e6:	1414      	asrs	r4, r2, #16
 80084e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80084ec:	b292      	uxth	r2, r2
 80084ee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80084f2:	f84e 2b04 	str.w	r2, [lr], #4
 80084f6:	1421      	asrs	r1, r4, #16
 80084f8:	e7e0      	b.n	80084bc <__mdiff+0xc8>
 80084fa:	3f01      	subs	r7, #1
 80084fc:	e7ea      	b.n	80084d4 <__mdiff+0xe0>
 80084fe:	bf00      	nop
 8008500:	0800bfec 	.word	0x0800bfec
 8008504:	0800bffd 	.word	0x0800bffd

08008508 <__d2b>:
 8008508:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800850c:	460f      	mov	r7, r1
 800850e:	2101      	movs	r1, #1
 8008510:	ec59 8b10 	vmov	r8, r9, d0
 8008514:	4616      	mov	r6, r2
 8008516:	f7ff fcd5 	bl	8007ec4 <_Balloc>
 800851a:	4604      	mov	r4, r0
 800851c:	b930      	cbnz	r0, 800852c <__d2b+0x24>
 800851e:	4602      	mov	r2, r0
 8008520:	4b24      	ldr	r3, [pc, #144]	; (80085b4 <__d2b+0xac>)
 8008522:	4825      	ldr	r0, [pc, #148]	; (80085b8 <__d2b+0xb0>)
 8008524:	f240 310f 	movw	r1, #783	; 0x30f
 8008528:	f000 fa78 	bl	8008a1c <__assert_func>
 800852c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008530:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008534:	bb2d      	cbnz	r5, 8008582 <__d2b+0x7a>
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	f1b8 0300 	subs.w	r3, r8, #0
 800853c:	d026      	beq.n	800858c <__d2b+0x84>
 800853e:	4668      	mov	r0, sp
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	f7ff fd87 	bl	8008054 <__lo0bits>
 8008546:	e9dd 1200 	ldrd	r1, r2, [sp]
 800854a:	b1e8      	cbz	r0, 8008588 <__d2b+0x80>
 800854c:	f1c0 0320 	rsb	r3, r0, #32
 8008550:	fa02 f303 	lsl.w	r3, r2, r3
 8008554:	430b      	orrs	r3, r1
 8008556:	40c2      	lsrs	r2, r0
 8008558:	6163      	str	r3, [r4, #20]
 800855a:	9201      	str	r2, [sp, #4]
 800855c:	9b01      	ldr	r3, [sp, #4]
 800855e:	61a3      	str	r3, [r4, #24]
 8008560:	2b00      	cmp	r3, #0
 8008562:	bf14      	ite	ne
 8008564:	2202      	movne	r2, #2
 8008566:	2201      	moveq	r2, #1
 8008568:	6122      	str	r2, [r4, #16]
 800856a:	b1bd      	cbz	r5, 800859c <__d2b+0x94>
 800856c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008570:	4405      	add	r5, r0
 8008572:	603d      	str	r5, [r7, #0]
 8008574:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008578:	6030      	str	r0, [r6, #0]
 800857a:	4620      	mov	r0, r4
 800857c:	b003      	add	sp, #12
 800857e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008586:	e7d6      	b.n	8008536 <__d2b+0x2e>
 8008588:	6161      	str	r1, [r4, #20]
 800858a:	e7e7      	b.n	800855c <__d2b+0x54>
 800858c:	a801      	add	r0, sp, #4
 800858e:	f7ff fd61 	bl	8008054 <__lo0bits>
 8008592:	9b01      	ldr	r3, [sp, #4]
 8008594:	6163      	str	r3, [r4, #20]
 8008596:	3020      	adds	r0, #32
 8008598:	2201      	movs	r2, #1
 800859a:	e7e5      	b.n	8008568 <__d2b+0x60>
 800859c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085a4:	6038      	str	r0, [r7, #0]
 80085a6:	6918      	ldr	r0, [r3, #16]
 80085a8:	f7ff fd34 	bl	8008014 <__hi0bits>
 80085ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085b0:	e7e2      	b.n	8008578 <__d2b+0x70>
 80085b2:	bf00      	nop
 80085b4:	0800bfec 	.word	0x0800bfec
 80085b8:	0800bffd 	.word	0x0800bffd

080085bc <__ssputs_r>:
 80085bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c0:	688e      	ldr	r6, [r1, #8]
 80085c2:	461f      	mov	r7, r3
 80085c4:	42be      	cmp	r6, r7
 80085c6:	680b      	ldr	r3, [r1, #0]
 80085c8:	4682      	mov	sl, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	4690      	mov	r8, r2
 80085ce:	d82c      	bhi.n	800862a <__ssputs_r+0x6e>
 80085d0:	898a      	ldrh	r2, [r1, #12]
 80085d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085d6:	d026      	beq.n	8008626 <__ssputs_r+0x6a>
 80085d8:	6965      	ldr	r5, [r4, #20]
 80085da:	6909      	ldr	r1, [r1, #16]
 80085dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085e0:	eba3 0901 	sub.w	r9, r3, r1
 80085e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085e8:	1c7b      	adds	r3, r7, #1
 80085ea:	444b      	add	r3, r9
 80085ec:	106d      	asrs	r5, r5, #1
 80085ee:	429d      	cmp	r5, r3
 80085f0:	bf38      	it	cc
 80085f2:	461d      	movcc	r5, r3
 80085f4:	0553      	lsls	r3, r2, #21
 80085f6:	d527      	bpl.n	8008648 <__ssputs_r+0x8c>
 80085f8:	4629      	mov	r1, r5
 80085fa:	f7ff fbd7 	bl	8007dac <_malloc_r>
 80085fe:	4606      	mov	r6, r0
 8008600:	b360      	cbz	r0, 800865c <__ssputs_r+0xa0>
 8008602:	6921      	ldr	r1, [r4, #16]
 8008604:	464a      	mov	r2, r9
 8008606:	f7fe fcd4 	bl	8006fb2 <memcpy>
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008614:	81a3      	strh	r3, [r4, #12]
 8008616:	6126      	str	r6, [r4, #16]
 8008618:	6165      	str	r5, [r4, #20]
 800861a:	444e      	add	r6, r9
 800861c:	eba5 0509 	sub.w	r5, r5, r9
 8008620:	6026      	str	r6, [r4, #0]
 8008622:	60a5      	str	r5, [r4, #8]
 8008624:	463e      	mov	r6, r7
 8008626:	42be      	cmp	r6, r7
 8008628:	d900      	bls.n	800862c <__ssputs_r+0x70>
 800862a:	463e      	mov	r6, r7
 800862c:	6820      	ldr	r0, [r4, #0]
 800862e:	4632      	mov	r2, r6
 8008630:	4641      	mov	r1, r8
 8008632:	f000 f9c9 	bl	80089c8 <memmove>
 8008636:	68a3      	ldr	r3, [r4, #8]
 8008638:	1b9b      	subs	r3, r3, r6
 800863a:	60a3      	str	r3, [r4, #8]
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	4433      	add	r3, r6
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	2000      	movs	r0, #0
 8008644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008648:	462a      	mov	r2, r5
 800864a:	f000 fa2d 	bl	8008aa8 <_realloc_r>
 800864e:	4606      	mov	r6, r0
 8008650:	2800      	cmp	r0, #0
 8008652:	d1e0      	bne.n	8008616 <__ssputs_r+0x5a>
 8008654:	6921      	ldr	r1, [r4, #16]
 8008656:	4650      	mov	r0, sl
 8008658:	f7ff fb34 	bl	8007cc4 <_free_r>
 800865c:	230c      	movs	r3, #12
 800865e:	f8ca 3000 	str.w	r3, [sl]
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008668:	81a3      	strh	r3, [r4, #12]
 800866a:	f04f 30ff 	mov.w	r0, #4294967295
 800866e:	e7e9      	b.n	8008644 <__ssputs_r+0x88>

08008670 <_svfiprintf_r>:
 8008670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008674:	4698      	mov	r8, r3
 8008676:	898b      	ldrh	r3, [r1, #12]
 8008678:	061b      	lsls	r3, r3, #24
 800867a:	b09d      	sub	sp, #116	; 0x74
 800867c:	4607      	mov	r7, r0
 800867e:	460d      	mov	r5, r1
 8008680:	4614      	mov	r4, r2
 8008682:	d50e      	bpl.n	80086a2 <_svfiprintf_r+0x32>
 8008684:	690b      	ldr	r3, [r1, #16]
 8008686:	b963      	cbnz	r3, 80086a2 <_svfiprintf_r+0x32>
 8008688:	2140      	movs	r1, #64	; 0x40
 800868a:	f7ff fb8f 	bl	8007dac <_malloc_r>
 800868e:	6028      	str	r0, [r5, #0]
 8008690:	6128      	str	r0, [r5, #16]
 8008692:	b920      	cbnz	r0, 800869e <_svfiprintf_r+0x2e>
 8008694:	230c      	movs	r3, #12
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	f04f 30ff 	mov.w	r0, #4294967295
 800869c:	e0d0      	b.n	8008840 <_svfiprintf_r+0x1d0>
 800869e:	2340      	movs	r3, #64	; 0x40
 80086a0:	616b      	str	r3, [r5, #20]
 80086a2:	2300      	movs	r3, #0
 80086a4:	9309      	str	r3, [sp, #36]	; 0x24
 80086a6:	2320      	movs	r3, #32
 80086a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80086b0:	2330      	movs	r3, #48	; 0x30
 80086b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008858 <_svfiprintf_r+0x1e8>
 80086b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086ba:	f04f 0901 	mov.w	r9, #1
 80086be:	4623      	mov	r3, r4
 80086c0:	469a      	mov	sl, r3
 80086c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086c6:	b10a      	cbz	r2, 80086cc <_svfiprintf_r+0x5c>
 80086c8:	2a25      	cmp	r2, #37	; 0x25
 80086ca:	d1f9      	bne.n	80086c0 <_svfiprintf_r+0x50>
 80086cc:	ebba 0b04 	subs.w	fp, sl, r4
 80086d0:	d00b      	beq.n	80086ea <_svfiprintf_r+0x7a>
 80086d2:	465b      	mov	r3, fp
 80086d4:	4622      	mov	r2, r4
 80086d6:	4629      	mov	r1, r5
 80086d8:	4638      	mov	r0, r7
 80086da:	f7ff ff6f 	bl	80085bc <__ssputs_r>
 80086de:	3001      	adds	r0, #1
 80086e0:	f000 80a9 	beq.w	8008836 <_svfiprintf_r+0x1c6>
 80086e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086e6:	445a      	add	r2, fp
 80086e8:	9209      	str	r2, [sp, #36]	; 0x24
 80086ea:	f89a 3000 	ldrb.w	r3, [sl]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 80a1 	beq.w	8008836 <_svfiprintf_r+0x1c6>
 80086f4:	2300      	movs	r3, #0
 80086f6:	f04f 32ff 	mov.w	r2, #4294967295
 80086fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086fe:	f10a 0a01 	add.w	sl, sl, #1
 8008702:	9304      	str	r3, [sp, #16]
 8008704:	9307      	str	r3, [sp, #28]
 8008706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800870a:	931a      	str	r3, [sp, #104]	; 0x68
 800870c:	4654      	mov	r4, sl
 800870e:	2205      	movs	r2, #5
 8008710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008714:	4850      	ldr	r0, [pc, #320]	; (8008858 <_svfiprintf_r+0x1e8>)
 8008716:	f7f7 fd7b 	bl	8000210 <memchr>
 800871a:	9a04      	ldr	r2, [sp, #16]
 800871c:	b9d8      	cbnz	r0, 8008756 <_svfiprintf_r+0xe6>
 800871e:	06d0      	lsls	r0, r2, #27
 8008720:	bf44      	itt	mi
 8008722:	2320      	movmi	r3, #32
 8008724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008728:	0711      	lsls	r1, r2, #28
 800872a:	bf44      	itt	mi
 800872c:	232b      	movmi	r3, #43	; 0x2b
 800872e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008732:	f89a 3000 	ldrb.w	r3, [sl]
 8008736:	2b2a      	cmp	r3, #42	; 0x2a
 8008738:	d015      	beq.n	8008766 <_svfiprintf_r+0xf6>
 800873a:	9a07      	ldr	r2, [sp, #28]
 800873c:	4654      	mov	r4, sl
 800873e:	2000      	movs	r0, #0
 8008740:	f04f 0c0a 	mov.w	ip, #10
 8008744:	4621      	mov	r1, r4
 8008746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800874a:	3b30      	subs	r3, #48	; 0x30
 800874c:	2b09      	cmp	r3, #9
 800874e:	d94d      	bls.n	80087ec <_svfiprintf_r+0x17c>
 8008750:	b1b0      	cbz	r0, 8008780 <_svfiprintf_r+0x110>
 8008752:	9207      	str	r2, [sp, #28]
 8008754:	e014      	b.n	8008780 <_svfiprintf_r+0x110>
 8008756:	eba0 0308 	sub.w	r3, r0, r8
 800875a:	fa09 f303 	lsl.w	r3, r9, r3
 800875e:	4313      	orrs	r3, r2
 8008760:	9304      	str	r3, [sp, #16]
 8008762:	46a2      	mov	sl, r4
 8008764:	e7d2      	b.n	800870c <_svfiprintf_r+0x9c>
 8008766:	9b03      	ldr	r3, [sp, #12]
 8008768:	1d19      	adds	r1, r3, #4
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	9103      	str	r1, [sp, #12]
 800876e:	2b00      	cmp	r3, #0
 8008770:	bfbb      	ittet	lt
 8008772:	425b      	neglt	r3, r3
 8008774:	f042 0202 	orrlt.w	r2, r2, #2
 8008778:	9307      	strge	r3, [sp, #28]
 800877a:	9307      	strlt	r3, [sp, #28]
 800877c:	bfb8      	it	lt
 800877e:	9204      	strlt	r2, [sp, #16]
 8008780:	7823      	ldrb	r3, [r4, #0]
 8008782:	2b2e      	cmp	r3, #46	; 0x2e
 8008784:	d10c      	bne.n	80087a0 <_svfiprintf_r+0x130>
 8008786:	7863      	ldrb	r3, [r4, #1]
 8008788:	2b2a      	cmp	r3, #42	; 0x2a
 800878a:	d134      	bne.n	80087f6 <_svfiprintf_r+0x186>
 800878c:	9b03      	ldr	r3, [sp, #12]
 800878e:	1d1a      	adds	r2, r3, #4
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	9203      	str	r2, [sp, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	bfb8      	it	lt
 8008798:	f04f 33ff 	movlt.w	r3, #4294967295
 800879c:	3402      	adds	r4, #2
 800879e:	9305      	str	r3, [sp, #20]
 80087a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008868 <_svfiprintf_r+0x1f8>
 80087a4:	7821      	ldrb	r1, [r4, #0]
 80087a6:	2203      	movs	r2, #3
 80087a8:	4650      	mov	r0, sl
 80087aa:	f7f7 fd31 	bl	8000210 <memchr>
 80087ae:	b138      	cbz	r0, 80087c0 <_svfiprintf_r+0x150>
 80087b0:	9b04      	ldr	r3, [sp, #16]
 80087b2:	eba0 000a 	sub.w	r0, r0, sl
 80087b6:	2240      	movs	r2, #64	; 0x40
 80087b8:	4082      	lsls	r2, r0
 80087ba:	4313      	orrs	r3, r2
 80087bc:	3401      	adds	r4, #1
 80087be:	9304      	str	r3, [sp, #16]
 80087c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c4:	4825      	ldr	r0, [pc, #148]	; (800885c <_svfiprintf_r+0x1ec>)
 80087c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087ca:	2206      	movs	r2, #6
 80087cc:	f7f7 fd20 	bl	8000210 <memchr>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d038      	beq.n	8008846 <_svfiprintf_r+0x1d6>
 80087d4:	4b22      	ldr	r3, [pc, #136]	; (8008860 <_svfiprintf_r+0x1f0>)
 80087d6:	bb1b      	cbnz	r3, 8008820 <_svfiprintf_r+0x1b0>
 80087d8:	9b03      	ldr	r3, [sp, #12]
 80087da:	3307      	adds	r3, #7
 80087dc:	f023 0307 	bic.w	r3, r3, #7
 80087e0:	3308      	adds	r3, #8
 80087e2:	9303      	str	r3, [sp, #12]
 80087e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e6:	4433      	add	r3, r6
 80087e8:	9309      	str	r3, [sp, #36]	; 0x24
 80087ea:	e768      	b.n	80086be <_svfiprintf_r+0x4e>
 80087ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80087f0:	460c      	mov	r4, r1
 80087f2:	2001      	movs	r0, #1
 80087f4:	e7a6      	b.n	8008744 <_svfiprintf_r+0xd4>
 80087f6:	2300      	movs	r3, #0
 80087f8:	3401      	adds	r4, #1
 80087fa:	9305      	str	r3, [sp, #20]
 80087fc:	4619      	mov	r1, r3
 80087fe:	f04f 0c0a 	mov.w	ip, #10
 8008802:	4620      	mov	r0, r4
 8008804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008808:	3a30      	subs	r2, #48	; 0x30
 800880a:	2a09      	cmp	r2, #9
 800880c:	d903      	bls.n	8008816 <_svfiprintf_r+0x1a6>
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0c6      	beq.n	80087a0 <_svfiprintf_r+0x130>
 8008812:	9105      	str	r1, [sp, #20]
 8008814:	e7c4      	b.n	80087a0 <_svfiprintf_r+0x130>
 8008816:	fb0c 2101 	mla	r1, ip, r1, r2
 800881a:	4604      	mov	r4, r0
 800881c:	2301      	movs	r3, #1
 800881e:	e7f0      	b.n	8008802 <_svfiprintf_r+0x192>
 8008820:	ab03      	add	r3, sp, #12
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	462a      	mov	r2, r5
 8008826:	4b0f      	ldr	r3, [pc, #60]	; (8008864 <_svfiprintf_r+0x1f4>)
 8008828:	a904      	add	r1, sp, #16
 800882a:	4638      	mov	r0, r7
 800882c:	f7fd fe56 	bl	80064dc <_printf_float>
 8008830:	1c42      	adds	r2, r0, #1
 8008832:	4606      	mov	r6, r0
 8008834:	d1d6      	bne.n	80087e4 <_svfiprintf_r+0x174>
 8008836:	89ab      	ldrh	r3, [r5, #12]
 8008838:	065b      	lsls	r3, r3, #25
 800883a:	f53f af2d 	bmi.w	8008698 <_svfiprintf_r+0x28>
 800883e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008840:	b01d      	add	sp, #116	; 0x74
 8008842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008846:	ab03      	add	r3, sp, #12
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	462a      	mov	r2, r5
 800884c:	4b05      	ldr	r3, [pc, #20]	; (8008864 <_svfiprintf_r+0x1f4>)
 800884e:	a904      	add	r1, sp, #16
 8008850:	4638      	mov	r0, r7
 8008852:	f7fe f8e7 	bl	8006a24 <_printf_i>
 8008856:	e7eb      	b.n	8008830 <_svfiprintf_r+0x1c0>
 8008858:	0800c154 	.word	0x0800c154
 800885c:	0800c15e 	.word	0x0800c15e
 8008860:	080064dd 	.word	0x080064dd
 8008864:	080085bd 	.word	0x080085bd
 8008868:	0800c15a 	.word	0x0800c15a

0800886c <__sflush_r>:
 800886c:	898a      	ldrh	r2, [r1, #12]
 800886e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008872:	4605      	mov	r5, r0
 8008874:	0710      	lsls	r0, r2, #28
 8008876:	460c      	mov	r4, r1
 8008878:	d458      	bmi.n	800892c <__sflush_r+0xc0>
 800887a:	684b      	ldr	r3, [r1, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	dc05      	bgt.n	800888c <__sflush_r+0x20>
 8008880:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008882:	2b00      	cmp	r3, #0
 8008884:	dc02      	bgt.n	800888c <__sflush_r+0x20>
 8008886:	2000      	movs	r0, #0
 8008888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800888c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800888e:	2e00      	cmp	r6, #0
 8008890:	d0f9      	beq.n	8008886 <__sflush_r+0x1a>
 8008892:	2300      	movs	r3, #0
 8008894:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008898:	682f      	ldr	r7, [r5, #0]
 800889a:	6a21      	ldr	r1, [r4, #32]
 800889c:	602b      	str	r3, [r5, #0]
 800889e:	d032      	beq.n	8008906 <__sflush_r+0x9a>
 80088a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	075a      	lsls	r2, r3, #29
 80088a6:	d505      	bpl.n	80088b4 <__sflush_r+0x48>
 80088a8:	6863      	ldr	r3, [r4, #4]
 80088aa:	1ac0      	subs	r0, r0, r3
 80088ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088ae:	b10b      	cbz	r3, 80088b4 <__sflush_r+0x48>
 80088b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088b2:	1ac0      	subs	r0, r0, r3
 80088b4:	2300      	movs	r3, #0
 80088b6:	4602      	mov	r2, r0
 80088b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ba:	6a21      	ldr	r1, [r4, #32]
 80088bc:	4628      	mov	r0, r5
 80088be:	47b0      	blx	r6
 80088c0:	1c43      	adds	r3, r0, #1
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	d106      	bne.n	80088d4 <__sflush_r+0x68>
 80088c6:	6829      	ldr	r1, [r5, #0]
 80088c8:	291d      	cmp	r1, #29
 80088ca:	d82b      	bhi.n	8008924 <__sflush_r+0xb8>
 80088cc:	4a29      	ldr	r2, [pc, #164]	; (8008974 <__sflush_r+0x108>)
 80088ce:	410a      	asrs	r2, r1
 80088d0:	07d6      	lsls	r6, r2, #31
 80088d2:	d427      	bmi.n	8008924 <__sflush_r+0xb8>
 80088d4:	2200      	movs	r2, #0
 80088d6:	6062      	str	r2, [r4, #4]
 80088d8:	04d9      	lsls	r1, r3, #19
 80088da:	6922      	ldr	r2, [r4, #16]
 80088dc:	6022      	str	r2, [r4, #0]
 80088de:	d504      	bpl.n	80088ea <__sflush_r+0x7e>
 80088e0:	1c42      	adds	r2, r0, #1
 80088e2:	d101      	bne.n	80088e8 <__sflush_r+0x7c>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b903      	cbnz	r3, 80088ea <__sflush_r+0x7e>
 80088e8:	6560      	str	r0, [r4, #84]	; 0x54
 80088ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088ec:	602f      	str	r7, [r5, #0]
 80088ee:	2900      	cmp	r1, #0
 80088f0:	d0c9      	beq.n	8008886 <__sflush_r+0x1a>
 80088f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088f6:	4299      	cmp	r1, r3
 80088f8:	d002      	beq.n	8008900 <__sflush_r+0x94>
 80088fa:	4628      	mov	r0, r5
 80088fc:	f7ff f9e2 	bl	8007cc4 <_free_r>
 8008900:	2000      	movs	r0, #0
 8008902:	6360      	str	r0, [r4, #52]	; 0x34
 8008904:	e7c0      	b.n	8008888 <__sflush_r+0x1c>
 8008906:	2301      	movs	r3, #1
 8008908:	4628      	mov	r0, r5
 800890a:	47b0      	blx	r6
 800890c:	1c41      	adds	r1, r0, #1
 800890e:	d1c8      	bne.n	80088a2 <__sflush_r+0x36>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0c5      	beq.n	80088a2 <__sflush_r+0x36>
 8008916:	2b1d      	cmp	r3, #29
 8008918:	d001      	beq.n	800891e <__sflush_r+0xb2>
 800891a:	2b16      	cmp	r3, #22
 800891c:	d101      	bne.n	8008922 <__sflush_r+0xb6>
 800891e:	602f      	str	r7, [r5, #0]
 8008920:	e7b1      	b.n	8008886 <__sflush_r+0x1a>
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008928:	81a3      	strh	r3, [r4, #12]
 800892a:	e7ad      	b.n	8008888 <__sflush_r+0x1c>
 800892c:	690f      	ldr	r7, [r1, #16]
 800892e:	2f00      	cmp	r7, #0
 8008930:	d0a9      	beq.n	8008886 <__sflush_r+0x1a>
 8008932:	0793      	lsls	r3, r2, #30
 8008934:	680e      	ldr	r6, [r1, #0]
 8008936:	bf08      	it	eq
 8008938:	694b      	ldreq	r3, [r1, #20]
 800893a:	600f      	str	r7, [r1, #0]
 800893c:	bf18      	it	ne
 800893e:	2300      	movne	r3, #0
 8008940:	eba6 0807 	sub.w	r8, r6, r7
 8008944:	608b      	str	r3, [r1, #8]
 8008946:	f1b8 0f00 	cmp.w	r8, #0
 800894a:	dd9c      	ble.n	8008886 <__sflush_r+0x1a>
 800894c:	6a21      	ldr	r1, [r4, #32]
 800894e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008950:	4643      	mov	r3, r8
 8008952:	463a      	mov	r2, r7
 8008954:	4628      	mov	r0, r5
 8008956:	47b0      	blx	r6
 8008958:	2800      	cmp	r0, #0
 800895a:	dc06      	bgt.n	800896a <__sflush_r+0xfe>
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008962:	81a3      	strh	r3, [r4, #12]
 8008964:	f04f 30ff 	mov.w	r0, #4294967295
 8008968:	e78e      	b.n	8008888 <__sflush_r+0x1c>
 800896a:	4407      	add	r7, r0
 800896c:	eba8 0800 	sub.w	r8, r8, r0
 8008970:	e7e9      	b.n	8008946 <__sflush_r+0xda>
 8008972:	bf00      	nop
 8008974:	dfbffffe 	.word	0xdfbffffe

08008978 <_fflush_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	690b      	ldr	r3, [r1, #16]
 800897c:	4605      	mov	r5, r0
 800897e:	460c      	mov	r4, r1
 8008980:	b913      	cbnz	r3, 8008988 <_fflush_r+0x10>
 8008982:	2500      	movs	r5, #0
 8008984:	4628      	mov	r0, r5
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	b118      	cbz	r0, 8008992 <_fflush_r+0x1a>
 800898a:	6a03      	ldr	r3, [r0, #32]
 800898c:	b90b      	cbnz	r3, 8008992 <_fflush_r+0x1a>
 800898e:	f7fe f9f7 	bl	8006d80 <__sinit>
 8008992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0f3      	beq.n	8008982 <_fflush_r+0xa>
 800899a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800899c:	07d0      	lsls	r0, r2, #31
 800899e:	d404      	bmi.n	80089aa <_fflush_r+0x32>
 80089a0:	0599      	lsls	r1, r3, #22
 80089a2:	d402      	bmi.n	80089aa <_fflush_r+0x32>
 80089a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089a6:	f7fe fb02 	bl	8006fae <__retarget_lock_acquire_recursive>
 80089aa:	4628      	mov	r0, r5
 80089ac:	4621      	mov	r1, r4
 80089ae:	f7ff ff5d 	bl	800886c <__sflush_r>
 80089b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089b4:	07da      	lsls	r2, r3, #31
 80089b6:	4605      	mov	r5, r0
 80089b8:	d4e4      	bmi.n	8008984 <_fflush_r+0xc>
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	059b      	lsls	r3, r3, #22
 80089be:	d4e1      	bmi.n	8008984 <_fflush_r+0xc>
 80089c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089c2:	f7fe faf5 	bl	8006fb0 <__retarget_lock_release_recursive>
 80089c6:	e7dd      	b.n	8008984 <_fflush_r+0xc>

080089c8 <memmove>:
 80089c8:	4288      	cmp	r0, r1
 80089ca:	b510      	push	{r4, lr}
 80089cc:	eb01 0402 	add.w	r4, r1, r2
 80089d0:	d902      	bls.n	80089d8 <memmove+0x10>
 80089d2:	4284      	cmp	r4, r0
 80089d4:	4623      	mov	r3, r4
 80089d6:	d807      	bhi.n	80089e8 <memmove+0x20>
 80089d8:	1e43      	subs	r3, r0, #1
 80089da:	42a1      	cmp	r1, r4
 80089dc:	d008      	beq.n	80089f0 <memmove+0x28>
 80089de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089e6:	e7f8      	b.n	80089da <memmove+0x12>
 80089e8:	4402      	add	r2, r0
 80089ea:	4601      	mov	r1, r0
 80089ec:	428a      	cmp	r2, r1
 80089ee:	d100      	bne.n	80089f2 <memmove+0x2a>
 80089f0:	bd10      	pop	{r4, pc}
 80089f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089fa:	e7f7      	b.n	80089ec <memmove+0x24>

080089fc <_sbrk_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4d06      	ldr	r5, [pc, #24]	; (8008a18 <_sbrk_r+0x1c>)
 8008a00:	2300      	movs	r3, #0
 8008a02:	4604      	mov	r4, r0
 8008a04:	4608      	mov	r0, r1
 8008a06:	602b      	str	r3, [r5, #0]
 8008a08:	f7f8 fec8 	bl	800179c <_sbrk>
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	d102      	bne.n	8008a16 <_sbrk_r+0x1a>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	b103      	cbz	r3, 8008a16 <_sbrk_r+0x1a>
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	bd38      	pop	{r3, r4, r5, pc}
 8008a18:	200034f0 	.word	0x200034f0

08008a1c <__assert_func>:
 8008a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a1e:	4614      	mov	r4, r2
 8008a20:	461a      	mov	r2, r3
 8008a22:	4b09      	ldr	r3, [pc, #36]	; (8008a48 <__assert_func+0x2c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4605      	mov	r5, r0
 8008a28:	68d8      	ldr	r0, [r3, #12]
 8008a2a:	b14c      	cbz	r4, 8008a40 <__assert_func+0x24>
 8008a2c:	4b07      	ldr	r3, [pc, #28]	; (8008a4c <__assert_func+0x30>)
 8008a2e:	9100      	str	r1, [sp, #0]
 8008a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a34:	4906      	ldr	r1, [pc, #24]	; (8008a50 <__assert_func+0x34>)
 8008a36:	462b      	mov	r3, r5
 8008a38:	f000 f872 	bl	8008b20 <fiprintf>
 8008a3c:	f000 f882 	bl	8008b44 <abort>
 8008a40:	4b04      	ldr	r3, [pc, #16]	; (8008a54 <__assert_func+0x38>)
 8008a42:	461c      	mov	r4, r3
 8008a44:	e7f3      	b.n	8008a2e <__assert_func+0x12>
 8008a46:	bf00      	nop
 8008a48:	20002068 	.word	0x20002068
 8008a4c:	0800c16f 	.word	0x0800c16f
 8008a50:	0800c17c 	.word	0x0800c17c
 8008a54:	0800c1aa 	.word	0x0800c1aa

08008a58 <_calloc_r>:
 8008a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a5a:	fba1 2402 	umull	r2, r4, r1, r2
 8008a5e:	b94c      	cbnz	r4, 8008a74 <_calloc_r+0x1c>
 8008a60:	4611      	mov	r1, r2
 8008a62:	9201      	str	r2, [sp, #4]
 8008a64:	f7ff f9a2 	bl	8007dac <_malloc_r>
 8008a68:	9a01      	ldr	r2, [sp, #4]
 8008a6a:	4605      	mov	r5, r0
 8008a6c:	b930      	cbnz	r0, 8008a7c <_calloc_r+0x24>
 8008a6e:	4628      	mov	r0, r5
 8008a70:	b003      	add	sp, #12
 8008a72:	bd30      	pop	{r4, r5, pc}
 8008a74:	220c      	movs	r2, #12
 8008a76:	6002      	str	r2, [r0, #0]
 8008a78:	2500      	movs	r5, #0
 8008a7a:	e7f8      	b.n	8008a6e <_calloc_r+0x16>
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	f7fe fa18 	bl	8006eb2 <memset>
 8008a82:	e7f4      	b.n	8008a6e <_calloc_r+0x16>

08008a84 <__ascii_mbtowc>:
 8008a84:	b082      	sub	sp, #8
 8008a86:	b901      	cbnz	r1, 8008a8a <__ascii_mbtowc+0x6>
 8008a88:	a901      	add	r1, sp, #4
 8008a8a:	b142      	cbz	r2, 8008a9e <__ascii_mbtowc+0x1a>
 8008a8c:	b14b      	cbz	r3, 8008aa2 <__ascii_mbtowc+0x1e>
 8008a8e:	7813      	ldrb	r3, [r2, #0]
 8008a90:	600b      	str	r3, [r1, #0]
 8008a92:	7812      	ldrb	r2, [r2, #0]
 8008a94:	1e10      	subs	r0, r2, #0
 8008a96:	bf18      	it	ne
 8008a98:	2001      	movne	r0, #1
 8008a9a:	b002      	add	sp, #8
 8008a9c:	4770      	bx	lr
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	e7fb      	b.n	8008a9a <__ascii_mbtowc+0x16>
 8008aa2:	f06f 0001 	mvn.w	r0, #1
 8008aa6:	e7f8      	b.n	8008a9a <__ascii_mbtowc+0x16>

08008aa8 <_realloc_r>:
 8008aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aac:	4680      	mov	r8, r0
 8008aae:	4614      	mov	r4, r2
 8008ab0:	460e      	mov	r6, r1
 8008ab2:	b921      	cbnz	r1, 8008abe <_realloc_r+0x16>
 8008ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab8:	4611      	mov	r1, r2
 8008aba:	f7ff b977 	b.w	8007dac <_malloc_r>
 8008abe:	b92a      	cbnz	r2, 8008acc <_realloc_r+0x24>
 8008ac0:	f7ff f900 	bl	8007cc4 <_free_r>
 8008ac4:	4625      	mov	r5, r4
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008acc:	f000 f841 	bl	8008b52 <_malloc_usable_size_r>
 8008ad0:	4284      	cmp	r4, r0
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	d802      	bhi.n	8008adc <_realloc_r+0x34>
 8008ad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ada:	d812      	bhi.n	8008b02 <_realloc_r+0x5a>
 8008adc:	4621      	mov	r1, r4
 8008ade:	4640      	mov	r0, r8
 8008ae0:	f7ff f964 	bl	8007dac <_malloc_r>
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d0ed      	beq.n	8008ac6 <_realloc_r+0x1e>
 8008aea:	42bc      	cmp	r4, r7
 8008aec:	4622      	mov	r2, r4
 8008aee:	4631      	mov	r1, r6
 8008af0:	bf28      	it	cs
 8008af2:	463a      	movcs	r2, r7
 8008af4:	f7fe fa5d 	bl	8006fb2 <memcpy>
 8008af8:	4631      	mov	r1, r6
 8008afa:	4640      	mov	r0, r8
 8008afc:	f7ff f8e2 	bl	8007cc4 <_free_r>
 8008b00:	e7e1      	b.n	8008ac6 <_realloc_r+0x1e>
 8008b02:	4635      	mov	r5, r6
 8008b04:	e7df      	b.n	8008ac6 <_realloc_r+0x1e>

08008b06 <__ascii_wctomb>:
 8008b06:	b149      	cbz	r1, 8008b1c <__ascii_wctomb+0x16>
 8008b08:	2aff      	cmp	r2, #255	; 0xff
 8008b0a:	bf85      	ittet	hi
 8008b0c:	238a      	movhi	r3, #138	; 0x8a
 8008b0e:	6003      	strhi	r3, [r0, #0]
 8008b10:	700a      	strbls	r2, [r1, #0]
 8008b12:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b16:	bf98      	it	ls
 8008b18:	2001      	movls	r0, #1
 8008b1a:	4770      	bx	lr
 8008b1c:	4608      	mov	r0, r1
 8008b1e:	4770      	bx	lr

08008b20 <fiprintf>:
 8008b20:	b40e      	push	{r1, r2, r3}
 8008b22:	b503      	push	{r0, r1, lr}
 8008b24:	4601      	mov	r1, r0
 8008b26:	ab03      	add	r3, sp, #12
 8008b28:	4805      	ldr	r0, [pc, #20]	; (8008b40 <fiprintf+0x20>)
 8008b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b2e:	6800      	ldr	r0, [r0, #0]
 8008b30:	9301      	str	r3, [sp, #4]
 8008b32:	f000 f83f 	bl	8008bb4 <_vfiprintf_r>
 8008b36:	b002      	add	sp, #8
 8008b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b3c:	b003      	add	sp, #12
 8008b3e:	4770      	bx	lr
 8008b40:	20002068 	.word	0x20002068

08008b44 <abort>:
 8008b44:	b508      	push	{r3, lr}
 8008b46:	2006      	movs	r0, #6
 8008b48:	f000 fa0c 	bl	8008f64 <raise>
 8008b4c:	2001      	movs	r0, #1
 8008b4e:	f7f8 fdad 	bl	80016ac <_exit>

08008b52 <_malloc_usable_size_r>:
 8008b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b56:	1f18      	subs	r0, r3, #4
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bfbc      	itt	lt
 8008b5c:	580b      	ldrlt	r3, [r1, r0]
 8008b5e:	18c0      	addlt	r0, r0, r3
 8008b60:	4770      	bx	lr

08008b62 <__sfputc_r>:
 8008b62:	6893      	ldr	r3, [r2, #8]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	b410      	push	{r4}
 8008b6a:	6093      	str	r3, [r2, #8]
 8008b6c:	da08      	bge.n	8008b80 <__sfputc_r+0x1e>
 8008b6e:	6994      	ldr	r4, [r2, #24]
 8008b70:	42a3      	cmp	r3, r4
 8008b72:	db01      	blt.n	8008b78 <__sfputc_r+0x16>
 8008b74:	290a      	cmp	r1, #10
 8008b76:	d103      	bne.n	8008b80 <__sfputc_r+0x1e>
 8008b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b7c:	f000 b934 	b.w	8008de8 <__swbuf_r>
 8008b80:	6813      	ldr	r3, [r2, #0]
 8008b82:	1c58      	adds	r0, r3, #1
 8008b84:	6010      	str	r0, [r2, #0]
 8008b86:	7019      	strb	r1, [r3, #0]
 8008b88:	4608      	mov	r0, r1
 8008b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <__sfputs_r>:
 8008b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b92:	4606      	mov	r6, r0
 8008b94:	460f      	mov	r7, r1
 8008b96:	4614      	mov	r4, r2
 8008b98:	18d5      	adds	r5, r2, r3
 8008b9a:	42ac      	cmp	r4, r5
 8008b9c:	d101      	bne.n	8008ba2 <__sfputs_r+0x12>
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	e007      	b.n	8008bb2 <__sfputs_r+0x22>
 8008ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba6:	463a      	mov	r2, r7
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7ff ffda 	bl	8008b62 <__sfputc_r>
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	d1f3      	bne.n	8008b9a <__sfputs_r+0xa>
 8008bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bb4 <_vfiprintf_r>:
 8008bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb8:	460d      	mov	r5, r1
 8008bba:	b09d      	sub	sp, #116	; 0x74
 8008bbc:	4614      	mov	r4, r2
 8008bbe:	4698      	mov	r8, r3
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	b118      	cbz	r0, 8008bcc <_vfiprintf_r+0x18>
 8008bc4:	6a03      	ldr	r3, [r0, #32]
 8008bc6:	b90b      	cbnz	r3, 8008bcc <_vfiprintf_r+0x18>
 8008bc8:	f7fe f8da 	bl	8006d80 <__sinit>
 8008bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bce:	07d9      	lsls	r1, r3, #31
 8008bd0:	d405      	bmi.n	8008bde <_vfiprintf_r+0x2a>
 8008bd2:	89ab      	ldrh	r3, [r5, #12]
 8008bd4:	059a      	lsls	r2, r3, #22
 8008bd6:	d402      	bmi.n	8008bde <_vfiprintf_r+0x2a>
 8008bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bda:	f7fe f9e8 	bl	8006fae <__retarget_lock_acquire_recursive>
 8008bde:	89ab      	ldrh	r3, [r5, #12]
 8008be0:	071b      	lsls	r3, r3, #28
 8008be2:	d501      	bpl.n	8008be8 <_vfiprintf_r+0x34>
 8008be4:	692b      	ldr	r3, [r5, #16]
 8008be6:	b99b      	cbnz	r3, 8008c10 <_vfiprintf_r+0x5c>
 8008be8:	4629      	mov	r1, r5
 8008bea:	4630      	mov	r0, r6
 8008bec:	f000 f93a 	bl	8008e64 <__swsetup_r>
 8008bf0:	b170      	cbz	r0, 8008c10 <_vfiprintf_r+0x5c>
 8008bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bf4:	07dc      	lsls	r4, r3, #31
 8008bf6:	d504      	bpl.n	8008c02 <_vfiprintf_r+0x4e>
 8008bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfc:	b01d      	add	sp, #116	; 0x74
 8008bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c02:	89ab      	ldrh	r3, [r5, #12]
 8008c04:	0598      	lsls	r0, r3, #22
 8008c06:	d4f7      	bmi.n	8008bf8 <_vfiprintf_r+0x44>
 8008c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c0a:	f7fe f9d1 	bl	8006fb0 <__retarget_lock_release_recursive>
 8008c0e:	e7f3      	b.n	8008bf8 <_vfiprintf_r+0x44>
 8008c10:	2300      	movs	r3, #0
 8008c12:	9309      	str	r3, [sp, #36]	; 0x24
 8008c14:	2320      	movs	r3, #32
 8008c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c1e:	2330      	movs	r3, #48	; 0x30
 8008c20:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008dd4 <_vfiprintf_r+0x220>
 8008c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c28:	f04f 0901 	mov.w	r9, #1
 8008c2c:	4623      	mov	r3, r4
 8008c2e:	469a      	mov	sl, r3
 8008c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c34:	b10a      	cbz	r2, 8008c3a <_vfiprintf_r+0x86>
 8008c36:	2a25      	cmp	r2, #37	; 0x25
 8008c38:	d1f9      	bne.n	8008c2e <_vfiprintf_r+0x7a>
 8008c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c3e:	d00b      	beq.n	8008c58 <_vfiprintf_r+0xa4>
 8008c40:	465b      	mov	r3, fp
 8008c42:	4622      	mov	r2, r4
 8008c44:	4629      	mov	r1, r5
 8008c46:	4630      	mov	r0, r6
 8008c48:	f7ff ffa2 	bl	8008b90 <__sfputs_r>
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	f000 80a9 	beq.w	8008da4 <_vfiprintf_r+0x1f0>
 8008c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c54:	445a      	add	r2, fp
 8008c56:	9209      	str	r2, [sp, #36]	; 0x24
 8008c58:	f89a 3000 	ldrb.w	r3, [sl]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 80a1 	beq.w	8008da4 <_vfiprintf_r+0x1f0>
 8008c62:	2300      	movs	r3, #0
 8008c64:	f04f 32ff 	mov.w	r2, #4294967295
 8008c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c6c:	f10a 0a01 	add.w	sl, sl, #1
 8008c70:	9304      	str	r3, [sp, #16]
 8008c72:	9307      	str	r3, [sp, #28]
 8008c74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c78:	931a      	str	r3, [sp, #104]	; 0x68
 8008c7a:	4654      	mov	r4, sl
 8008c7c:	2205      	movs	r2, #5
 8008c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c82:	4854      	ldr	r0, [pc, #336]	; (8008dd4 <_vfiprintf_r+0x220>)
 8008c84:	f7f7 fac4 	bl	8000210 <memchr>
 8008c88:	9a04      	ldr	r2, [sp, #16]
 8008c8a:	b9d8      	cbnz	r0, 8008cc4 <_vfiprintf_r+0x110>
 8008c8c:	06d1      	lsls	r1, r2, #27
 8008c8e:	bf44      	itt	mi
 8008c90:	2320      	movmi	r3, #32
 8008c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c96:	0713      	lsls	r3, r2, #28
 8008c98:	bf44      	itt	mi
 8008c9a:	232b      	movmi	r3, #43	; 0x2b
 8008c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ca6:	d015      	beq.n	8008cd4 <_vfiprintf_r+0x120>
 8008ca8:	9a07      	ldr	r2, [sp, #28]
 8008caa:	4654      	mov	r4, sl
 8008cac:	2000      	movs	r0, #0
 8008cae:	f04f 0c0a 	mov.w	ip, #10
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cb8:	3b30      	subs	r3, #48	; 0x30
 8008cba:	2b09      	cmp	r3, #9
 8008cbc:	d94d      	bls.n	8008d5a <_vfiprintf_r+0x1a6>
 8008cbe:	b1b0      	cbz	r0, 8008cee <_vfiprintf_r+0x13a>
 8008cc0:	9207      	str	r2, [sp, #28]
 8008cc2:	e014      	b.n	8008cee <_vfiprintf_r+0x13a>
 8008cc4:	eba0 0308 	sub.w	r3, r0, r8
 8008cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	9304      	str	r3, [sp, #16]
 8008cd0:	46a2      	mov	sl, r4
 8008cd2:	e7d2      	b.n	8008c7a <_vfiprintf_r+0xc6>
 8008cd4:	9b03      	ldr	r3, [sp, #12]
 8008cd6:	1d19      	adds	r1, r3, #4
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	9103      	str	r1, [sp, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bfbb      	ittet	lt
 8008ce0:	425b      	neglt	r3, r3
 8008ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ce6:	9307      	strge	r3, [sp, #28]
 8008ce8:	9307      	strlt	r3, [sp, #28]
 8008cea:	bfb8      	it	lt
 8008cec:	9204      	strlt	r2, [sp, #16]
 8008cee:	7823      	ldrb	r3, [r4, #0]
 8008cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8008cf2:	d10c      	bne.n	8008d0e <_vfiprintf_r+0x15a>
 8008cf4:	7863      	ldrb	r3, [r4, #1]
 8008cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8008cf8:	d134      	bne.n	8008d64 <_vfiprintf_r+0x1b0>
 8008cfa:	9b03      	ldr	r3, [sp, #12]
 8008cfc:	1d1a      	adds	r2, r3, #4
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	9203      	str	r2, [sp, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	bfb8      	it	lt
 8008d06:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d0a:	3402      	adds	r4, #2
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008de4 <_vfiprintf_r+0x230>
 8008d12:	7821      	ldrb	r1, [r4, #0]
 8008d14:	2203      	movs	r2, #3
 8008d16:	4650      	mov	r0, sl
 8008d18:	f7f7 fa7a 	bl	8000210 <memchr>
 8008d1c:	b138      	cbz	r0, 8008d2e <_vfiprintf_r+0x17a>
 8008d1e:	9b04      	ldr	r3, [sp, #16]
 8008d20:	eba0 000a 	sub.w	r0, r0, sl
 8008d24:	2240      	movs	r2, #64	; 0x40
 8008d26:	4082      	lsls	r2, r0
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	3401      	adds	r4, #1
 8008d2c:	9304      	str	r3, [sp, #16]
 8008d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d32:	4829      	ldr	r0, [pc, #164]	; (8008dd8 <_vfiprintf_r+0x224>)
 8008d34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d38:	2206      	movs	r2, #6
 8008d3a:	f7f7 fa69 	bl	8000210 <memchr>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d03f      	beq.n	8008dc2 <_vfiprintf_r+0x20e>
 8008d42:	4b26      	ldr	r3, [pc, #152]	; (8008ddc <_vfiprintf_r+0x228>)
 8008d44:	bb1b      	cbnz	r3, 8008d8e <_vfiprintf_r+0x1da>
 8008d46:	9b03      	ldr	r3, [sp, #12]
 8008d48:	3307      	adds	r3, #7
 8008d4a:	f023 0307 	bic.w	r3, r3, #7
 8008d4e:	3308      	adds	r3, #8
 8008d50:	9303      	str	r3, [sp, #12]
 8008d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d54:	443b      	add	r3, r7
 8008d56:	9309      	str	r3, [sp, #36]	; 0x24
 8008d58:	e768      	b.n	8008c2c <_vfiprintf_r+0x78>
 8008d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d5e:	460c      	mov	r4, r1
 8008d60:	2001      	movs	r0, #1
 8008d62:	e7a6      	b.n	8008cb2 <_vfiprintf_r+0xfe>
 8008d64:	2300      	movs	r3, #0
 8008d66:	3401      	adds	r4, #1
 8008d68:	9305      	str	r3, [sp, #20]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	f04f 0c0a 	mov.w	ip, #10
 8008d70:	4620      	mov	r0, r4
 8008d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d76:	3a30      	subs	r2, #48	; 0x30
 8008d78:	2a09      	cmp	r2, #9
 8008d7a:	d903      	bls.n	8008d84 <_vfiprintf_r+0x1d0>
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d0c6      	beq.n	8008d0e <_vfiprintf_r+0x15a>
 8008d80:	9105      	str	r1, [sp, #20]
 8008d82:	e7c4      	b.n	8008d0e <_vfiprintf_r+0x15a>
 8008d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d88:	4604      	mov	r4, r0
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e7f0      	b.n	8008d70 <_vfiprintf_r+0x1bc>
 8008d8e:	ab03      	add	r3, sp, #12
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	462a      	mov	r2, r5
 8008d94:	4b12      	ldr	r3, [pc, #72]	; (8008de0 <_vfiprintf_r+0x22c>)
 8008d96:	a904      	add	r1, sp, #16
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f7fd fb9f 	bl	80064dc <_printf_float>
 8008d9e:	4607      	mov	r7, r0
 8008da0:	1c78      	adds	r0, r7, #1
 8008da2:	d1d6      	bne.n	8008d52 <_vfiprintf_r+0x19e>
 8008da4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008da6:	07d9      	lsls	r1, r3, #31
 8008da8:	d405      	bmi.n	8008db6 <_vfiprintf_r+0x202>
 8008daa:	89ab      	ldrh	r3, [r5, #12]
 8008dac:	059a      	lsls	r2, r3, #22
 8008dae:	d402      	bmi.n	8008db6 <_vfiprintf_r+0x202>
 8008db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008db2:	f7fe f8fd 	bl	8006fb0 <__retarget_lock_release_recursive>
 8008db6:	89ab      	ldrh	r3, [r5, #12]
 8008db8:	065b      	lsls	r3, r3, #25
 8008dba:	f53f af1d 	bmi.w	8008bf8 <_vfiprintf_r+0x44>
 8008dbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dc0:	e71c      	b.n	8008bfc <_vfiprintf_r+0x48>
 8008dc2:	ab03      	add	r3, sp, #12
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	462a      	mov	r2, r5
 8008dc8:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <_vfiprintf_r+0x22c>)
 8008dca:	a904      	add	r1, sp, #16
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f7fd fe29 	bl	8006a24 <_printf_i>
 8008dd2:	e7e4      	b.n	8008d9e <_vfiprintf_r+0x1ea>
 8008dd4:	0800c154 	.word	0x0800c154
 8008dd8:	0800c15e 	.word	0x0800c15e
 8008ddc:	080064dd 	.word	0x080064dd
 8008de0:	08008b91 	.word	0x08008b91
 8008de4:	0800c15a 	.word	0x0800c15a

08008de8 <__swbuf_r>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	460e      	mov	r6, r1
 8008dec:	4614      	mov	r4, r2
 8008dee:	4605      	mov	r5, r0
 8008df0:	b118      	cbz	r0, 8008dfa <__swbuf_r+0x12>
 8008df2:	6a03      	ldr	r3, [r0, #32]
 8008df4:	b90b      	cbnz	r3, 8008dfa <__swbuf_r+0x12>
 8008df6:	f7fd ffc3 	bl	8006d80 <__sinit>
 8008dfa:	69a3      	ldr	r3, [r4, #24]
 8008dfc:	60a3      	str	r3, [r4, #8]
 8008dfe:	89a3      	ldrh	r3, [r4, #12]
 8008e00:	071a      	lsls	r2, r3, #28
 8008e02:	d525      	bpl.n	8008e50 <__swbuf_r+0x68>
 8008e04:	6923      	ldr	r3, [r4, #16]
 8008e06:	b31b      	cbz	r3, 8008e50 <__swbuf_r+0x68>
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	6922      	ldr	r2, [r4, #16]
 8008e0c:	1a98      	subs	r0, r3, r2
 8008e0e:	6963      	ldr	r3, [r4, #20]
 8008e10:	b2f6      	uxtb	r6, r6
 8008e12:	4283      	cmp	r3, r0
 8008e14:	4637      	mov	r7, r6
 8008e16:	dc04      	bgt.n	8008e22 <__swbuf_r+0x3a>
 8008e18:	4621      	mov	r1, r4
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	f7ff fdac 	bl	8008978 <_fflush_r>
 8008e20:	b9e0      	cbnz	r0, 8008e5c <__swbuf_r+0x74>
 8008e22:	68a3      	ldr	r3, [r4, #8]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	60a3      	str	r3, [r4, #8]
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	6022      	str	r2, [r4, #0]
 8008e2e:	701e      	strb	r6, [r3, #0]
 8008e30:	6962      	ldr	r2, [r4, #20]
 8008e32:	1c43      	adds	r3, r0, #1
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d004      	beq.n	8008e42 <__swbuf_r+0x5a>
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	07db      	lsls	r3, r3, #31
 8008e3c:	d506      	bpl.n	8008e4c <__swbuf_r+0x64>
 8008e3e:	2e0a      	cmp	r6, #10
 8008e40:	d104      	bne.n	8008e4c <__swbuf_r+0x64>
 8008e42:	4621      	mov	r1, r4
 8008e44:	4628      	mov	r0, r5
 8008e46:	f7ff fd97 	bl	8008978 <_fflush_r>
 8008e4a:	b938      	cbnz	r0, 8008e5c <__swbuf_r+0x74>
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e50:	4621      	mov	r1, r4
 8008e52:	4628      	mov	r0, r5
 8008e54:	f000 f806 	bl	8008e64 <__swsetup_r>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d0d5      	beq.n	8008e08 <__swbuf_r+0x20>
 8008e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e60:	e7f4      	b.n	8008e4c <__swbuf_r+0x64>
	...

08008e64 <__swsetup_r>:
 8008e64:	b538      	push	{r3, r4, r5, lr}
 8008e66:	4b2a      	ldr	r3, [pc, #168]	; (8008f10 <__swsetup_r+0xac>)
 8008e68:	4605      	mov	r5, r0
 8008e6a:	6818      	ldr	r0, [r3, #0]
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	b118      	cbz	r0, 8008e78 <__swsetup_r+0x14>
 8008e70:	6a03      	ldr	r3, [r0, #32]
 8008e72:	b90b      	cbnz	r3, 8008e78 <__swsetup_r+0x14>
 8008e74:	f7fd ff84 	bl	8006d80 <__sinit>
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e7e:	0718      	lsls	r0, r3, #28
 8008e80:	d422      	bmi.n	8008ec8 <__swsetup_r+0x64>
 8008e82:	06d9      	lsls	r1, r3, #27
 8008e84:	d407      	bmi.n	8008e96 <__swsetup_r+0x32>
 8008e86:	2309      	movs	r3, #9
 8008e88:	602b      	str	r3, [r5, #0]
 8008e8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e8e:	81a3      	strh	r3, [r4, #12]
 8008e90:	f04f 30ff 	mov.w	r0, #4294967295
 8008e94:	e034      	b.n	8008f00 <__swsetup_r+0x9c>
 8008e96:	0758      	lsls	r0, r3, #29
 8008e98:	d512      	bpl.n	8008ec0 <__swsetup_r+0x5c>
 8008e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e9c:	b141      	cbz	r1, 8008eb0 <__swsetup_r+0x4c>
 8008e9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ea2:	4299      	cmp	r1, r3
 8008ea4:	d002      	beq.n	8008eac <__swsetup_r+0x48>
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f7fe ff0c 	bl	8007cc4 <_free_r>
 8008eac:	2300      	movs	r3, #0
 8008eae:	6363      	str	r3, [r4, #52]	; 0x34
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008eb6:	81a3      	strh	r3, [r4, #12]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	6063      	str	r3, [r4, #4]
 8008ebc:	6923      	ldr	r3, [r4, #16]
 8008ebe:	6023      	str	r3, [r4, #0]
 8008ec0:	89a3      	ldrh	r3, [r4, #12]
 8008ec2:	f043 0308 	orr.w	r3, r3, #8
 8008ec6:	81a3      	strh	r3, [r4, #12]
 8008ec8:	6923      	ldr	r3, [r4, #16]
 8008eca:	b94b      	cbnz	r3, 8008ee0 <__swsetup_r+0x7c>
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ed6:	d003      	beq.n	8008ee0 <__swsetup_r+0x7c>
 8008ed8:	4621      	mov	r1, r4
 8008eda:	4628      	mov	r0, r5
 8008edc:	f000 f884 	bl	8008fe8 <__smakebuf_r>
 8008ee0:	89a0      	ldrh	r0, [r4, #12]
 8008ee2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ee6:	f010 0301 	ands.w	r3, r0, #1
 8008eea:	d00a      	beq.n	8008f02 <__swsetup_r+0x9e>
 8008eec:	2300      	movs	r3, #0
 8008eee:	60a3      	str	r3, [r4, #8]
 8008ef0:	6963      	ldr	r3, [r4, #20]
 8008ef2:	425b      	negs	r3, r3
 8008ef4:	61a3      	str	r3, [r4, #24]
 8008ef6:	6923      	ldr	r3, [r4, #16]
 8008ef8:	b943      	cbnz	r3, 8008f0c <__swsetup_r+0xa8>
 8008efa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008efe:	d1c4      	bne.n	8008e8a <__swsetup_r+0x26>
 8008f00:	bd38      	pop	{r3, r4, r5, pc}
 8008f02:	0781      	lsls	r1, r0, #30
 8008f04:	bf58      	it	pl
 8008f06:	6963      	ldrpl	r3, [r4, #20]
 8008f08:	60a3      	str	r3, [r4, #8]
 8008f0a:	e7f4      	b.n	8008ef6 <__swsetup_r+0x92>
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	e7f7      	b.n	8008f00 <__swsetup_r+0x9c>
 8008f10:	20002068 	.word	0x20002068

08008f14 <_raise_r>:
 8008f14:	291f      	cmp	r1, #31
 8008f16:	b538      	push	{r3, r4, r5, lr}
 8008f18:	4604      	mov	r4, r0
 8008f1a:	460d      	mov	r5, r1
 8008f1c:	d904      	bls.n	8008f28 <_raise_r+0x14>
 8008f1e:	2316      	movs	r3, #22
 8008f20:	6003      	str	r3, [r0, #0]
 8008f22:	f04f 30ff 	mov.w	r0, #4294967295
 8008f26:	bd38      	pop	{r3, r4, r5, pc}
 8008f28:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f2a:	b112      	cbz	r2, 8008f32 <_raise_r+0x1e>
 8008f2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f30:	b94b      	cbnz	r3, 8008f46 <_raise_r+0x32>
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 f830 	bl	8008f98 <_getpid_r>
 8008f38:	462a      	mov	r2, r5
 8008f3a:	4601      	mov	r1, r0
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f42:	f000 b817 	b.w	8008f74 <_kill_r>
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d00a      	beq.n	8008f60 <_raise_r+0x4c>
 8008f4a:	1c59      	adds	r1, r3, #1
 8008f4c:	d103      	bne.n	8008f56 <_raise_r+0x42>
 8008f4e:	2316      	movs	r3, #22
 8008f50:	6003      	str	r3, [r0, #0]
 8008f52:	2001      	movs	r0, #1
 8008f54:	e7e7      	b.n	8008f26 <_raise_r+0x12>
 8008f56:	2400      	movs	r4, #0
 8008f58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	4798      	blx	r3
 8008f60:	2000      	movs	r0, #0
 8008f62:	e7e0      	b.n	8008f26 <_raise_r+0x12>

08008f64 <raise>:
 8008f64:	4b02      	ldr	r3, [pc, #8]	; (8008f70 <raise+0xc>)
 8008f66:	4601      	mov	r1, r0
 8008f68:	6818      	ldr	r0, [r3, #0]
 8008f6a:	f7ff bfd3 	b.w	8008f14 <_raise_r>
 8008f6e:	bf00      	nop
 8008f70:	20002068 	.word	0x20002068

08008f74 <_kill_r>:
 8008f74:	b538      	push	{r3, r4, r5, lr}
 8008f76:	4d07      	ldr	r5, [pc, #28]	; (8008f94 <_kill_r+0x20>)
 8008f78:	2300      	movs	r3, #0
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	4608      	mov	r0, r1
 8008f7e:	4611      	mov	r1, r2
 8008f80:	602b      	str	r3, [r5, #0]
 8008f82:	f7f8 fb83 	bl	800168c <_kill>
 8008f86:	1c43      	adds	r3, r0, #1
 8008f88:	d102      	bne.n	8008f90 <_kill_r+0x1c>
 8008f8a:	682b      	ldr	r3, [r5, #0]
 8008f8c:	b103      	cbz	r3, 8008f90 <_kill_r+0x1c>
 8008f8e:	6023      	str	r3, [r4, #0]
 8008f90:	bd38      	pop	{r3, r4, r5, pc}
 8008f92:	bf00      	nop
 8008f94:	200034f0 	.word	0x200034f0

08008f98 <_getpid_r>:
 8008f98:	f7f8 bb70 	b.w	800167c <_getpid>

08008f9c <__swhatbuf_r>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa4:	2900      	cmp	r1, #0
 8008fa6:	b096      	sub	sp, #88	; 0x58
 8008fa8:	4615      	mov	r5, r2
 8008faa:	461e      	mov	r6, r3
 8008fac:	da0d      	bge.n	8008fca <__swhatbuf_r+0x2e>
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008fb4:	f04f 0100 	mov.w	r1, #0
 8008fb8:	bf0c      	ite	eq
 8008fba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008fbe:	2340      	movne	r3, #64	; 0x40
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	6031      	str	r1, [r6, #0]
 8008fc4:	602b      	str	r3, [r5, #0]
 8008fc6:	b016      	add	sp, #88	; 0x58
 8008fc8:	bd70      	pop	{r4, r5, r6, pc}
 8008fca:	466a      	mov	r2, sp
 8008fcc:	f000 f848 	bl	8009060 <_fstat_r>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	dbec      	blt.n	8008fae <__swhatbuf_r+0x12>
 8008fd4:	9901      	ldr	r1, [sp, #4]
 8008fd6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008fda:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008fde:	4259      	negs	r1, r3
 8008fe0:	4159      	adcs	r1, r3
 8008fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe6:	e7eb      	b.n	8008fc0 <__swhatbuf_r+0x24>

08008fe8 <__smakebuf_r>:
 8008fe8:	898b      	ldrh	r3, [r1, #12]
 8008fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fec:	079d      	lsls	r5, r3, #30
 8008fee:	4606      	mov	r6, r0
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	d507      	bpl.n	8009004 <__smakebuf_r+0x1c>
 8008ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	6123      	str	r3, [r4, #16]
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	6163      	str	r3, [r4, #20]
 8009000:	b002      	add	sp, #8
 8009002:	bd70      	pop	{r4, r5, r6, pc}
 8009004:	ab01      	add	r3, sp, #4
 8009006:	466a      	mov	r2, sp
 8009008:	f7ff ffc8 	bl	8008f9c <__swhatbuf_r>
 800900c:	9900      	ldr	r1, [sp, #0]
 800900e:	4605      	mov	r5, r0
 8009010:	4630      	mov	r0, r6
 8009012:	f7fe fecb 	bl	8007dac <_malloc_r>
 8009016:	b948      	cbnz	r0, 800902c <__smakebuf_r+0x44>
 8009018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800901c:	059a      	lsls	r2, r3, #22
 800901e:	d4ef      	bmi.n	8009000 <__smakebuf_r+0x18>
 8009020:	f023 0303 	bic.w	r3, r3, #3
 8009024:	f043 0302 	orr.w	r3, r3, #2
 8009028:	81a3      	strh	r3, [r4, #12]
 800902a:	e7e3      	b.n	8008ff4 <__smakebuf_r+0xc>
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	6020      	str	r0, [r4, #0]
 8009030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009034:	81a3      	strh	r3, [r4, #12]
 8009036:	9b00      	ldr	r3, [sp, #0]
 8009038:	6163      	str	r3, [r4, #20]
 800903a:	9b01      	ldr	r3, [sp, #4]
 800903c:	6120      	str	r0, [r4, #16]
 800903e:	b15b      	cbz	r3, 8009058 <__smakebuf_r+0x70>
 8009040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009044:	4630      	mov	r0, r6
 8009046:	f000 f81d 	bl	8009084 <_isatty_r>
 800904a:	b128      	cbz	r0, 8009058 <__smakebuf_r+0x70>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	f023 0303 	bic.w	r3, r3, #3
 8009052:	f043 0301 	orr.w	r3, r3, #1
 8009056:	81a3      	strh	r3, [r4, #12]
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	431d      	orrs	r5, r3
 800905c:	81a5      	strh	r5, [r4, #12]
 800905e:	e7cf      	b.n	8009000 <__smakebuf_r+0x18>

08009060 <_fstat_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4d07      	ldr	r5, [pc, #28]	; (8009080 <_fstat_r+0x20>)
 8009064:	2300      	movs	r3, #0
 8009066:	4604      	mov	r4, r0
 8009068:	4608      	mov	r0, r1
 800906a:	4611      	mov	r1, r2
 800906c:	602b      	str	r3, [r5, #0]
 800906e:	f7f8 fb6c 	bl	800174a <_fstat>
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	d102      	bne.n	800907c <_fstat_r+0x1c>
 8009076:	682b      	ldr	r3, [r5, #0]
 8009078:	b103      	cbz	r3, 800907c <_fstat_r+0x1c>
 800907a:	6023      	str	r3, [r4, #0]
 800907c:	bd38      	pop	{r3, r4, r5, pc}
 800907e:	bf00      	nop
 8009080:	200034f0 	.word	0x200034f0

08009084 <_isatty_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4d06      	ldr	r5, [pc, #24]	; (80090a0 <_isatty_r+0x1c>)
 8009088:	2300      	movs	r3, #0
 800908a:	4604      	mov	r4, r0
 800908c:	4608      	mov	r0, r1
 800908e:	602b      	str	r3, [r5, #0]
 8009090:	f7f8 fb6b 	bl	800176a <_isatty>
 8009094:	1c43      	adds	r3, r0, #1
 8009096:	d102      	bne.n	800909e <_isatty_r+0x1a>
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	b103      	cbz	r3, 800909e <_isatty_r+0x1a>
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	200034f0 	.word	0x200034f0

080090a4 <_init>:
 80090a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a6:	bf00      	nop
 80090a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090aa:	bc08      	pop	{r3}
 80090ac:	469e      	mov	lr, r3
 80090ae:	4770      	bx	lr

080090b0 <_fini>:
 80090b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b2:	bf00      	nop
 80090b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090b6:	bc08      	pop	{r3}
 80090b8:	469e      	mov	lr, r3
 80090ba:	4770      	bx	lr
