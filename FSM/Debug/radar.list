
radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08006018  08006018  00016018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063bc  080063bc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080063bc  080063bc  000163bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063c4  080063c4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063c4  080063c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063c8  080063c8  000163c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080063cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001d4  080065a0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  080065a0  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b761  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f21  00000000  00000000  0002b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  0002d8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000959  00000000  00000000  0002e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a34  00000000  00000000  0002ee51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb26  00000000  00000000  00052885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcfd7  00000000  00000000  000613ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004270  00000000  00000000  0013e384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001425f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005ffc 	.word	0x08005ffc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08005ffc 	.word	0x08005ffc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
//	LightState light_1;
//	LightState light_2;
//	LightState light_3;

	//define states
	State east_west_green = {STATE_EAST_WEST_GREEN, 3000, NULL};
 8000eea:	2300      	movs	r3, #0
 8000eec:	773b      	strb	r3, [r7, #28]
 8000eee:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ef2:	83fb      	strh	r3, [r7, #30]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
	State east_west_transition = {STATE_EAST_WEST_TRANSITION, 1000, NULL};
 8000ef8:	4a3a      	ldr	r2, [pc, #232]	; (8000fe4 <main+0x100>)
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f02:	e883 0003 	stmia.w	r3, {r0, r1}
	State north_south_green = {STATE_NORTH_SOUTH_GREEN, 3000, NULL};
 8000f06:	4a38      	ldr	r2, [pc, #224]	; (8000fe8 <main+0x104>)
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f10:	e883 0003 	stmia.w	r3, {r0, r1}
	State north_south_transition = {STATE_NORTH_SOUTH_TRANSITION, 1000, NULL};
 8000f14:	4a35      	ldr	r2, [pc, #212]	; (8000fec <main+0x108>)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f1c:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f000 fc3c 	bl	800179c <HAL_Init>
  //if(status==HAL_OK)
  //timer = __HAL_TIM_GET_COUNTER(&htim6);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f868 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f000 f96e 	bl	8001208 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f2c:	f000 f94c 	bl	80011c8 <MX_DMA_Init>
  MX_ADC3_Init();
 8000f30:	f000 f8c2 	bl	80010b8 <MX_ADC3_Init>
  MX_TIM6_Init();
 8000f34:	f000 f912 	bl	800115c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //loop the states
  east_west_green.next_state = &east_west_transition;
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	623b      	str	r3, [r7, #32]
  east_west_transition.next_state = &north_south_green;
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	61bb      	str	r3, [r7, #24]
  north_south_green.next_state = &north_south_transition;
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	613b      	str	r3, [r7, #16]
  north_south_transition.next_state = &east_west_green;
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	60bb      	str	r3, [r7, #8]

  //Set initial state
  State* current_state = &east_west_green;
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	4826      	ldr	r0, [pc, #152]	; (8000ff0 <main+0x10c>)
 8000f58:	f001 fcd1 	bl	80028fe <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000f5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f60:	f000 fc8e 	bl	8001880 <HAL_Delay>
	  //timer= __HAL_TIM_GET_COUNTER(&htim6) - timer;
	  //for EW, pin A0 = Red, A1 = Orange, A2 = Green
	    //for NS, pin A3 = Red, A4 = Orange, A5 = Green
	    switch(current_state->trafficState) {
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d837      	bhi.n	8000fdc <main+0xf8>
 8000f6c:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <main+0x90>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	08000f85 	.word	0x08000f85
 8000f78:	08000f9b 	.word	0x08000f9b
 8000f7c:	08000fb1 	.word	0x08000fb1
 8000f80:	08000fc7 	.word	0x08000fc7
	      case STATE_EAST_WEST_GREEN:
	        HAL_GPIO_WritePin(GPIOA, g1_Pin | r2_Pin, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2188      	movs	r1, #136	; 0x88
 8000f88:	481a      	ldr	r0, [pc, #104]	; (8000ff4 <main+0x110>)
 8000f8a:	f001 fc9f 	bl	80028cc <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, r1_Pin | y1_Pin | y2_Pin | g2_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2171      	movs	r1, #113	; 0x71
 8000f92:	4818      	ldr	r0, [pc, #96]	; (8000ff4 <main+0x110>)
 8000f94:	f001 fc9a 	bl	80028cc <HAL_GPIO_WritePin>
	        break;
 8000f98:	e020      	b.n	8000fdc <main+0xf8>
	      case STATE_EAST_WEST_TRANSITION:
	        HAL_GPIO_WritePin(GPIOA, y1_Pin | r2_Pin, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2148      	movs	r1, #72	; 0x48
 8000f9e:	4815      	ldr	r0, [pc, #84]	; (8000ff4 <main+0x110>)
 8000fa0:	f001 fc94 	bl	80028cc <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, r1_Pin | g1_Pin | y2_Pin | g2_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	21b1      	movs	r1, #177	; 0xb1
 8000fa8:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <main+0x110>)
 8000faa:	f001 fc8f 	bl	80028cc <HAL_GPIO_WritePin>
	        break;
 8000fae:	e015      	b.n	8000fdc <main+0xf8>
	      case STATE_NORTH_SOUTH_GREEN:
	        HAL_GPIO_WritePin(GPIOA, r1_Pin | g2_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2121      	movs	r1, #33	; 0x21
 8000fb4:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <main+0x110>)
 8000fb6:	f001 fc89 	bl	80028cc <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, y1_Pin | g1_Pin | r2_Pin | y2_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	21d8      	movs	r1, #216	; 0xd8
 8000fbe:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <main+0x110>)
 8000fc0:	f001 fc84 	bl	80028cc <HAL_GPIO_WritePin>
	        break;
 8000fc4:	e00a      	b.n	8000fdc <main+0xf8>
	      case STATE_NORTH_SOUTH_TRANSITION:
	        HAL_GPIO_WritePin(GPIOA, r1_Pin | y2_Pin, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2130      	movs	r1, #48	; 0x30
 8000fca:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <main+0x110>)
 8000fcc:	f001 fc7e 	bl	80028cc <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, y1_Pin | g1_Pin | r2_Pin | g2_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	21c9      	movs	r1, #201	; 0xc9
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <main+0x110>)
 8000fd6:	f001 fc79 	bl	80028cc <HAL_GPIO_WritePin>
	        break;
 8000fda:	bf00      	nop
	    }
	    current_state=current_state->next_state;
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fe2:	e7b7      	b.n	8000f54 <main+0x70>
 8000fe4:	08006018 	.word	0x08006018
 8000fe8:	08006020 	.word	0x08006020
 8000fec:	08006028 	.word	0x08006028
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2234      	movs	r2, #52	; 0x34
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f003 f8a5 	bl	8004156 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <SystemClock_Config+0xb8>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <SystemClock_Config+0xb8>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <SystemClock_Config+0xb8>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001038:	2300      	movs	r3, #0
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <SystemClock_Config+0xbc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001044:	4a1b      	ldr	r2, [pc, #108]	; (80010b4 <SystemClock_Config+0xbc>)
 8001046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <SystemClock_Config+0xbc>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001058:	2302      	movs	r3, #2
 800105a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105c:	2301      	movs	r3, #1
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001060:	2310      	movs	r3, #16
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001064:	2300      	movs	r3, #0
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fef1 	bl	8002e54 <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001078:	f000 f992 	bl	80013a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fc4c 	bl	8002934 <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010a2:	f000 f97d 	bl	80013a0 <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3750      	adds	r7, #80	; 0x50
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000

080010b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010be:	463b      	mov	r3, r7
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_ADC3_Init+0x98>)
 80010cc:	4a21      	ldr	r2, [pc, #132]	; (8001154 <MX_ADC3_Init+0x9c>)
 80010ce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_ADC3_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <MX_ADC3_Init+0x98>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_ADC3_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_ADC3_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_ADC3_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_ADC3_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_ADC3_Init+0x98>)
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <MX_ADC3_Init+0xa0>)
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_ADC3_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_ADC3_Init+0x98>)
 8001104:	2201      	movs	r2, #1
 8001106:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_ADC3_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_ADC3_Init+0x98>)
 8001112:	2201      	movs	r2, #1
 8001114:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001116:	480e      	ldr	r0, [pc, #56]	; (8001150 <MX_ADC3_Init+0x98>)
 8001118:	f000 fbd6 	bl	80018c8 <HAL_ADC_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001122:	f000 f93d 	bl	80013a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001126:	230f      	movs	r3, #15
 8001128:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <MX_ADC3_Init+0x98>)
 8001138:	f000 fc0a 	bl	8001950 <HAL_ADC_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001142:	f000 f92d 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200001f0 	.word	0x200001f0
 8001154:	40012200 	.word	0x40012200
 8001158:	0f000001 	.word	0x0f000001

0800115c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_TIM6_Init+0x64>)
 800116c:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <MX_TIM6_Init+0x68>)
 800116e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <MX_TIM6_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_TIM6_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <MX_TIM6_Init+0x64>)
 800117e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001182:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_TIM6_Init+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <MX_TIM6_Init+0x64>)
 800118c:	f002 f900 	bl	8003390 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001196:	f000 f903 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <MX_TIM6_Init+0x64>)
 80011a8:	f002 f9ee 	bl	8003588 <HAL_TIMEx_MasterConfigSynchronization>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80011b2:	f000 f8f5 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000298 	.word	0x20000298
 80011c4:	40001000 	.word	0x40001000

080011c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_DMA_Init+0x3c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <MX_DMA_Init+0x3c>)
 80011d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_DMA_Init+0x3c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2038      	movs	r0, #56	; 0x38
 80011f0:	f000 feb7 	bl	8001f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f4:	2038      	movs	r0, #56	; 0x38
 80011f6:	f000 fed0 	bl	8001f9a <HAL_NVIC_EnableIRQ>

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b59      	ldr	r3, [pc, #356]	; (8001388 <MX_GPIO_Init+0x180>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a58      	ldr	r2, [pc, #352]	; (8001388 <MX_GPIO_Init+0x180>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b56      	ldr	r3, [pc, #344]	; (8001388 <MX_GPIO_Init+0x180>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b52      	ldr	r3, [pc, #328]	; (8001388 <MX_GPIO_Init+0x180>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a51      	ldr	r2, [pc, #324]	; (8001388 <MX_GPIO_Init+0x180>)
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b4f      	ldr	r3, [pc, #316]	; (8001388 <MX_GPIO_Init+0x180>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <MX_GPIO_Init+0x180>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a4a      	ldr	r2, [pc, #296]	; (8001388 <MX_GPIO_Init+0x180>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b48      	ldr	r3, [pc, #288]	; (8001388 <MX_GPIO_Init+0x180>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b44      	ldr	r3, [pc, #272]	; (8001388 <MX_GPIO_Init+0x180>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a43      	ldr	r2, [pc, #268]	; (8001388 <MX_GPIO_Init+0x180>)
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b41      	ldr	r3, [pc, #260]	; (8001388 <MX_GPIO_Init+0x180>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <MX_GPIO_Init+0x180>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a3c      	ldr	r2, [pc, #240]	; (8001388 <MX_GPIO_Init+0x180>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <MX_GPIO_Init+0x180>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Btn_Push_GPIO_Port, Btn_Push_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b0:	4836      	ldr	r0, [pc, #216]	; (800138c <MX_GPIO_Init+0x184>)
 80012b2:	f001 fb0b 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012bc:	4834      	ldr	r0, [pc, #208]	; (8001390 <MX_GPIO_Init+0x188>)
 80012be:	f001 fb05 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, g2_Pin|r2_Pin|y2_Pin|r1_Pin
 80012c2:	2200      	movs	r2, #0
 80012c4:	21f9      	movs	r1, #249	; 0xf9
 80012c6:	4833      	ldr	r0, [pc, #204]	; (8001394 <MX_GPIO_Init+0x18c>)
 80012c8:	f001 fb00 	bl	80028cc <HAL_GPIO_WritePin>
                          |y1_Pin|g1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Red_3_GPIO_Port, Red_3_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d2:	482f      	ldr	r0, [pc, #188]	; (8001390 <MX_GPIO_Init+0x188>)
 80012d4:	f001 fafa 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Yellow_3_Pin|Green_3_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80012de:	482e      	ldr	r0, [pc, #184]	; (8001398 <MX_GPIO_Init+0x190>)
 80012e0:	f001 faf4 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	482c      	ldr	r0, [pc, #176]	; (800139c <MX_GPIO_Init+0x194>)
 80012ea:	f001 faef 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Btn_Push_Pin */
  GPIO_InitStruct.Pin = Btn_Push_Pin;
 80012ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Btn_Push_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4821      	ldr	r0, [pc, #132]	; (800138c <MX_GPIO_Init+0x184>)
 8001308:	f001 f94c 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_LED_Pin Red_3_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin|Red_3_Pin;
 800130c:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	481a      	ldr	r0, [pc, #104]	; (8001390 <MX_GPIO_Init+0x188>)
 8001326:	f001 f93d 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : g2_Pin r2_Pin y2_Pin r1_Pin
                           y1_Pin g1_Pin */
  GPIO_InitStruct.Pin = g2_Pin|r2_Pin|y2_Pin|r1_Pin
 800132a:	23f9      	movs	r3, #249	; 0xf9
 800132c:	617b      	str	r3, [r7, #20]
                          |y1_Pin|g1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4814      	ldr	r0, [pc, #80]	; (8001394 <MX_GPIO_Init+0x18c>)
 8001342:	f001 f92f 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Yellow_3_Pin Green_3_Pin */
  GPIO_InitStruct.Pin = Yellow_3_Pin|Green_3_Pin;
 8001346:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <MX_GPIO_Init+0x190>)
 8001360:	f001 f920 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <MX_GPIO_Init+0x194>)
 800137c:	f001 f912 	bl	80025a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	40020800 	.word	0x40020800
 8001390:	40021400 	.word	0x40021400
 8001394:	40020000 	.word	0x40020000
 8001398:	40021000 	.word	0x40021000
 800139c:	40020400 	.word	0x40020400

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <Error_Handler+0x8>
	...

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_MspInit+0x4c>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <HAL_MspInit+0x4c>)
 80013bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_MspInit+0x4c>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_MspInit+0x4c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <HAL_MspInit+0x4c>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_MspInit+0x4c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <HAL_ADC_MspInit+0xdc>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d158      	bne.n	80014d0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <HAL_ADC_MspInit+0xe0>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <HAL_ADC_MspInit+0xe0>)
 8001428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <HAL_ADC_MspInit+0xe0>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_ADC_MspInit+0xe0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a26      	ldr	r2, [pc, #152]	; (80014dc <HAL_ADC_MspInit+0xe0>)
 8001444:	f043 0320 	orr.w	r3, r3, #32
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <HAL_ADC_MspInit+0xe0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0320 	and.w	r3, r3, #32
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF5     ------> ADC3_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001456:	2320      	movs	r3, #32
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145a:	2303      	movs	r3, #3
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	481d      	ldr	r0, [pc, #116]	; (80014e0 <HAL_ADC_MspInit+0xe4>)
 800146a:	f001 f89b 	bl	80025a4 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 8001470:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <HAL_ADC_MspInit+0xec>)
 8001472:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 8001476:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800147a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 800148a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800148e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 8001492:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001496:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 800149a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800149e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 80014a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80014b4:	480b      	ldr	r0, [pc, #44]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 80014b6:	f000 fd8b 	bl	8001fd0 <HAL_DMA_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80014c0:	f7ff ff6e 	bl	80013a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 80014c8:	639a      	str	r2, [r3, #56]	; 0x38
 80014ca:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40012200 	.word	0x40012200
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40021400 	.word	0x40021400
 80014e4:	20000238 	.word	0x20000238
 80014e8:	40026410 	.word	0x40026410

080014ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_TIM_Base_MspInit+0x3c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d10d      	bne.n	800151a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_TIM_Base_MspInit+0x40>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a09      	ldr	r2, [pc, #36]	; (800152c <HAL_TIM_Base_MspInit+0x40>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <HAL_TIM_Base_MspInit+0x40>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40001000 	.word	0x40001000
 800152c:	40023800 	.word	0x40023800

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157c:	f000 f960 	bl	8001840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <DMA2_Stream0_IRQHandler+0x10>)
 800158a:	f000 fdcf 	bl	800212c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000238 	.word	0x20000238

08001598 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return 1;
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <_kill>:

int _kill(int pid, int sig)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015b2:	f002 fe23 	bl	80041fc <__errno>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2216      	movs	r2, #22
 80015ba:	601a      	str	r2, [r3, #0]
  return -1;
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_exit>:

void _exit (int status)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ffe7 	bl	80015a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015da:	e7fe      	b.n	80015da <_exit+0x12>

080015dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e00a      	b.n	8001604 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ee:	f3af 8000 	nop.w
 80015f2:	4601      	mov	r1, r0
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	60ba      	str	r2, [r7, #8]
 80015fa:	b2ca      	uxtb	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	dbf0      	blt.n	80015ee <_read+0x12>
  }

  return len;
 800160c:	687b      	ldr	r3, [r7, #4]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e009      	b.n	800163c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	dbf1      	blt.n	8001628 <_write+0x12>
  }
  return len;
 8001644:	687b      	ldr	r3, [r7, #4]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_close>:

int _close(int file)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001676:	605a      	str	r2, [r3, #4]
  return 0;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_isatty>:

int _isatty(int file)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f002 fd88 	bl	80041fc <__errno>
 80016ec:	4603      	mov	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20020000 	.word	0x20020000
 8001718:	00000400 	.word	0x00000400
 800171c:	200002e0 	.word	0x200002e0
 8001720:	20000438 	.word	0x20000438

08001724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <SystemInit+0x20>)
 800172a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <SystemInit+0x20>)
 8001730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001780 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800174c:	f7ff ffea 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001752:	490d      	ldr	r1, [pc, #52]	; (8001788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001754:	4a0d      	ldr	r2, [pc, #52]	; (800178c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001768:	4c0a      	ldr	r4, [pc, #40]	; (8001794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001776:	f002 fd47 	bl	8004208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fbb3 	bl	8000ee4 <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800178c:	080063cc 	.word	0x080063cc
  ldr r2, =_sbss
 8001790:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001794:	20000434 	.word	0x20000434

08001798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <HAL_Init+0x40>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_Init+0x40>)
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_Init+0x40>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 fbc1 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	200f      	movs	r0, #15
 80017cc:	f000 f808 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fdec 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x54>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x58>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fbd9 	bl	8001fb6 <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e00e      	b.n	800182c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d80a      	bhi.n	800182a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f000 fba1 	bl	8001f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <HAL_InitTick+0x5c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000000 	.word	0x20000000
 8001838:	20000008 	.word	0x20000008
 800183c:	20000004 	.word	0x20000004

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000008 	.word	0x20000008
 8001864:	200002e4 	.word	0x200002e4

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	200002e4 	.word	0x200002e4

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff ffee 	bl	8001868 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_Delay+0x44>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffde 	bl	8001868 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000008 	.word	0x20000008

080018c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e033      	b.n	8001946 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fd88 	bl	80013fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	2b00      	cmp	r3, #0
 8001904:	d118      	bne.n	8001938 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800190e:	f023 0302 	bic.w	r3, r3, #2
 8001912:	f043 0202 	orr.w	r2, r3, #2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f94a 	bl	8001bb4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f023 0303 	bic.w	r3, r3, #3
 800192e:	f043 0201 	orr.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
 8001936:	e001      	b.n	800193c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_ADC_ConfigChannel+0x1c>
 8001968:	2302      	movs	r3, #2
 800196a:	e113      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x244>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b09      	cmp	r3, #9
 800197a:	d925      	bls.n	80019c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68d9      	ldr	r1, [r3, #12]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	3b1e      	subs	r3, #30
 8001992:	2207      	movs	r2, #7
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43da      	mvns	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	400a      	ands	r2, r1
 80019a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68d9      	ldr	r1, [r3, #12]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	4603      	mov	r3, r0
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4403      	add	r3, r0
 80019ba:	3b1e      	subs	r3, #30
 80019bc:	409a      	lsls	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	e022      	b.n	8001a0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6919      	ldr	r1, [r3, #16]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	2207      	movs	r2, #7
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	400a      	ands	r2, r1
 80019ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6919      	ldr	r1, [r3, #16]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	4603      	mov	r3, r0
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4403      	add	r3, r0
 8001a04:	409a      	lsls	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d824      	bhi.n	8001a60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	3b05      	subs	r3, #5
 8001a28:	221f      	movs	r2, #31
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	400a      	ands	r2, r1
 8001a36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b05      	subs	r3, #5
 8001a52:	fa00 f203 	lsl.w	r2, r0, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a5e:	e04c      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b0c      	cmp	r3, #12
 8001a66:	d824      	bhi.n	8001ab2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	3b23      	subs	r3, #35	; 0x23
 8001a7a:	221f      	movs	r2, #31
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43da      	mvns	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	400a      	ands	r2, r1
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3b23      	subs	r3, #35	; 0x23
 8001aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30
 8001ab0:	e023      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3b41      	subs	r3, #65	; 0x41
 8001ac4:	221f      	movs	r2, #31
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	3b41      	subs	r3, #65	; 0x41
 8001aee:	fa00 f203 	lsl.w	r2, r0, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001afa:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <HAL_ADC_ConfigChannel+0x250>)
 8001afc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a28      	ldr	r2, [pc, #160]	; (8001ba4 <HAL_ADC_ConfigChannel+0x254>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d10f      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d8>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b12      	cmp	r3, #18
 8001b0e:	d10b      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ba4 <HAL_ADC_ConfigChannel+0x254>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d12b      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x23a>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <HAL_ADC_ConfigChannel+0x258>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d003      	beq.n	8001b44 <HAL_ADC_ConfigChannel+0x1f4>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b11      	cmp	r3, #17
 8001b42:	d122      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <HAL_ADC_ConfigChannel+0x258>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d111      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_ADC_ConfigChannel+0x25c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <HAL_ADC_ConfigChannel+0x260>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	0c9a      	lsrs	r2, r3, #18
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b7c:	e002      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f9      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40012300 	.word	0x40012300
 8001ba4:	40012000 	.word	0x40012000
 8001ba8:	10000012 	.word	0x10000012
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	431bde83 	.word	0x431bde83

08001bb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bbc:	4b79      	ldr	r3, [pc, #484]	; (8001da4 <ADC_Init+0x1f0>)
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001be8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	021a      	lsls	r2, r3, #8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6899      	ldr	r1, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	4a58      	ldr	r2, [pc, #352]	; (8001da8 <ADC_Init+0x1f4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d022      	beq.n	8001c92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6899      	ldr	r1, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6899      	ldr	r1, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	e00f      	b.n	8001cb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ca0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cb0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0202 	bic.w	r2, r2, #2
 8001cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6899      	ldr	r1, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7e1b      	ldrb	r3, [r3, #24]
 8001ccc:	005a      	lsls	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01b      	beq.n	8001d18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	035a      	lsls	r2, r3, #13
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	e007      	b.n	8001d28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d26:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	051a      	lsls	r2, r3, #20
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6899      	ldr	r1, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d6a:	025a      	lsls	r2, r3, #9
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6899      	ldr	r1, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	029a      	lsls	r2, r3, #10
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	609a      	str	r2, [r3, #8]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40012300 	.word	0x40012300
 8001da8:	0f000001 	.word	0x0f000001

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <__NVIC_EnableIRQ+0x38>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f18:	d301      	bcc.n	8001f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00f      	b.n	8001f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <SysTick_Config+0x40>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f26:	210f      	movs	r1, #15
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f7ff ff8e 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <SysTick_Config+0x40>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <SysTick_Config+0x40>)
 8001f38:	2207      	movs	r2, #7
 8001f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	e000e010 	.word	0xe000e010

08001f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff29 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f74:	f7ff ff3e 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff ff8e 	bl	8001ea0 <NVIC_EncodePriority>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff5d 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff31 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ffa2 	bl	8001f08 <SysTick_Config>
 8001fc4:	4603      	mov	r3, r0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff fc44 	bl	8001868 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e099      	b.n	8002120 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200c:	e00f      	b.n	800202e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200e:	f7ff fc2b 	bl	8001868 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b05      	cmp	r3, #5
 800201a:	d908      	bls.n	800202e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2203      	movs	r2, #3
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e078      	b.n	8002120 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e8      	bne.n	800200e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	4b38      	ldr	r3, [pc, #224]	; (8002128 <HAL_DMA_Init+0x158>)
 8002048:	4013      	ands	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800205a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	2b04      	cmp	r3, #4
 8002086:	d107      	bne.n	8002098 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	4313      	orrs	r3, r2
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f023 0307 	bic.w	r3, r3, #7
 80020ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d117      	bne.n	80020f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00e      	beq.n	80020f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f9e9 	bl	80024ac <DMA_CheckFifoParam>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2240      	movs	r2, #64	; 0x40
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020ee:	2301      	movs	r3, #1
 80020f0:	e016      	b.n	8002120 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f9a0 	bl	8002440 <DMA_CalcBaseAndBitshift>
 8002100:	4603      	mov	r3, r0
 8002102:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	223f      	movs	r2, #63	; 0x3f
 800210a:	409a      	lsls	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	f010803f 	.word	0xf010803f

0800212c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002138:	4b8e      	ldr	r3, [pc, #568]	; (8002374 <HAL_DMA_IRQHandler+0x248>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a8e      	ldr	r2, [pc, #568]	; (8002378 <HAL_DMA_IRQHandler+0x24c>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0a9b      	lsrs	r3, r3, #10
 8002144:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002156:	2208      	movs	r2, #8
 8002158:	409a      	lsls	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01a      	beq.n	8002198 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0204 	bic.w	r2, r2, #4
 800217e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002184:	2208      	movs	r2, #8
 8002186:	409a      	lsls	r2, r3
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219c:	2201      	movs	r2, #1
 800219e:	409a      	lsls	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d012      	beq.n	80021ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	2201      	movs	r2, #1
 80021bc:	409a      	lsls	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c6:	f043 0202 	orr.w	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	2204      	movs	r2, #4
 80021d4:	409a      	lsls	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d012      	beq.n	8002204 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00b      	beq.n	8002204 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	2204      	movs	r2, #4
 80021f2:	409a      	lsls	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	f043 0204 	orr.w	r2, r3, #4
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	2210      	movs	r2, #16
 800220a:	409a      	lsls	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d043      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d03c      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	2210      	movs	r2, #16
 8002228:	409a      	lsls	r2, r3
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d018      	beq.n	800226e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d108      	bne.n	800225c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d024      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	4798      	blx	r3
 800225a:	e01f      	b.n	800229c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002260:	2b00      	cmp	r3, #0
 8002262:	d01b      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
 800226c:	e016      	b.n	800229c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d107      	bne.n	800228c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0208 	bic.w	r2, r2, #8
 800228a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	2220      	movs	r2, #32
 80022a2:	409a      	lsls	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 808f 	beq.w	80023cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8087 	beq.w	80023cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	2220      	movs	r2, #32
 80022c4:	409a      	lsls	r2, r3
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d136      	bne.n	8002344 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0216 	bic.w	r2, r2, #22
 80022e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <HAL_DMA_IRQHandler+0x1da>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0208 	bic.w	r2, r2, #8
 8002314:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231a:	223f      	movs	r2, #63	; 0x3f
 800231c:	409a      	lsls	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002336:	2b00      	cmp	r3, #0
 8002338:	d07e      	beq.n	8002438 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	4798      	blx	r3
        }
        return;
 8002342:	e079      	b.n	8002438 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d01d      	beq.n	800238e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10d      	bne.n	800237c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	2b00      	cmp	r3, #0
 8002366:	d031      	beq.n	80023cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	4798      	blx	r3
 8002370:	e02c      	b.n	80023cc <HAL_DMA_IRQHandler+0x2a0>
 8002372:	bf00      	nop
 8002374:	20000000 	.word	0x20000000
 8002378:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d023      	beq.n	80023cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
 800238c:	e01e      	b.n	80023cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10f      	bne.n	80023bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0210 	bic.w	r2, r2, #16
 80023aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d032      	beq.n	800243a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d022      	beq.n	8002426 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2205      	movs	r2, #5
 80023e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	3301      	adds	r3, #1
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	429a      	cmp	r2, r3
 8002402:	d307      	bcc.n	8002414 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f2      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x2cc>
 8002412:	e000      	b.n	8002416 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002414:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	4798      	blx	r3
 8002436:	e000      	b.n	800243a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002438:	bf00      	nop
    }
  }
}
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	3b10      	subs	r3, #16
 8002450:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <DMA_CalcBaseAndBitshift+0x64>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800245a:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <DMA_CalcBaseAndBitshift+0x68>)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d909      	bls.n	8002482 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002476:	f023 0303 	bic.w	r3, r3, #3
 800247a:	1d1a      	adds	r2, r3, #4
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	659a      	str	r2, [r3, #88]	; 0x58
 8002480:	e007      	b.n	8002492 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800248a:	f023 0303 	bic.w	r3, r3, #3
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	aaaaaaab 	.word	0xaaaaaaab
 80024a8:	08006040 	.word	0x08006040

080024ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d11f      	bne.n	8002506 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d856      	bhi.n	800257a <DMA_CheckFifoParam+0xce>
 80024cc:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <DMA_CheckFifoParam+0x28>)
 80024ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d2:	bf00      	nop
 80024d4:	080024e5 	.word	0x080024e5
 80024d8:	080024f7 	.word	0x080024f7
 80024dc:	080024e5 	.word	0x080024e5
 80024e0:	0800257b 	.word	0x0800257b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d046      	beq.n	800257e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f4:	e043      	b.n	800257e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024fe:	d140      	bne.n	8002582 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002504:	e03d      	b.n	8002582 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250e:	d121      	bne.n	8002554 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d837      	bhi.n	8002586 <DMA_CheckFifoParam+0xda>
 8002516:	a201      	add	r2, pc, #4	; (adr r2, 800251c <DMA_CheckFifoParam+0x70>)
 8002518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251c:	0800252d 	.word	0x0800252d
 8002520:	08002533 	.word	0x08002533
 8002524:	0800252d 	.word	0x0800252d
 8002528:	08002545 	.word	0x08002545
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
      break;
 8002530:	e030      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d025      	beq.n	800258a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002542:	e022      	b.n	800258a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800254c:	d11f      	bne.n	800258e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002552:	e01c      	b.n	800258e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d903      	bls.n	8002562 <DMA_CheckFifoParam+0xb6>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d003      	beq.n	8002568 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002560:	e018      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
      break;
 8002566:	e015      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00e      	beq.n	8002592 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      break;
 8002578:	e00b      	b.n	8002592 <DMA_CheckFifoParam+0xe6>
      break;
 800257a:	bf00      	nop
 800257c:	e00a      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 800257e:	bf00      	nop
 8002580:	e008      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 8002582:	bf00      	nop
 8002584:	e006      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 8002586:	bf00      	nop
 8002588:	e004      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 800258a:	bf00      	nop
 800258c:	e002      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;   
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 8002592:	bf00      	nop
    }
  } 
  
  return status; 
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop

080025a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	e165      	b.n	800288c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	429a      	cmp	r2, r3
 80025da:	f040 8154 	bne.w	8002886 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d005      	beq.n	80025f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d130      	bne.n	8002658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 0201 	and.w	r2, r3, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b03      	cmp	r3, #3
 8002662:	d017      	beq.n	8002694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d123      	bne.n	80026e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	08da      	lsrs	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3208      	adds	r2, #8
 80026a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	220f      	movs	r2, #15
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	08da      	lsrs	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3208      	adds	r2, #8
 80026e2:	69b9      	ldr	r1, [r7, #24]
 80026e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0203 	and.w	r2, r3, #3
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80ae 	beq.w	8002886 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <HAL_GPIO_Init+0x300>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a5c      	ldr	r2, [pc, #368]	; (80028a4 <HAL_GPIO_Init+0x300>)
 8002734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b5a      	ldr	r3, [pc, #360]	; (80028a4 <HAL_GPIO_Init+0x300>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002746:	4a58      	ldr	r2, [pc, #352]	; (80028a8 <HAL_GPIO_Init+0x304>)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	220f      	movs	r2, #15
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4f      	ldr	r2, [pc, #316]	; (80028ac <HAL_GPIO_Init+0x308>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d025      	beq.n	80027be <HAL_GPIO_Init+0x21a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4e      	ldr	r2, [pc, #312]	; (80028b0 <HAL_GPIO_Init+0x30c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01f      	beq.n	80027ba <HAL_GPIO_Init+0x216>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4d      	ldr	r2, [pc, #308]	; (80028b4 <HAL_GPIO_Init+0x310>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d019      	beq.n	80027b6 <HAL_GPIO_Init+0x212>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4c      	ldr	r2, [pc, #304]	; (80028b8 <HAL_GPIO_Init+0x314>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0x20e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4b      	ldr	r2, [pc, #300]	; (80028bc <HAL_GPIO_Init+0x318>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00d      	beq.n	80027ae <HAL_GPIO_Init+0x20a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4a      	ldr	r2, [pc, #296]	; (80028c0 <HAL_GPIO_Init+0x31c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <HAL_GPIO_Init+0x206>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a49      	ldr	r2, [pc, #292]	; (80028c4 <HAL_GPIO_Init+0x320>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_GPIO_Init+0x202>
 80027a2:	2306      	movs	r3, #6
 80027a4:	e00c      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027a6:	2307      	movs	r3, #7
 80027a8:	e00a      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027aa:	2305      	movs	r3, #5
 80027ac:	e008      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027ae:	2304      	movs	r3, #4
 80027b0:	e006      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027b2:	2303      	movs	r3, #3
 80027b4:	e004      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e002      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027be:	2300      	movs	r3, #0
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	f002 0203 	and.w	r2, r2, #3
 80027c6:	0092      	lsls	r2, r2, #2
 80027c8:	4093      	lsls	r3, r2
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d0:	4935      	ldr	r1, [pc, #212]	; (80028a8 <HAL_GPIO_Init+0x304>)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	3302      	adds	r3, #2
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027de:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <HAL_GPIO_Init+0x324>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002802:	4a31      	ldr	r2, [pc, #196]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <HAL_GPIO_Init+0x324>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800282c:	4a26      	ldr	r2, [pc, #152]	; (80028c8 <HAL_GPIO_Init+0x324>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002832:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002856:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <HAL_GPIO_Init+0x324>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002880:	4a11      	ldr	r2, [pc, #68]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3301      	adds	r3, #1
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b0f      	cmp	r3, #15
 8002890:	f67f ae96 	bls.w	80025c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3724      	adds	r7, #36	; 0x24
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40013800 	.word	0x40013800
 80028ac:	40020000 	.word	0x40020000
 80028b0:	40020400 	.word	0x40020400
 80028b4:	40020800 	.word	0x40020800
 80028b8:	40020c00 	.word	0x40020c00
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40021400 	.word	0x40021400
 80028c4:	40021800 	.word	0x40021800
 80028c8:	40013c00 	.word	0x40013c00

080028cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e8:	e003      	b.n	80028f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ea:	887b      	ldrh	r3, [r7, #2]
 80028ec:	041a      	lsls	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	619a      	str	r2, [r3, #24]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	460b      	mov	r3, r1
 8002908:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002910:	887a      	ldrh	r2, [r7, #2]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	041a      	lsls	r2, r3, #16
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43d9      	mvns	r1, r3
 800291c:	887b      	ldrh	r3, [r7, #2]
 800291e:	400b      	ands	r3, r1
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	619a      	str	r2, [r3, #24]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0cc      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002948:	4b68      	ldr	r3, [pc, #416]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d90c      	bls.n	8002970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b65      	ldr	r3, [pc, #404]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b63      	ldr	r3, [pc, #396]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0b8      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ac:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	494d      	ldr	r1, [pc, #308]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d044      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d119      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e07f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e06f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e067      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a12:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f023 0203 	bic.w	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4934      	ldr	r1, [pc, #208]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a24:	f7fe ff20 	bl	8001868 <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2c:	f7fe ff1c 	bl	8001868 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e04f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 020c 	and.w	r2, r3, #12
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d1eb      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a54:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d20c      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e032      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4916      	ldr	r1, [pc, #88]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	490e      	ldr	r1, [pc, #56]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aba:	f000 f821 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	490a      	ldr	r1, [pc, #40]	; (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	5ccb      	ldrb	r3, [r1, r3]
 8002ace:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad2:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fe80 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023c00 	.word	0x40023c00
 8002af0:	40023800 	.word	0x40023800
 8002af4:	08006030 	.word	0x08006030
 8002af8:	20000000 	.word	0x20000000
 8002afc:	20000004 	.word	0x20000004

08002b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b04:	b0a6      	sub	sp, #152	; 0x98
 8002b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b26:	4bc8      	ldr	r3, [pc, #800]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	f200 817e 	bhi.w	8002e30 <HAL_RCC_GetSysClockFreq+0x330>
 8002b34:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3a:	bf00      	nop
 8002b3c:	08002b71 	.word	0x08002b71
 8002b40:	08002e31 	.word	0x08002e31
 8002b44:	08002e31 	.word	0x08002e31
 8002b48:	08002e31 	.word	0x08002e31
 8002b4c:	08002b79 	.word	0x08002b79
 8002b50:	08002e31 	.word	0x08002e31
 8002b54:	08002e31 	.word	0x08002e31
 8002b58:	08002e31 	.word	0x08002e31
 8002b5c:	08002b81 	.word	0x08002b81
 8002b60:	08002e31 	.word	0x08002e31
 8002b64:	08002e31 	.word	0x08002e31
 8002b68:	08002e31 	.word	0x08002e31
 8002b6c:	08002ceb 	.word	0x08002ceb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b70:	4bb6      	ldr	r3, [pc, #728]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002b76:	e15f      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b78:	4bb5      	ldr	r3, [pc, #724]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002b7e:	e15b      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b80:	4bb1      	ldr	r3, [pc, #708]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8c:	4bae      	ldr	r3, [pc, #696]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d031      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b98:	4bab      	ldr	r3, [pc, #684]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	099b      	lsrs	r3, r3, #6
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ba2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002baa:	663b      	str	r3, [r7, #96]	; 0x60
 8002bac:	2300      	movs	r3, #0
 8002bae:	667b      	str	r3, [r7, #100]	; 0x64
 8002bb0:	4ba7      	ldr	r3, [pc, #668]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002bb2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002bb6:	462a      	mov	r2, r5
 8002bb8:	fb03 f202 	mul.w	r2, r3, r2
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	4aa2      	ldr	r2, [pc, #648]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002bc8:	4621      	mov	r1, r4
 8002bca:	fba1 1202 	umull	r1, r2, r1, r2
 8002bce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	67ba      	str	r2, [r7, #120]	; 0x78
 8002bd4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002bd6:	4413      	add	r3, r2
 8002bd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bde:	2200      	movs	r2, #0
 8002be0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002be2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002be4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002be8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002bec:	f7fd fffc 	bl	8000be8 <__aeabi_uldivmod>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002bfa:	e064      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfc:	4b92      	ldr	r3, [pc, #584]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	099b      	lsrs	r3, r3, #6
 8002c02:	2200      	movs	r2, #0
 8002c04:	653b      	str	r3, [r7, #80]	; 0x50
 8002c06:	657a      	str	r2, [r7, #84]	; 0x54
 8002c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c10:	2300      	movs	r3, #0
 8002c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c14:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002c18:	4622      	mov	r2, r4
 8002c1a:	462b      	mov	r3, r5
 8002c1c:	f04f 0000 	mov.w	r0, #0
 8002c20:	f04f 0100 	mov.w	r1, #0
 8002c24:	0159      	lsls	r1, r3, #5
 8002c26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c2a:	0150      	lsls	r0, r2, #5
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4621      	mov	r1, r4
 8002c32:	1a51      	subs	r1, r2, r1
 8002c34:	6139      	str	r1, [r7, #16]
 8002c36:	4629      	mov	r1, r5
 8002c38:	eb63 0301 	sbc.w	r3, r3, r1
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c4a:	4659      	mov	r1, fp
 8002c4c:	018b      	lsls	r3, r1, #6
 8002c4e:	4651      	mov	r1, sl
 8002c50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c54:	4651      	mov	r1, sl
 8002c56:	018a      	lsls	r2, r1, #6
 8002c58:	4651      	mov	r1, sl
 8002c5a:	ebb2 0801 	subs.w	r8, r2, r1
 8002c5e:	4659      	mov	r1, fp
 8002c60:	eb63 0901 	sbc.w	r9, r3, r1
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c78:	4690      	mov	r8, r2
 8002c7a:	4699      	mov	r9, r3
 8002c7c:	4623      	mov	r3, r4
 8002c7e:	eb18 0303 	adds.w	r3, r8, r3
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	462b      	mov	r3, r5
 8002c86:	eb49 0303 	adc.w	r3, r9, r3
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c98:	4629      	mov	r1, r5
 8002c9a:	028b      	lsls	r3, r1, #10
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	028a      	lsls	r2, r1, #10
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cae:	2200      	movs	r2, #0
 8002cb0:	643b      	str	r3, [r7, #64]	; 0x40
 8002cb2:	647a      	str	r2, [r7, #68]	; 0x44
 8002cb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cb8:	f7fd ff96 	bl	8000be8 <__aeabi_uldivmod>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc6:	4b60      	ldr	r3, [pc, #384]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	0c1b      	lsrs	r3, r3, #16
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002cd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002ce8:	e0a6      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cea:	4b57      	ldr	r3, [pc, #348]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf6:	4b54      	ldr	r3, [pc, #336]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d02a      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d02:	4b51      	ldr	r3, [pc, #324]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	099b      	lsrs	r3, r3, #6
 8002d08:	2200      	movs	r2, #0
 8002d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d14:	2100      	movs	r1, #0
 8002d16:	4b4e      	ldr	r3, [pc, #312]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d18:	fb03 f201 	mul.w	r2, r3, r1
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	fb00 f303 	mul.w	r3, r0, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	4a4a      	ldr	r2, [pc, #296]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d26:	fba0 1202 	umull	r1, r2, r0, r2
 8002d2a:	677a      	str	r2, [r7, #116]	; 0x74
 8002d2c:	460a      	mov	r2, r1
 8002d2e:	673a      	str	r2, [r7, #112]	; 0x70
 8002d30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d32:	4413      	add	r3, r2
 8002d34:	677b      	str	r3, [r7, #116]	; 0x74
 8002d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d3e:	637a      	str	r2, [r7, #52]	; 0x34
 8002d40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d44:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002d48:	f7fd ff4e 	bl	8000be8 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4613      	mov	r3, r2
 8002d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d56:	e05b      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d58:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	2200      	movs	r2, #0
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6a:	623b      	str	r3, [r7, #32]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d74:	4642      	mov	r2, r8
 8002d76:	464b      	mov	r3, r9
 8002d78:	f04f 0000 	mov.w	r0, #0
 8002d7c:	f04f 0100 	mov.w	r1, #0
 8002d80:	0159      	lsls	r1, r3, #5
 8002d82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d86:	0150      	lsls	r0, r2, #5
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4641      	mov	r1, r8
 8002d8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d92:	4649      	mov	r1, r9
 8002d94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002da4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002da8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dac:	ebb2 040a 	subs.w	r4, r2, sl
 8002db0:	eb63 050b 	sbc.w	r5, r3, fp
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	00eb      	lsls	r3, r5, #3
 8002dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dc2:	00e2      	lsls	r2, r4, #3
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	4643      	mov	r3, r8
 8002dca:	18e3      	adds	r3, r4, r3
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	464b      	mov	r3, r9
 8002dd0:	eb45 0303 	adc.w	r3, r5, r3
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002de2:	4629      	mov	r1, r5
 8002de4:	028b      	lsls	r3, r1, #10
 8002de6:	4621      	mov	r1, r4
 8002de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dec:	4621      	mov	r1, r4
 8002dee:	028a      	lsls	r2, r1, #10
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002df8:	2200      	movs	r2, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	61fa      	str	r2, [r7, #28]
 8002dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e02:	f7fd fef1 	bl	8000be8 <__aeabi_uldivmod>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e10:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	0f1b      	lsrs	r3, r3, #28
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002e1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002e2e:	e003      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002e32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002e36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3798      	adds	r7, #152	; 0x98
 8002e40:	46bd      	mov	sp, r7
 8002e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	00f42400 	.word	0x00f42400
 8002e50:	017d7840 	.word	0x017d7840

08002e54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e28d      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8083 	beq.w	8002f7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e74:	4b94      	ldr	r3, [pc, #592]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d019      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e80:	4b91      	ldr	r3, [pc, #580]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e8c:	4b8e      	ldr	r3, [pc, #568]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e98:	d00c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9a:	4b8b      	ldr	r3, [pc, #556]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d112      	bne.n	8002ecc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b88      	ldr	r3, [pc, #544]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb2:	d10b      	bne.n	8002ecc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	4b84      	ldr	r3, [pc, #528]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d05b      	beq.n	8002f78 <HAL_RCC_OscConfig+0x124>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d157      	bne.n	8002f78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e25a      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x90>
 8002ed6:	4b7c      	ldr	r3, [pc, #496]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a7b      	ldr	r2, [pc, #492]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e01d      	b.n	8002f20 <HAL_RCC_OscConfig+0xcc>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0xb4>
 8002eee:	4b76      	ldr	r3, [pc, #472]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a75      	ldr	r2, [pc, #468]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b73      	ldr	r3, [pc, #460]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a72      	ldr	r2, [pc, #456]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0xcc>
 8002f08:	4b6f      	ldr	r3, [pc, #444]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a6e      	ldr	r2, [pc, #440]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b6c      	ldr	r3, [pc, #432]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a6b      	ldr	r2, [pc, #428]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fc9e 	bl	8001868 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe fc9a 	bl	8001868 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e21f      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b61      	ldr	r3, [pc, #388]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0xdc>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe fc8a 	bl	8001868 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fc86 	bl	8001868 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e20b      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	4b57      	ldr	r3, [pc, #348]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x104>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d06f      	beq.n	8003066 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f86:	4b50      	ldr	r3, [pc, #320]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d017      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f92:	4b4d      	ldr	r3, [pc, #308]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d105      	bne.n	8002faa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f9e:	4b4a      	ldr	r3, [pc, #296]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00b      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002faa:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	d11c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb6:	4b44      	ldr	r3, [pc, #272]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d116      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_RCC_OscConfig+0x186>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d001      	beq.n	8002fda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e1d3      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fda:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4937      	ldr	r1, [pc, #220]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	e03a      	b.n	8003066 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d020      	beq.n	800303a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff8:	4b34      	ldr	r3, [pc, #208]	; (80030cc <HAL_RCC_OscConfig+0x278>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fe fc33 	bl	8001868 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003006:	f7fe fc2f 	bl	8001868 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e1b4      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003018:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4925      	ldr	r1, [pc, #148]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8003034:	4313      	orrs	r3, r2
 8003036:	600b      	str	r3, [r1, #0]
 8003038:	e015      	b.n	8003066 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303a:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_RCC_OscConfig+0x278>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe fc12 	bl	8001868 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003048:	f7fe fc0e 	bl	8001868 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e193      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d036      	beq.n	80030e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d016      	beq.n	80030a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <HAL_RCC_OscConfig+0x27c>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fe fbf2 	bl	8001868 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003088:	f7fe fbee 	bl	8001868 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e173      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 800309c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x234>
 80030a6:	e01b      	b.n	80030e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_RCC_OscConfig+0x27c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f7fe fbdb 	bl	8001868 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b4:	e00e      	b.n	80030d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b6:	f7fe fbd7 	bl	8001868 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d907      	bls.n	80030d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e15c      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
 80030c8:	40023800 	.word	0x40023800
 80030cc:	42470000 	.word	0x42470000
 80030d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d4:	4b8a      	ldr	r3, [pc, #552]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 80030d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ea      	bne.n	80030b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8097 	beq.w	800321c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f2:	4b83      	ldr	r3, [pc, #524]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10f      	bne.n	800311e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	4b7f      	ldr	r3, [pc, #508]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	4a7e      	ldr	r2, [pc, #504]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310c:	6413      	str	r3, [r2, #64]	; 0x40
 800310e:	4b7c      	ldr	r3, [pc, #496]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311a:	2301      	movs	r3, #1
 800311c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	4b79      	ldr	r3, [pc, #484]	; (8003304 <HAL_RCC_OscConfig+0x4b0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d118      	bne.n	800315c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312a:	4b76      	ldr	r3, [pc, #472]	; (8003304 <HAL_RCC_OscConfig+0x4b0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a75      	ldr	r2, [pc, #468]	; (8003304 <HAL_RCC_OscConfig+0x4b0>)
 8003130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003136:	f7fe fb97 	bl	8001868 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313e:	f7fe fb93 	bl	8001868 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e118      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	4b6c      	ldr	r3, [pc, #432]	; (8003304 <HAL_RCC_OscConfig+0x4b0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x31e>
 8003164:	4b66      	ldr	r3, [pc, #408]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a65      	ldr	r2, [pc, #404]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	e01c      	b.n	80031ac <HAL_RCC_OscConfig+0x358>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b05      	cmp	r3, #5
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x340>
 800317a:	4b61      	ldr	r3, [pc, #388]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	4a60      	ldr	r2, [pc, #384]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	6713      	str	r3, [r2, #112]	; 0x70
 8003186:	4b5e      	ldr	r3, [pc, #376]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	4a5d      	ldr	r2, [pc, #372]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0x358>
 8003194:	4b5a      	ldr	r3, [pc, #360]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	4a59      	ldr	r2, [pc, #356]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	6713      	str	r3, [r2, #112]	; 0x70
 80031a0:	4b57      	ldr	r3, [pc, #348]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4a56      	ldr	r2, [pc, #344]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 80031a6:	f023 0304 	bic.w	r3, r3, #4
 80031aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe fb58 	bl	8001868 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fe fb54 	bl	8001868 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0d7      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d2:	4b4b      	ldr	r3, [pc, #300]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0ee      	beq.n	80031bc <HAL_RCC_OscConfig+0x368>
 80031de:	e014      	b.n	800320a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fe fb42 	bl	8001868 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fe fb3e 	bl	8001868 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0c1      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fe:	4b40      	ldr	r3, [pc, #256]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1ee      	bne.n	80031e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800320a:	7dfb      	ldrb	r3, [r7, #23]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d105      	bne.n	800321c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003210:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	4a3a      	ldr	r2, [pc, #232]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800321a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80ad 	beq.w	8003380 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003226:	4b36      	ldr	r3, [pc, #216]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b08      	cmp	r3, #8
 8003230:	d060      	beq.n	80032f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d145      	bne.n	80032c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323a:	4b33      	ldr	r3, [pc, #204]	; (8003308 <HAL_RCC_OscConfig+0x4b4>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe fb12 	bl	8001868 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003248:	f7fe fb0e 	bl	8001868 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e093      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325a:	4b29      	ldr	r3, [pc, #164]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	019b      	lsls	r3, r3, #6
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	3b01      	subs	r3, #1
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	061b      	lsls	r3, r3, #24
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	071b      	lsls	r3, r3, #28
 8003292:	491b      	ldr	r1, [pc, #108]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003294:	4313      	orrs	r3, r2
 8003296:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003298:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <HAL_RCC_OscConfig+0x4b4>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329e:	f7fe fae3 	bl	8001868 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a6:	f7fe fadf 	bl	8001868 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e064      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b8:	4b11      	ldr	r3, [pc, #68]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x452>
 80032c4:	e05c      	b.n	8003380 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c6:	4b10      	ldr	r3, [pc, #64]	; (8003308 <HAL_RCC_OscConfig+0x4b4>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe facc 	bl	8001868 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fe fac8 	bl	8001868 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e04d      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x480>
 80032f2:	e045      	b.n	8003380 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d107      	bne.n	800330c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e040      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
 8003300:	40023800 	.word	0x40023800
 8003304:	40007000 	.word	0x40007000
 8003308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800330c:	4b1f      	ldr	r3, [pc, #124]	; (800338c <HAL_RCC_OscConfig+0x538>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d030      	beq.n	800337c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d129      	bne.n	800337c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d122      	bne.n	800337c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800333c:	4013      	ands	r3, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003344:	4293      	cmp	r3, r2
 8003346:	d119      	bne.n	800337c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	3b01      	subs	r3, #1
 8003356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d10f      	bne.n	800337c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d107      	bne.n	800337c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800

08003390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e041      	b.n	8003426 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fe f898 	bl	80014ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	4619      	mov	r1, r3
 80033ce:	4610      	mov	r0, r2
 80033d0:	f000 f82e 	bl	8003430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a46      	ldr	r2, [pc, #280]	; (800355c <TIM_Base_SetConfig+0x12c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d013      	beq.n	8003470 <TIM_Base_SetConfig+0x40>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344e:	d00f      	beq.n	8003470 <TIM_Base_SetConfig+0x40>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a43      	ldr	r2, [pc, #268]	; (8003560 <TIM_Base_SetConfig+0x130>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00b      	beq.n	8003470 <TIM_Base_SetConfig+0x40>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a42      	ldr	r2, [pc, #264]	; (8003564 <TIM_Base_SetConfig+0x134>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d007      	beq.n	8003470 <TIM_Base_SetConfig+0x40>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a41      	ldr	r2, [pc, #260]	; (8003568 <TIM_Base_SetConfig+0x138>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d003      	beq.n	8003470 <TIM_Base_SetConfig+0x40>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a40      	ldr	r2, [pc, #256]	; (800356c <TIM_Base_SetConfig+0x13c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d108      	bne.n	8003482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a35      	ldr	r2, [pc, #212]	; (800355c <TIM_Base_SetConfig+0x12c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d02b      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003490:	d027      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a32      	ldr	r2, [pc, #200]	; (8003560 <TIM_Base_SetConfig+0x130>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d023      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a31      	ldr	r2, [pc, #196]	; (8003564 <TIM_Base_SetConfig+0x134>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01f      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a30      	ldr	r2, [pc, #192]	; (8003568 <TIM_Base_SetConfig+0x138>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01b      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a2f      	ldr	r2, [pc, #188]	; (800356c <TIM_Base_SetConfig+0x13c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d017      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2e      	ldr	r2, [pc, #184]	; (8003570 <TIM_Base_SetConfig+0x140>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a2d      	ldr	r2, [pc, #180]	; (8003574 <TIM_Base_SetConfig+0x144>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00f      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a2c      	ldr	r2, [pc, #176]	; (8003578 <TIM_Base_SetConfig+0x148>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00b      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a2b      	ldr	r2, [pc, #172]	; (800357c <TIM_Base_SetConfig+0x14c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <TIM_Base_SetConfig+0x150>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_Base_SetConfig+0xb2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a29      	ldr	r2, [pc, #164]	; (8003584 <TIM_Base_SetConfig+0x154>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d108      	bne.n	80034f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a10      	ldr	r2, [pc, #64]	; (800355c <TIM_Base_SetConfig+0x12c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_Base_SetConfig+0xf8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a12      	ldr	r2, [pc, #72]	; (800356c <TIM_Base_SetConfig+0x13c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d103      	bne.n	8003530 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d105      	bne.n	800354e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f023 0201 	bic.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	611a      	str	r2, [r3, #16]
  }
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40010000 	.word	0x40010000
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40000c00 	.word	0x40000c00
 800356c:	40010400 	.word	0x40010400
 8003570:	40014000 	.word	0x40014000
 8003574:	40014400 	.word	0x40014400
 8003578:	40014800 	.word	0x40014800
 800357c:	40001800 	.word	0x40001800
 8003580:	40001c00 	.word	0x40001c00
 8003584:	40002000 	.word	0x40002000

08003588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800359c:	2302      	movs	r3, #2
 800359e:	e05a      	b.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a21      	ldr	r2, [pc, #132]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d022      	beq.n	800362a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ec:	d01d      	beq.n	800362a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d018      	beq.n	800362a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1b      	ldr	r2, [pc, #108]	; (800366c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1a      	ldr	r2, [pc, #104]	; (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00e      	beq.n	800362a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a18      	ldr	r2, [pc, #96]	; (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a17      	ldr	r2, [pc, #92]	; (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a15      	ldr	r2, [pc, #84]	; (800367c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d10c      	bne.n	8003644 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	4313      	orrs	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40010000 	.word	0x40010000
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800
 8003670:	40000c00 	.word	0x40000c00
 8003674:	40010400 	.word	0x40010400
 8003678:	40014000 	.word	0x40014000
 800367c:	40001800 	.word	0x40001800

08003680 <__cvt>:
 8003680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003684:	ec55 4b10 	vmov	r4, r5, d0
 8003688:	2d00      	cmp	r5, #0
 800368a:	460e      	mov	r6, r1
 800368c:	4619      	mov	r1, r3
 800368e:	462b      	mov	r3, r5
 8003690:	bfbb      	ittet	lt
 8003692:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003696:	461d      	movlt	r5, r3
 8003698:	2300      	movge	r3, #0
 800369a:	232d      	movlt	r3, #45	; 0x2d
 800369c:	700b      	strb	r3, [r1, #0]
 800369e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80036a4:	4691      	mov	r9, r2
 80036a6:	f023 0820 	bic.w	r8, r3, #32
 80036aa:	bfbc      	itt	lt
 80036ac:	4622      	movlt	r2, r4
 80036ae:	4614      	movlt	r4, r2
 80036b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80036b4:	d005      	beq.n	80036c2 <__cvt+0x42>
 80036b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80036ba:	d100      	bne.n	80036be <__cvt+0x3e>
 80036bc:	3601      	adds	r6, #1
 80036be:	2102      	movs	r1, #2
 80036c0:	e000      	b.n	80036c4 <__cvt+0x44>
 80036c2:	2103      	movs	r1, #3
 80036c4:	ab03      	add	r3, sp, #12
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	ab02      	add	r3, sp, #8
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	ec45 4b10 	vmov	d0, r4, r5
 80036d0:	4653      	mov	r3, sl
 80036d2:	4632      	mov	r2, r6
 80036d4:	f000 fe58 	bl	8004388 <_dtoa_r>
 80036d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80036dc:	4607      	mov	r7, r0
 80036de:	d102      	bne.n	80036e6 <__cvt+0x66>
 80036e0:	f019 0f01 	tst.w	r9, #1
 80036e4:	d022      	beq.n	800372c <__cvt+0xac>
 80036e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80036ea:	eb07 0906 	add.w	r9, r7, r6
 80036ee:	d110      	bne.n	8003712 <__cvt+0x92>
 80036f0:	783b      	ldrb	r3, [r7, #0]
 80036f2:	2b30      	cmp	r3, #48	; 0x30
 80036f4:	d10a      	bne.n	800370c <__cvt+0x8c>
 80036f6:	2200      	movs	r2, #0
 80036f8:	2300      	movs	r3, #0
 80036fa:	4620      	mov	r0, r4
 80036fc:	4629      	mov	r1, r5
 80036fe:	f7fd fa03 	bl	8000b08 <__aeabi_dcmpeq>
 8003702:	b918      	cbnz	r0, 800370c <__cvt+0x8c>
 8003704:	f1c6 0601 	rsb	r6, r6, #1
 8003708:	f8ca 6000 	str.w	r6, [sl]
 800370c:	f8da 3000 	ldr.w	r3, [sl]
 8003710:	4499      	add	r9, r3
 8003712:	2200      	movs	r2, #0
 8003714:	2300      	movs	r3, #0
 8003716:	4620      	mov	r0, r4
 8003718:	4629      	mov	r1, r5
 800371a:	f7fd f9f5 	bl	8000b08 <__aeabi_dcmpeq>
 800371e:	b108      	cbz	r0, 8003724 <__cvt+0xa4>
 8003720:	f8cd 900c 	str.w	r9, [sp, #12]
 8003724:	2230      	movs	r2, #48	; 0x30
 8003726:	9b03      	ldr	r3, [sp, #12]
 8003728:	454b      	cmp	r3, r9
 800372a:	d307      	bcc.n	800373c <__cvt+0xbc>
 800372c:	9b03      	ldr	r3, [sp, #12]
 800372e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003730:	1bdb      	subs	r3, r3, r7
 8003732:	4638      	mov	r0, r7
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	b004      	add	sp, #16
 8003738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800373c:	1c59      	adds	r1, r3, #1
 800373e:	9103      	str	r1, [sp, #12]
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e7f0      	b.n	8003726 <__cvt+0xa6>

08003744 <__exponent>:
 8003744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003746:	4603      	mov	r3, r0
 8003748:	2900      	cmp	r1, #0
 800374a:	bfb8      	it	lt
 800374c:	4249      	neglt	r1, r1
 800374e:	f803 2b02 	strb.w	r2, [r3], #2
 8003752:	bfb4      	ite	lt
 8003754:	222d      	movlt	r2, #45	; 0x2d
 8003756:	222b      	movge	r2, #43	; 0x2b
 8003758:	2909      	cmp	r1, #9
 800375a:	7042      	strb	r2, [r0, #1]
 800375c:	dd2a      	ble.n	80037b4 <__exponent+0x70>
 800375e:	f10d 0207 	add.w	r2, sp, #7
 8003762:	4617      	mov	r7, r2
 8003764:	260a      	movs	r6, #10
 8003766:	4694      	mov	ip, r2
 8003768:	fb91 f5f6 	sdiv	r5, r1, r6
 800376c:	fb06 1415 	mls	r4, r6, r5, r1
 8003770:	3430      	adds	r4, #48	; 0x30
 8003772:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003776:	460c      	mov	r4, r1
 8003778:	2c63      	cmp	r4, #99	; 0x63
 800377a:	f102 32ff 	add.w	r2, r2, #4294967295
 800377e:	4629      	mov	r1, r5
 8003780:	dcf1      	bgt.n	8003766 <__exponent+0x22>
 8003782:	3130      	adds	r1, #48	; 0x30
 8003784:	f1ac 0402 	sub.w	r4, ip, #2
 8003788:	f802 1c01 	strb.w	r1, [r2, #-1]
 800378c:	1c41      	adds	r1, r0, #1
 800378e:	4622      	mov	r2, r4
 8003790:	42ba      	cmp	r2, r7
 8003792:	d30a      	bcc.n	80037aa <__exponent+0x66>
 8003794:	f10d 0209 	add.w	r2, sp, #9
 8003798:	eba2 020c 	sub.w	r2, r2, ip
 800379c:	42bc      	cmp	r4, r7
 800379e:	bf88      	it	hi
 80037a0:	2200      	movhi	r2, #0
 80037a2:	4413      	add	r3, r2
 80037a4:	1a18      	subs	r0, r3, r0
 80037a6:	b003      	add	sp, #12
 80037a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80037ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 80037b2:	e7ed      	b.n	8003790 <__exponent+0x4c>
 80037b4:	2330      	movs	r3, #48	; 0x30
 80037b6:	3130      	adds	r1, #48	; 0x30
 80037b8:	7083      	strb	r3, [r0, #2]
 80037ba:	70c1      	strb	r1, [r0, #3]
 80037bc:	1d03      	adds	r3, r0, #4
 80037be:	e7f1      	b.n	80037a4 <__exponent+0x60>

080037c0 <_printf_float>:
 80037c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c4:	ed2d 8b02 	vpush	{d8}
 80037c8:	b08d      	sub	sp, #52	; 0x34
 80037ca:	460c      	mov	r4, r1
 80037cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80037d0:	4616      	mov	r6, r2
 80037d2:	461f      	mov	r7, r3
 80037d4:	4605      	mov	r5, r0
 80037d6:	f000 fcc7 	bl	8004168 <_localeconv_r>
 80037da:	f8d0 a000 	ldr.w	sl, [r0]
 80037de:	4650      	mov	r0, sl
 80037e0:	f7fc fd66 	bl	80002b0 <strlen>
 80037e4:	2300      	movs	r3, #0
 80037e6:	930a      	str	r3, [sp, #40]	; 0x28
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	9305      	str	r3, [sp, #20]
 80037ec:	f8d8 3000 	ldr.w	r3, [r8]
 80037f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80037f4:	3307      	adds	r3, #7
 80037f6:	f023 0307 	bic.w	r3, r3, #7
 80037fa:	f103 0208 	add.w	r2, r3, #8
 80037fe:	f8c8 2000 	str.w	r2, [r8]
 8003802:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003806:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800380a:	9307      	str	r3, [sp, #28]
 800380c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003810:	ee08 0a10 	vmov	s16, r0
 8003814:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003818:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800381c:	4b9e      	ldr	r3, [pc, #632]	; (8003a98 <_printf_float+0x2d8>)
 800381e:	f04f 32ff 	mov.w	r2, #4294967295
 8003822:	f7fd f9a3 	bl	8000b6c <__aeabi_dcmpun>
 8003826:	bb88      	cbnz	r0, 800388c <_printf_float+0xcc>
 8003828:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800382c:	4b9a      	ldr	r3, [pc, #616]	; (8003a98 <_printf_float+0x2d8>)
 800382e:	f04f 32ff 	mov.w	r2, #4294967295
 8003832:	f7fd f97d 	bl	8000b30 <__aeabi_dcmple>
 8003836:	bb48      	cbnz	r0, 800388c <_printf_float+0xcc>
 8003838:	2200      	movs	r2, #0
 800383a:	2300      	movs	r3, #0
 800383c:	4640      	mov	r0, r8
 800383e:	4649      	mov	r1, r9
 8003840:	f7fd f96c 	bl	8000b1c <__aeabi_dcmplt>
 8003844:	b110      	cbz	r0, 800384c <_printf_float+0x8c>
 8003846:	232d      	movs	r3, #45	; 0x2d
 8003848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800384c:	4a93      	ldr	r2, [pc, #588]	; (8003a9c <_printf_float+0x2dc>)
 800384e:	4b94      	ldr	r3, [pc, #592]	; (8003aa0 <_printf_float+0x2e0>)
 8003850:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003854:	bf94      	ite	ls
 8003856:	4690      	movls	r8, r2
 8003858:	4698      	movhi	r8, r3
 800385a:	2303      	movs	r3, #3
 800385c:	6123      	str	r3, [r4, #16]
 800385e:	9b05      	ldr	r3, [sp, #20]
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	6023      	str	r3, [r4, #0]
 8003866:	f04f 0900 	mov.w	r9, #0
 800386a:	9700      	str	r7, [sp, #0]
 800386c:	4633      	mov	r3, r6
 800386e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003870:	4621      	mov	r1, r4
 8003872:	4628      	mov	r0, r5
 8003874:	f000 f9da 	bl	8003c2c <_printf_common>
 8003878:	3001      	adds	r0, #1
 800387a:	f040 8090 	bne.w	800399e <_printf_float+0x1de>
 800387e:	f04f 30ff 	mov.w	r0, #4294967295
 8003882:	b00d      	add	sp, #52	; 0x34
 8003884:	ecbd 8b02 	vpop	{d8}
 8003888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800388c:	4642      	mov	r2, r8
 800388e:	464b      	mov	r3, r9
 8003890:	4640      	mov	r0, r8
 8003892:	4649      	mov	r1, r9
 8003894:	f7fd f96a 	bl	8000b6c <__aeabi_dcmpun>
 8003898:	b140      	cbz	r0, 80038ac <_printf_float+0xec>
 800389a:	464b      	mov	r3, r9
 800389c:	2b00      	cmp	r3, #0
 800389e:	bfbc      	itt	lt
 80038a0:	232d      	movlt	r3, #45	; 0x2d
 80038a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80038a6:	4a7f      	ldr	r2, [pc, #508]	; (8003aa4 <_printf_float+0x2e4>)
 80038a8:	4b7f      	ldr	r3, [pc, #508]	; (8003aa8 <_printf_float+0x2e8>)
 80038aa:	e7d1      	b.n	8003850 <_printf_float+0x90>
 80038ac:	6863      	ldr	r3, [r4, #4]
 80038ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80038b2:	9206      	str	r2, [sp, #24]
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	d13f      	bne.n	8003938 <_printf_float+0x178>
 80038b8:	2306      	movs	r3, #6
 80038ba:	6063      	str	r3, [r4, #4]
 80038bc:	9b05      	ldr	r3, [sp, #20]
 80038be:	6861      	ldr	r1, [r4, #4]
 80038c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80038c4:	2300      	movs	r3, #0
 80038c6:	9303      	str	r3, [sp, #12]
 80038c8:	ab0a      	add	r3, sp, #40	; 0x28
 80038ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80038ce:	ab09      	add	r3, sp, #36	; 0x24
 80038d0:	ec49 8b10 	vmov	d0, r8, r9
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	6022      	str	r2, [r4, #0]
 80038d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80038dc:	4628      	mov	r0, r5
 80038de:	f7ff fecf 	bl	8003680 <__cvt>
 80038e2:	9b06      	ldr	r3, [sp, #24]
 80038e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038e6:	2b47      	cmp	r3, #71	; 0x47
 80038e8:	4680      	mov	r8, r0
 80038ea:	d108      	bne.n	80038fe <_printf_float+0x13e>
 80038ec:	1cc8      	adds	r0, r1, #3
 80038ee:	db02      	blt.n	80038f6 <_printf_float+0x136>
 80038f0:	6863      	ldr	r3, [r4, #4]
 80038f2:	4299      	cmp	r1, r3
 80038f4:	dd41      	ble.n	800397a <_printf_float+0x1ba>
 80038f6:	f1ab 0302 	sub.w	r3, fp, #2
 80038fa:	fa5f fb83 	uxtb.w	fp, r3
 80038fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003902:	d820      	bhi.n	8003946 <_printf_float+0x186>
 8003904:	3901      	subs	r1, #1
 8003906:	465a      	mov	r2, fp
 8003908:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800390c:	9109      	str	r1, [sp, #36]	; 0x24
 800390e:	f7ff ff19 	bl	8003744 <__exponent>
 8003912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003914:	1813      	adds	r3, r2, r0
 8003916:	2a01      	cmp	r2, #1
 8003918:	4681      	mov	r9, r0
 800391a:	6123      	str	r3, [r4, #16]
 800391c:	dc02      	bgt.n	8003924 <_printf_float+0x164>
 800391e:	6822      	ldr	r2, [r4, #0]
 8003920:	07d2      	lsls	r2, r2, #31
 8003922:	d501      	bpl.n	8003928 <_printf_float+0x168>
 8003924:	3301      	adds	r3, #1
 8003926:	6123      	str	r3, [r4, #16]
 8003928:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800392c:	2b00      	cmp	r3, #0
 800392e:	d09c      	beq.n	800386a <_printf_float+0xaa>
 8003930:	232d      	movs	r3, #45	; 0x2d
 8003932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003936:	e798      	b.n	800386a <_printf_float+0xaa>
 8003938:	9a06      	ldr	r2, [sp, #24]
 800393a:	2a47      	cmp	r2, #71	; 0x47
 800393c:	d1be      	bne.n	80038bc <_printf_float+0xfc>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1bc      	bne.n	80038bc <_printf_float+0xfc>
 8003942:	2301      	movs	r3, #1
 8003944:	e7b9      	b.n	80038ba <_printf_float+0xfa>
 8003946:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800394a:	d118      	bne.n	800397e <_printf_float+0x1be>
 800394c:	2900      	cmp	r1, #0
 800394e:	6863      	ldr	r3, [r4, #4]
 8003950:	dd0b      	ble.n	800396a <_printf_float+0x1aa>
 8003952:	6121      	str	r1, [r4, #16]
 8003954:	b913      	cbnz	r3, 800395c <_printf_float+0x19c>
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	07d0      	lsls	r0, r2, #31
 800395a:	d502      	bpl.n	8003962 <_printf_float+0x1a2>
 800395c:	3301      	adds	r3, #1
 800395e:	440b      	add	r3, r1
 8003960:	6123      	str	r3, [r4, #16]
 8003962:	65a1      	str	r1, [r4, #88]	; 0x58
 8003964:	f04f 0900 	mov.w	r9, #0
 8003968:	e7de      	b.n	8003928 <_printf_float+0x168>
 800396a:	b913      	cbnz	r3, 8003972 <_printf_float+0x1b2>
 800396c:	6822      	ldr	r2, [r4, #0]
 800396e:	07d2      	lsls	r2, r2, #31
 8003970:	d501      	bpl.n	8003976 <_printf_float+0x1b6>
 8003972:	3302      	adds	r3, #2
 8003974:	e7f4      	b.n	8003960 <_printf_float+0x1a0>
 8003976:	2301      	movs	r3, #1
 8003978:	e7f2      	b.n	8003960 <_printf_float+0x1a0>
 800397a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800397e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003980:	4299      	cmp	r1, r3
 8003982:	db05      	blt.n	8003990 <_printf_float+0x1d0>
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	6121      	str	r1, [r4, #16]
 8003988:	07d8      	lsls	r0, r3, #31
 800398a:	d5ea      	bpl.n	8003962 <_printf_float+0x1a2>
 800398c:	1c4b      	adds	r3, r1, #1
 800398e:	e7e7      	b.n	8003960 <_printf_float+0x1a0>
 8003990:	2900      	cmp	r1, #0
 8003992:	bfd4      	ite	le
 8003994:	f1c1 0202 	rsble	r2, r1, #2
 8003998:	2201      	movgt	r2, #1
 800399a:	4413      	add	r3, r2
 800399c:	e7e0      	b.n	8003960 <_printf_float+0x1a0>
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	055a      	lsls	r2, r3, #21
 80039a2:	d407      	bmi.n	80039b4 <_printf_float+0x1f4>
 80039a4:	6923      	ldr	r3, [r4, #16]
 80039a6:	4642      	mov	r2, r8
 80039a8:	4631      	mov	r1, r6
 80039aa:	4628      	mov	r0, r5
 80039ac:	47b8      	blx	r7
 80039ae:	3001      	adds	r0, #1
 80039b0:	d12c      	bne.n	8003a0c <_printf_float+0x24c>
 80039b2:	e764      	b.n	800387e <_printf_float+0xbe>
 80039b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80039b8:	f240 80e0 	bls.w	8003b7c <_printf_float+0x3bc>
 80039bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039c0:	2200      	movs	r2, #0
 80039c2:	2300      	movs	r3, #0
 80039c4:	f7fd f8a0 	bl	8000b08 <__aeabi_dcmpeq>
 80039c8:	2800      	cmp	r0, #0
 80039ca:	d034      	beq.n	8003a36 <_printf_float+0x276>
 80039cc:	4a37      	ldr	r2, [pc, #220]	; (8003aac <_printf_float+0x2ec>)
 80039ce:	2301      	movs	r3, #1
 80039d0:	4631      	mov	r1, r6
 80039d2:	4628      	mov	r0, r5
 80039d4:	47b8      	blx	r7
 80039d6:	3001      	adds	r0, #1
 80039d8:	f43f af51 	beq.w	800387e <_printf_float+0xbe>
 80039dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039e0:	429a      	cmp	r2, r3
 80039e2:	db02      	blt.n	80039ea <_printf_float+0x22a>
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	07d8      	lsls	r0, r3, #31
 80039e8:	d510      	bpl.n	8003a0c <_printf_float+0x24c>
 80039ea:	ee18 3a10 	vmov	r3, s16
 80039ee:	4652      	mov	r2, sl
 80039f0:	4631      	mov	r1, r6
 80039f2:	4628      	mov	r0, r5
 80039f4:	47b8      	blx	r7
 80039f6:	3001      	adds	r0, #1
 80039f8:	f43f af41 	beq.w	800387e <_printf_float+0xbe>
 80039fc:	f04f 0800 	mov.w	r8, #0
 8003a00:	f104 091a 	add.w	r9, r4, #26
 8003a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a06:	3b01      	subs	r3, #1
 8003a08:	4543      	cmp	r3, r8
 8003a0a:	dc09      	bgt.n	8003a20 <_printf_float+0x260>
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	079b      	lsls	r3, r3, #30
 8003a10:	f100 8107 	bmi.w	8003c22 <_printf_float+0x462>
 8003a14:	68e0      	ldr	r0, [r4, #12]
 8003a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a18:	4298      	cmp	r0, r3
 8003a1a:	bfb8      	it	lt
 8003a1c:	4618      	movlt	r0, r3
 8003a1e:	e730      	b.n	8003882 <_printf_float+0xc2>
 8003a20:	2301      	movs	r3, #1
 8003a22:	464a      	mov	r2, r9
 8003a24:	4631      	mov	r1, r6
 8003a26:	4628      	mov	r0, r5
 8003a28:	47b8      	blx	r7
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	f43f af27 	beq.w	800387e <_printf_float+0xbe>
 8003a30:	f108 0801 	add.w	r8, r8, #1
 8003a34:	e7e6      	b.n	8003a04 <_printf_float+0x244>
 8003a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	dc39      	bgt.n	8003ab0 <_printf_float+0x2f0>
 8003a3c:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <_printf_float+0x2ec>)
 8003a3e:	2301      	movs	r3, #1
 8003a40:	4631      	mov	r1, r6
 8003a42:	4628      	mov	r0, r5
 8003a44:	47b8      	blx	r7
 8003a46:	3001      	adds	r0, #1
 8003a48:	f43f af19 	beq.w	800387e <_printf_float+0xbe>
 8003a4c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003a50:	4313      	orrs	r3, r2
 8003a52:	d102      	bne.n	8003a5a <_printf_float+0x29a>
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	07d9      	lsls	r1, r3, #31
 8003a58:	d5d8      	bpl.n	8003a0c <_printf_float+0x24c>
 8003a5a:	ee18 3a10 	vmov	r3, s16
 8003a5e:	4652      	mov	r2, sl
 8003a60:	4631      	mov	r1, r6
 8003a62:	4628      	mov	r0, r5
 8003a64:	47b8      	blx	r7
 8003a66:	3001      	adds	r0, #1
 8003a68:	f43f af09 	beq.w	800387e <_printf_float+0xbe>
 8003a6c:	f04f 0900 	mov.w	r9, #0
 8003a70:	f104 0a1a 	add.w	sl, r4, #26
 8003a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a76:	425b      	negs	r3, r3
 8003a78:	454b      	cmp	r3, r9
 8003a7a:	dc01      	bgt.n	8003a80 <_printf_float+0x2c0>
 8003a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a7e:	e792      	b.n	80039a6 <_printf_float+0x1e6>
 8003a80:	2301      	movs	r3, #1
 8003a82:	4652      	mov	r2, sl
 8003a84:	4631      	mov	r1, r6
 8003a86:	4628      	mov	r0, r5
 8003a88:	47b8      	blx	r7
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	f43f aef7 	beq.w	800387e <_printf_float+0xbe>
 8003a90:	f109 0901 	add.w	r9, r9, #1
 8003a94:	e7ee      	b.n	8003a74 <_printf_float+0x2b4>
 8003a96:	bf00      	nop
 8003a98:	7fefffff 	.word	0x7fefffff
 8003a9c:	08006048 	.word	0x08006048
 8003aa0:	0800604c 	.word	0x0800604c
 8003aa4:	08006050 	.word	0x08006050
 8003aa8:	08006054 	.word	0x08006054
 8003aac:	08006058 	.word	0x08006058
 8003ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ab2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	bfa8      	it	ge
 8003ab8:	461a      	movge	r2, r3
 8003aba:	2a00      	cmp	r2, #0
 8003abc:	4691      	mov	r9, r2
 8003abe:	dc37      	bgt.n	8003b30 <_printf_float+0x370>
 8003ac0:	f04f 0b00 	mov.w	fp, #0
 8003ac4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ac8:	f104 021a 	add.w	r2, r4, #26
 8003acc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ace:	9305      	str	r3, [sp, #20]
 8003ad0:	eba3 0309 	sub.w	r3, r3, r9
 8003ad4:	455b      	cmp	r3, fp
 8003ad6:	dc33      	bgt.n	8003b40 <_printf_float+0x380>
 8003ad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003adc:	429a      	cmp	r2, r3
 8003ade:	db3b      	blt.n	8003b58 <_printf_float+0x398>
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	07da      	lsls	r2, r3, #31
 8003ae4:	d438      	bmi.n	8003b58 <_printf_float+0x398>
 8003ae6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003aea:	eba2 0903 	sub.w	r9, r2, r3
 8003aee:	9b05      	ldr	r3, [sp, #20]
 8003af0:	1ad2      	subs	r2, r2, r3
 8003af2:	4591      	cmp	r9, r2
 8003af4:	bfa8      	it	ge
 8003af6:	4691      	movge	r9, r2
 8003af8:	f1b9 0f00 	cmp.w	r9, #0
 8003afc:	dc35      	bgt.n	8003b6a <_printf_float+0x3aa>
 8003afe:	f04f 0800 	mov.w	r8, #0
 8003b02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b06:	f104 0a1a 	add.w	sl, r4, #26
 8003b0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	eba3 0309 	sub.w	r3, r3, r9
 8003b14:	4543      	cmp	r3, r8
 8003b16:	f77f af79 	ble.w	8003a0c <_printf_float+0x24c>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	4652      	mov	r2, sl
 8003b1e:	4631      	mov	r1, r6
 8003b20:	4628      	mov	r0, r5
 8003b22:	47b8      	blx	r7
 8003b24:	3001      	adds	r0, #1
 8003b26:	f43f aeaa 	beq.w	800387e <_printf_float+0xbe>
 8003b2a:	f108 0801 	add.w	r8, r8, #1
 8003b2e:	e7ec      	b.n	8003b0a <_printf_float+0x34a>
 8003b30:	4613      	mov	r3, r2
 8003b32:	4631      	mov	r1, r6
 8003b34:	4642      	mov	r2, r8
 8003b36:	4628      	mov	r0, r5
 8003b38:	47b8      	blx	r7
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	d1c0      	bne.n	8003ac0 <_printf_float+0x300>
 8003b3e:	e69e      	b.n	800387e <_printf_float+0xbe>
 8003b40:	2301      	movs	r3, #1
 8003b42:	4631      	mov	r1, r6
 8003b44:	4628      	mov	r0, r5
 8003b46:	9205      	str	r2, [sp, #20]
 8003b48:	47b8      	blx	r7
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	f43f ae97 	beq.w	800387e <_printf_float+0xbe>
 8003b50:	9a05      	ldr	r2, [sp, #20]
 8003b52:	f10b 0b01 	add.w	fp, fp, #1
 8003b56:	e7b9      	b.n	8003acc <_printf_float+0x30c>
 8003b58:	ee18 3a10 	vmov	r3, s16
 8003b5c:	4652      	mov	r2, sl
 8003b5e:	4631      	mov	r1, r6
 8003b60:	4628      	mov	r0, r5
 8003b62:	47b8      	blx	r7
 8003b64:	3001      	adds	r0, #1
 8003b66:	d1be      	bne.n	8003ae6 <_printf_float+0x326>
 8003b68:	e689      	b.n	800387e <_printf_float+0xbe>
 8003b6a:	9a05      	ldr	r2, [sp, #20]
 8003b6c:	464b      	mov	r3, r9
 8003b6e:	4442      	add	r2, r8
 8003b70:	4631      	mov	r1, r6
 8003b72:	4628      	mov	r0, r5
 8003b74:	47b8      	blx	r7
 8003b76:	3001      	adds	r0, #1
 8003b78:	d1c1      	bne.n	8003afe <_printf_float+0x33e>
 8003b7a:	e680      	b.n	800387e <_printf_float+0xbe>
 8003b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b7e:	2a01      	cmp	r2, #1
 8003b80:	dc01      	bgt.n	8003b86 <_printf_float+0x3c6>
 8003b82:	07db      	lsls	r3, r3, #31
 8003b84:	d53a      	bpl.n	8003bfc <_printf_float+0x43c>
 8003b86:	2301      	movs	r3, #1
 8003b88:	4642      	mov	r2, r8
 8003b8a:	4631      	mov	r1, r6
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	47b8      	blx	r7
 8003b90:	3001      	adds	r0, #1
 8003b92:	f43f ae74 	beq.w	800387e <_printf_float+0xbe>
 8003b96:	ee18 3a10 	vmov	r3, s16
 8003b9a:	4652      	mov	r2, sl
 8003b9c:	4631      	mov	r1, r6
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	47b8      	blx	r7
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	f43f ae6b 	beq.w	800387e <_printf_float+0xbe>
 8003ba8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003bac:	2200      	movs	r2, #0
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003bb4:	f7fc ffa8 	bl	8000b08 <__aeabi_dcmpeq>
 8003bb8:	b9d8      	cbnz	r0, 8003bf2 <_printf_float+0x432>
 8003bba:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003bbe:	f108 0201 	add.w	r2, r8, #1
 8003bc2:	4631      	mov	r1, r6
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	47b8      	blx	r7
 8003bc8:	3001      	adds	r0, #1
 8003bca:	d10e      	bne.n	8003bea <_printf_float+0x42a>
 8003bcc:	e657      	b.n	800387e <_printf_float+0xbe>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	4652      	mov	r2, sl
 8003bd2:	4631      	mov	r1, r6
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	47b8      	blx	r7
 8003bd8:	3001      	adds	r0, #1
 8003bda:	f43f ae50 	beq.w	800387e <_printf_float+0xbe>
 8003bde:	f108 0801 	add.w	r8, r8, #1
 8003be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003be4:	3b01      	subs	r3, #1
 8003be6:	4543      	cmp	r3, r8
 8003be8:	dcf1      	bgt.n	8003bce <_printf_float+0x40e>
 8003bea:	464b      	mov	r3, r9
 8003bec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003bf0:	e6da      	b.n	80039a8 <_printf_float+0x1e8>
 8003bf2:	f04f 0800 	mov.w	r8, #0
 8003bf6:	f104 0a1a 	add.w	sl, r4, #26
 8003bfa:	e7f2      	b.n	8003be2 <_printf_float+0x422>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	4642      	mov	r2, r8
 8003c00:	e7df      	b.n	8003bc2 <_printf_float+0x402>
 8003c02:	2301      	movs	r3, #1
 8003c04:	464a      	mov	r2, r9
 8003c06:	4631      	mov	r1, r6
 8003c08:	4628      	mov	r0, r5
 8003c0a:	47b8      	blx	r7
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	f43f ae36 	beq.w	800387e <_printf_float+0xbe>
 8003c12:	f108 0801 	add.w	r8, r8, #1
 8003c16:	68e3      	ldr	r3, [r4, #12]
 8003c18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c1a:	1a5b      	subs	r3, r3, r1
 8003c1c:	4543      	cmp	r3, r8
 8003c1e:	dcf0      	bgt.n	8003c02 <_printf_float+0x442>
 8003c20:	e6f8      	b.n	8003a14 <_printf_float+0x254>
 8003c22:	f04f 0800 	mov.w	r8, #0
 8003c26:	f104 0919 	add.w	r9, r4, #25
 8003c2a:	e7f4      	b.n	8003c16 <_printf_float+0x456>

08003c2c <_printf_common>:
 8003c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c30:	4616      	mov	r6, r2
 8003c32:	4699      	mov	r9, r3
 8003c34:	688a      	ldr	r2, [r1, #8]
 8003c36:	690b      	ldr	r3, [r1, #16]
 8003c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	bfb8      	it	lt
 8003c40:	4613      	movlt	r3, r2
 8003c42:	6033      	str	r3, [r6, #0]
 8003c44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c48:	4607      	mov	r7, r0
 8003c4a:	460c      	mov	r4, r1
 8003c4c:	b10a      	cbz	r2, 8003c52 <_printf_common+0x26>
 8003c4e:	3301      	adds	r3, #1
 8003c50:	6033      	str	r3, [r6, #0]
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	0699      	lsls	r1, r3, #26
 8003c56:	bf42      	ittt	mi
 8003c58:	6833      	ldrmi	r3, [r6, #0]
 8003c5a:	3302      	addmi	r3, #2
 8003c5c:	6033      	strmi	r3, [r6, #0]
 8003c5e:	6825      	ldr	r5, [r4, #0]
 8003c60:	f015 0506 	ands.w	r5, r5, #6
 8003c64:	d106      	bne.n	8003c74 <_printf_common+0x48>
 8003c66:	f104 0a19 	add.w	sl, r4, #25
 8003c6a:	68e3      	ldr	r3, [r4, #12]
 8003c6c:	6832      	ldr	r2, [r6, #0]
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	42ab      	cmp	r3, r5
 8003c72:	dc26      	bgt.n	8003cc2 <_printf_common+0x96>
 8003c74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c78:	1e13      	subs	r3, r2, #0
 8003c7a:	6822      	ldr	r2, [r4, #0]
 8003c7c:	bf18      	it	ne
 8003c7e:	2301      	movne	r3, #1
 8003c80:	0692      	lsls	r2, r2, #26
 8003c82:	d42b      	bmi.n	8003cdc <_printf_common+0xb0>
 8003c84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c88:	4649      	mov	r1, r9
 8003c8a:	4638      	mov	r0, r7
 8003c8c:	47c0      	blx	r8
 8003c8e:	3001      	adds	r0, #1
 8003c90:	d01e      	beq.n	8003cd0 <_printf_common+0xa4>
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	6922      	ldr	r2, [r4, #16]
 8003c96:	f003 0306 	and.w	r3, r3, #6
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	bf02      	ittt	eq
 8003c9e:	68e5      	ldreq	r5, [r4, #12]
 8003ca0:	6833      	ldreq	r3, [r6, #0]
 8003ca2:	1aed      	subeq	r5, r5, r3
 8003ca4:	68a3      	ldr	r3, [r4, #8]
 8003ca6:	bf0c      	ite	eq
 8003ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cac:	2500      	movne	r5, #0
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	bfc4      	itt	gt
 8003cb2:	1a9b      	subgt	r3, r3, r2
 8003cb4:	18ed      	addgt	r5, r5, r3
 8003cb6:	2600      	movs	r6, #0
 8003cb8:	341a      	adds	r4, #26
 8003cba:	42b5      	cmp	r5, r6
 8003cbc:	d11a      	bne.n	8003cf4 <_printf_common+0xc8>
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	e008      	b.n	8003cd4 <_printf_common+0xa8>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	4652      	mov	r2, sl
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	4638      	mov	r0, r7
 8003cca:	47c0      	blx	r8
 8003ccc:	3001      	adds	r0, #1
 8003cce:	d103      	bne.n	8003cd8 <_printf_common+0xac>
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd8:	3501      	adds	r5, #1
 8003cda:	e7c6      	b.n	8003c6a <_printf_common+0x3e>
 8003cdc:	18e1      	adds	r1, r4, r3
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	2030      	movs	r0, #48	; 0x30
 8003ce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ce6:	4422      	add	r2, r4
 8003ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	e7c7      	b.n	8003c84 <_printf_common+0x58>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	4622      	mov	r2, r4
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	4638      	mov	r0, r7
 8003cfc:	47c0      	blx	r8
 8003cfe:	3001      	adds	r0, #1
 8003d00:	d0e6      	beq.n	8003cd0 <_printf_common+0xa4>
 8003d02:	3601      	adds	r6, #1
 8003d04:	e7d9      	b.n	8003cba <_printf_common+0x8e>
	...

08003d08 <_printf_i>:
 8003d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d0c:	7e0f      	ldrb	r7, [r1, #24]
 8003d0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d10:	2f78      	cmp	r7, #120	; 0x78
 8003d12:	4691      	mov	r9, r2
 8003d14:	4680      	mov	r8, r0
 8003d16:	460c      	mov	r4, r1
 8003d18:	469a      	mov	sl, r3
 8003d1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d1e:	d807      	bhi.n	8003d30 <_printf_i+0x28>
 8003d20:	2f62      	cmp	r7, #98	; 0x62
 8003d22:	d80a      	bhi.n	8003d3a <_printf_i+0x32>
 8003d24:	2f00      	cmp	r7, #0
 8003d26:	f000 80d4 	beq.w	8003ed2 <_printf_i+0x1ca>
 8003d2a:	2f58      	cmp	r7, #88	; 0x58
 8003d2c:	f000 80c0 	beq.w	8003eb0 <_printf_i+0x1a8>
 8003d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d38:	e03a      	b.n	8003db0 <_printf_i+0xa8>
 8003d3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d3e:	2b15      	cmp	r3, #21
 8003d40:	d8f6      	bhi.n	8003d30 <_printf_i+0x28>
 8003d42:	a101      	add	r1, pc, #4	; (adr r1, 8003d48 <_printf_i+0x40>)
 8003d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d48:	08003da1 	.word	0x08003da1
 8003d4c:	08003db5 	.word	0x08003db5
 8003d50:	08003d31 	.word	0x08003d31
 8003d54:	08003d31 	.word	0x08003d31
 8003d58:	08003d31 	.word	0x08003d31
 8003d5c:	08003d31 	.word	0x08003d31
 8003d60:	08003db5 	.word	0x08003db5
 8003d64:	08003d31 	.word	0x08003d31
 8003d68:	08003d31 	.word	0x08003d31
 8003d6c:	08003d31 	.word	0x08003d31
 8003d70:	08003d31 	.word	0x08003d31
 8003d74:	08003eb9 	.word	0x08003eb9
 8003d78:	08003de1 	.word	0x08003de1
 8003d7c:	08003e73 	.word	0x08003e73
 8003d80:	08003d31 	.word	0x08003d31
 8003d84:	08003d31 	.word	0x08003d31
 8003d88:	08003edb 	.word	0x08003edb
 8003d8c:	08003d31 	.word	0x08003d31
 8003d90:	08003de1 	.word	0x08003de1
 8003d94:	08003d31 	.word	0x08003d31
 8003d98:	08003d31 	.word	0x08003d31
 8003d9c:	08003e7b 	.word	0x08003e7b
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	1d1a      	adds	r2, r3, #4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	602a      	str	r2, [r5, #0]
 8003da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003db0:	2301      	movs	r3, #1
 8003db2:	e09f      	b.n	8003ef4 <_printf_i+0x1ec>
 8003db4:	6820      	ldr	r0, [r4, #0]
 8003db6:	682b      	ldr	r3, [r5, #0]
 8003db8:	0607      	lsls	r7, r0, #24
 8003dba:	f103 0104 	add.w	r1, r3, #4
 8003dbe:	6029      	str	r1, [r5, #0]
 8003dc0:	d501      	bpl.n	8003dc6 <_printf_i+0xbe>
 8003dc2:	681e      	ldr	r6, [r3, #0]
 8003dc4:	e003      	b.n	8003dce <_printf_i+0xc6>
 8003dc6:	0646      	lsls	r6, r0, #25
 8003dc8:	d5fb      	bpl.n	8003dc2 <_printf_i+0xba>
 8003dca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003dce:	2e00      	cmp	r6, #0
 8003dd0:	da03      	bge.n	8003dda <_printf_i+0xd2>
 8003dd2:	232d      	movs	r3, #45	; 0x2d
 8003dd4:	4276      	negs	r6, r6
 8003dd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dda:	485a      	ldr	r0, [pc, #360]	; (8003f44 <_printf_i+0x23c>)
 8003ddc:	230a      	movs	r3, #10
 8003dde:	e012      	b.n	8003e06 <_printf_i+0xfe>
 8003de0:	682b      	ldr	r3, [r5, #0]
 8003de2:	6820      	ldr	r0, [r4, #0]
 8003de4:	1d19      	adds	r1, r3, #4
 8003de6:	6029      	str	r1, [r5, #0]
 8003de8:	0605      	lsls	r5, r0, #24
 8003dea:	d501      	bpl.n	8003df0 <_printf_i+0xe8>
 8003dec:	681e      	ldr	r6, [r3, #0]
 8003dee:	e002      	b.n	8003df6 <_printf_i+0xee>
 8003df0:	0641      	lsls	r1, r0, #25
 8003df2:	d5fb      	bpl.n	8003dec <_printf_i+0xe4>
 8003df4:	881e      	ldrh	r6, [r3, #0]
 8003df6:	4853      	ldr	r0, [pc, #332]	; (8003f44 <_printf_i+0x23c>)
 8003df8:	2f6f      	cmp	r7, #111	; 0x6f
 8003dfa:	bf0c      	ite	eq
 8003dfc:	2308      	moveq	r3, #8
 8003dfe:	230a      	movne	r3, #10
 8003e00:	2100      	movs	r1, #0
 8003e02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e06:	6865      	ldr	r5, [r4, #4]
 8003e08:	60a5      	str	r5, [r4, #8]
 8003e0a:	2d00      	cmp	r5, #0
 8003e0c:	bfa2      	ittt	ge
 8003e0e:	6821      	ldrge	r1, [r4, #0]
 8003e10:	f021 0104 	bicge.w	r1, r1, #4
 8003e14:	6021      	strge	r1, [r4, #0]
 8003e16:	b90e      	cbnz	r6, 8003e1c <_printf_i+0x114>
 8003e18:	2d00      	cmp	r5, #0
 8003e1a:	d04b      	beq.n	8003eb4 <_printf_i+0x1ac>
 8003e1c:	4615      	mov	r5, r2
 8003e1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e22:	fb03 6711 	mls	r7, r3, r1, r6
 8003e26:	5dc7      	ldrb	r7, [r0, r7]
 8003e28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e2c:	4637      	mov	r7, r6
 8003e2e:	42bb      	cmp	r3, r7
 8003e30:	460e      	mov	r6, r1
 8003e32:	d9f4      	bls.n	8003e1e <_printf_i+0x116>
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d10b      	bne.n	8003e50 <_printf_i+0x148>
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	07de      	lsls	r6, r3, #31
 8003e3c:	d508      	bpl.n	8003e50 <_printf_i+0x148>
 8003e3e:	6923      	ldr	r3, [r4, #16]
 8003e40:	6861      	ldr	r1, [r4, #4]
 8003e42:	4299      	cmp	r1, r3
 8003e44:	bfde      	ittt	le
 8003e46:	2330      	movle	r3, #48	; 0x30
 8003e48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e50:	1b52      	subs	r2, r2, r5
 8003e52:	6122      	str	r2, [r4, #16]
 8003e54:	f8cd a000 	str.w	sl, [sp]
 8003e58:	464b      	mov	r3, r9
 8003e5a:	aa03      	add	r2, sp, #12
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	4640      	mov	r0, r8
 8003e60:	f7ff fee4 	bl	8003c2c <_printf_common>
 8003e64:	3001      	adds	r0, #1
 8003e66:	d14a      	bne.n	8003efe <_printf_i+0x1f6>
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6c:	b004      	add	sp, #16
 8003e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	f043 0320 	orr.w	r3, r3, #32
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	4833      	ldr	r0, [pc, #204]	; (8003f48 <_printf_i+0x240>)
 8003e7c:	2778      	movs	r7, #120	; 0x78
 8003e7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	6829      	ldr	r1, [r5, #0]
 8003e86:	061f      	lsls	r7, r3, #24
 8003e88:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e8c:	d402      	bmi.n	8003e94 <_printf_i+0x18c>
 8003e8e:	065f      	lsls	r7, r3, #25
 8003e90:	bf48      	it	mi
 8003e92:	b2b6      	uxthmi	r6, r6
 8003e94:	07df      	lsls	r7, r3, #31
 8003e96:	bf48      	it	mi
 8003e98:	f043 0320 	orrmi.w	r3, r3, #32
 8003e9c:	6029      	str	r1, [r5, #0]
 8003e9e:	bf48      	it	mi
 8003ea0:	6023      	strmi	r3, [r4, #0]
 8003ea2:	b91e      	cbnz	r6, 8003eac <_printf_i+0x1a4>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	f023 0320 	bic.w	r3, r3, #32
 8003eaa:	6023      	str	r3, [r4, #0]
 8003eac:	2310      	movs	r3, #16
 8003eae:	e7a7      	b.n	8003e00 <_printf_i+0xf8>
 8003eb0:	4824      	ldr	r0, [pc, #144]	; (8003f44 <_printf_i+0x23c>)
 8003eb2:	e7e4      	b.n	8003e7e <_printf_i+0x176>
 8003eb4:	4615      	mov	r5, r2
 8003eb6:	e7bd      	b.n	8003e34 <_printf_i+0x12c>
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	6826      	ldr	r6, [r4, #0]
 8003ebc:	6961      	ldr	r1, [r4, #20]
 8003ebe:	1d18      	adds	r0, r3, #4
 8003ec0:	6028      	str	r0, [r5, #0]
 8003ec2:	0635      	lsls	r5, r6, #24
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	d501      	bpl.n	8003ecc <_printf_i+0x1c4>
 8003ec8:	6019      	str	r1, [r3, #0]
 8003eca:	e002      	b.n	8003ed2 <_printf_i+0x1ca>
 8003ecc:	0670      	lsls	r0, r6, #25
 8003ece:	d5fb      	bpl.n	8003ec8 <_printf_i+0x1c0>
 8003ed0:	8019      	strh	r1, [r3, #0]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	6123      	str	r3, [r4, #16]
 8003ed6:	4615      	mov	r5, r2
 8003ed8:	e7bc      	b.n	8003e54 <_printf_i+0x14c>
 8003eda:	682b      	ldr	r3, [r5, #0]
 8003edc:	1d1a      	adds	r2, r3, #4
 8003ede:	602a      	str	r2, [r5, #0]
 8003ee0:	681d      	ldr	r5, [r3, #0]
 8003ee2:	6862      	ldr	r2, [r4, #4]
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	f7fc f992 	bl	8000210 <memchr>
 8003eec:	b108      	cbz	r0, 8003ef2 <_printf_i+0x1ea>
 8003eee:	1b40      	subs	r0, r0, r5
 8003ef0:	6060      	str	r0, [r4, #4]
 8003ef2:	6863      	ldr	r3, [r4, #4]
 8003ef4:	6123      	str	r3, [r4, #16]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003efc:	e7aa      	b.n	8003e54 <_printf_i+0x14c>
 8003efe:	6923      	ldr	r3, [r4, #16]
 8003f00:	462a      	mov	r2, r5
 8003f02:	4649      	mov	r1, r9
 8003f04:	4640      	mov	r0, r8
 8003f06:	47d0      	blx	sl
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d0ad      	beq.n	8003e68 <_printf_i+0x160>
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	079b      	lsls	r3, r3, #30
 8003f10:	d413      	bmi.n	8003f3a <_printf_i+0x232>
 8003f12:	68e0      	ldr	r0, [r4, #12]
 8003f14:	9b03      	ldr	r3, [sp, #12]
 8003f16:	4298      	cmp	r0, r3
 8003f18:	bfb8      	it	lt
 8003f1a:	4618      	movlt	r0, r3
 8003f1c:	e7a6      	b.n	8003e6c <_printf_i+0x164>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4632      	mov	r2, r6
 8003f22:	4649      	mov	r1, r9
 8003f24:	4640      	mov	r0, r8
 8003f26:	47d0      	blx	sl
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d09d      	beq.n	8003e68 <_printf_i+0x160>
 8003f2c:	3501      	adds	r5, #1
 8003f2e:	68e3      	ldr	r3, [r4, #12]
 8003f30:	9903      	ldr	r1, [sp, #12]
 8003f32:	1a5b      	subs	r3, r3, r1
 8003f34:	42ab      	cmp	r3, r5
 8003f36:	dcf2      	bgt.n	8003f1e <_printf_i+0x216>
 8003f38:	e7eb      	b.n	8003f12 <_printf_i+0x20a>
 8003f3a:	2500      	movs	r5, #0
 8003f3c:	f104 0619 	add.w	r6, r4, #25
 8003f40:	e7f5      	b.n	8003f2e <_printf_i+0x226>
 8003f42:	bf00      	nop
 8003f44:	0800605a 	.word	0x0800605a
 8003f48:	0800606b 	.word	0x0800606b

08003f4c <std>:
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	b510      	push	{r4, lr}
 8003f50:	4604      	mov	r4, r0
 8003f52:	e9c0 3300 	strd	r3, r3, [r0]
 8003f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f5a:	6083      	str	r3, [r0, #8]
 8003f5c:	8181      	strh	r1, [r0, #12]
 8003f5e:	6643      	str	r3, [r0, #100]	; 0x64
 8003f60:	81c2      	strh	r2, [r0, #14]
 8003f62:	6183      	str	r3, [r0, #24]
 8003f64:	4619      	mov	r1, r3
 8003f66:	2208      	movs	r2, #8
 8003f68:	305c      	adds	r0, #92	; 0x5c
 8003f6a:	f000 f8f4 	bl	8004156 <memset>
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <std+0x58>)
 8003f70:	6263      	str	r3, [r4, #36]	; 0x24
 8003f72:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <std+0x5c>)
 8003f74:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <std+0x60>)
 8003f78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <std+0x64>)
 8003f7c:	6323      	str	r3, [r4, #48]	; 0x30
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	; (8003fb4 <std+0x68>)
 8003f80:	6224      	str	r4, [r4, #32]
 8003f82:	429c      	cmp	r4, r3
 8003f84:	d006      	beq.n	8003f94 <std+0x48>
 8003f86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003f8a:	4294      	cmp	r4, r2
 8003f8c:	d002      	beq.n	8003f94 <std+0x48>
 8003f8e:	33d0      	adds	r3, #208	; 0xd0
 8003f90:	429c      	cmp	r4, r3
 8003f92:	d105      	bne.n	8003fa0 <std+0x54>
 8003f94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f9c:	f000 b958 	b.w	8004250 <__retarget_lock_init_recursive>
 8003fa0:	bd10      	pop	{r4, pc}
 8003fa2:	bf00      	nop
 8003fa4:	080040d1 	.word	0x080040d1
 8003fa8:	080040f3 	.word	0x080040f3
 8003fac:	0800412b 	.word	0x0800412b
 8003fb0:	0800414f 	.word	0x0800414f
 8003fb4:	200002e8 	.word	0x200002e8

08003fb8 <stdio_exit_handler>:
 8003fb8:	4a02      	ldr	r2, [pc, #8]	; (8003fc4 <stdio_exit_handler+0xc>)
 8003fba:	4903      	ldr	r1, [pc, #12]	; (8003fc8 <stdio_exit_handler+0x10>)
 8003fbc:	4803      	ldr	r0, [pc, #12]	; (8003fcc <stdio_exit_handler+0x14>)
 8003fbe:	f000 b869 	b.w	8004094 <_fwalk_sglue>
 8003fc2:	bf00      	nop
 8003fc4:	2000000c 	.word	0x2000000c
 8003fc8:	08005971 	.word	0x08005971
 8003fcc:	20000018 	.word	0x20000018

08003fd0 <cleanup_stdio>:
 8003fd0:	6841      	ldr	r1, [r0, #4]
 8003fd2:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <cleanup_stdio+0x34>)
 8003fd4:	4299      	cmp	r1, r3
 8003fd6:	b510      	push	{r4, lr}
 8003fd8:	4604      	mov	r4, r0
 8003fda:	d001      	beq.n	8003fe0 <cleanup_stdio+0x10>
 8003fdc:	f001 fcc8 	bl	8005970 <_fflush_r>
 8003fe0:	68a1      	ldr	r1, [r4, #8]
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <cleanup_stdio+0x38>)
 8003fe4:	4299      	cmp	r1, r3
 8003fe6:	d002      	beq.n	8003fee <cleanup_stdio+0x1e>
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f001 fcc1 	bl	8005970 <_fflush_r>
 8003fee:	68e1      	ldr	r1, [r4, #12]
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <cleanup_stdio+0x3c>)
 8003ff2:	4299      	cmp	r1, r3
 8003ff4:	d004      	beq.n	8004000 <cleanup_stdio+0x30>
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ffc:	f001 bcb8 	b.w	8005970 <_fflush_r>
 8004000:	bd10      	pop	{r4, pc}
 8004002:	bf00      	nop
 8004004:	200002e8 	.word	0x200002e8
 8004008:	20000350 	.word	0x20000350
 800400c:	200003b8 	.word	0x200003b8

08004010 <global_stdio_init.part.0>:
 8004010:	b510      	push	{r4, lr}
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <global_stdio_init.part.0+0x30>)
 8004014:	4c0b      	ldr	r4, [pc, #44]	; (8004044 <global_stdio_init.part.0+0x34>)
 8004016:	4a0c      	ldr	r2, [pc, #48]	; (8004048 <global_stdio_init.part.0+0x38>)
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	4620      	mov	r0, r4
 800401c:	2200      	movs	r2, #0
 800401e:	2104      	movs	r1, #4
 8004020:	f7ff ff94 	bl	8003f4c <std>
 8004024:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004028:	2201      	movs	r2, #1
 800402a:	2109      	movs	r1, #9
 800402c:	f7ff ff8e 	bl	8003f4c <std>
 8004030:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004034:	2202      	movs	r2, #2
 8004036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800403a:	2112      	movs	r1, #18
 800403c:	f7ff bf86 	b.w	8003f4c <std>
 8004040:	20000420 	.word	0x20000420
 8004044:	200002e8 	.word	0x200002e8
 8004048:	08003fb9 	.word	0x08003fb9

0800404c <__sfp_lock_acquire>:
 800404c:	4801      	ldr	r0, [pc, #4]	; (8004054 <__sfp_lock_acquire+0x8>)
 800404e:	f000 b900 	b.w	8004252 <__retarget_lock_acquire_recursive>
 8004052:	bf00      	nop
 8004054:	20000429 	.word	0x20000429

08004058 <__sfp_lock_release>:
 8004058:	4801      	ldr	r0, [pc, #4]	; (8004060 <__sfp_lock_release+0x8>)
 800405a:	f000 b8fb 	b.w	8004254 <__retarget_lock_release_recursive>
 800405e:	bf00      	nop
 8004060:	20000429 	.word	0x20000429

08004064 <__sinit>:
 8004064:	b510      	push	{r4, lr}
 8004066:	4604      	mov	r4, r0
 8004068:	f7ff fff0 	bl	800404c <__sfp_lock_acquire>
 800406c:	6a23      	ldr	r3, [r4, #32]
 800406e:	b11b      	cbz	r3, 8004078 <__sinit+0x14>
 8004070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004074:	f7ff bff0 	b.w	8004058 <__sfp_lock_release>
 8004078:	4b04      	ldr	r3, [pc, #16]	; (800408c <__sinit+0x28>)
 800407a:	6223      	str	r3, [r4, #32]
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <__sinit+0x2c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f5      	bne.n	8004070 <__sinit+0xc>
 8004084:	f7ff ffc4 	bl	8004010 <global_stdio_init.part.0>
 8004088:	e7f2      	b.n	8004070 <__sinit+0xc>
 800408a:	bf00      	nop
 800408c:	08003fd1 	.word	0x08003fd1
 8004090:	20000420 	.word	0x20000420

08004094 <_fwalk_sglue>:
 8004094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004098:	4607      	mov	r7, r0
 800409a:	4688      	mov	r8, r1
 800409c:	4614      	mov	r4, r2
 800409e:	2600      	movs	r6, #0
 80040a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040a4:	f1b9 0901 	subs.w	r9, r9, #1
 80040a8:	d505      	bpl.n	80040b6 <_fwalk_sglue+0x22>
 80040aa:	6824      	ldr	r4, [r4, #0]
 80040ac:	2c00      	cmp	r4, #0
 80040ae:	d1f7      	bne.n	80040a0 <_fwalk_sglue+0xc>
 80040b0:	4630      	mov	r0, r6
 80040b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040b6:	89ab      	ldrh	r3, [r5, #12]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d907      	bls.n	80040cc <_fwalk_sglue+0x38>
 80040bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040c0:	3301      	adds	r3, #1
 80040c2:	d003      	beq.n	80040cc <_fwalk_sglue+0x38>
 80040c4:	4629      	mov	r1, r5
 80040c6:	4638      	mov	r0, r7
 80040c8:	47c0      	blx	r8
 80040ca:	4306      	orrs	r6, r0
 80040cc:	3568      	adds	r5, #104	; 0x68
 80040ce:	e7e9      	b.n	80040a4 <_fwalk_sglue+0x10>

080040d0 <__sread>:
 80040d0:	b510      	push	{r4, lr}
 80040d2:	460c      	mov	r4, r1
 80040d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d8:	f000 f86c 	bl	80041b4 <_read_r>
 80040dc:	2800      	cmp	r0, #0
 80040de:	bfab      	itete	ge
 80040e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040e2:	89a3      	ldrhlt	r3, [r4, #12]
 80040e4:	181b      	addge	r3, r3, r0
 80040e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040ea:	bfac      	ite	ge
 80040ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80040ee:	81a3      	strhlt	r3, [r4, #12]
 80040f0:	bd10      	pop	{r4, pc}

080040f2 <__swrite>:
 80040f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f6:	461f      	mov	r7, r3
 80040f8:	898b      	ldrh	r3, [r1, #12]
 80040fa:	05db      	lsls	r3, r3, #23
 80040fc:	4605      	mov	r5, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	4616      	mov	r6, r2
 8004102:	d505      	bpl.n	8004110 <__swrite+0x1e>
 8004104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004108:	2302      	movs	r3, #2
 800410a:	2200      	movs	r2, #0
 800410c:	f000 f840 	bl	8004190 <_lseek_r>
 8004110:	89a3      	ldrh	r3, [r4, #12]
 8004112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800411a:	81a3      	strh	r3, [r4, #12]
 800411c:	4632      	mov	r2, r6
 800411e:	463b      	mov	r3, r7
 8004120:	4628      	mov	r0, r5
 8004122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004126:	f000 b857 	b.w	80041d8 <_write_r>

0800412a <__sseek>:
 800412a:	b510      	push	{r4, lr}
 800412c:	460c      	mov	r4, r1
 800412e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004132:	f000 f82d 	bl	8004190 <_lseek_r>
 8004136:	1c43      	adds	r3, r0, #1
 8004138:	89a3      	ldrh	r3, [r4, #12]
 800413a:	bf15      	itete	ne
 800413c:	6560      	strne	r0, [r4, #84]	; 0x54
 800413e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004146:	81a3      	strheq	r3, [r4, #12]
 8004148:	bf18      	it	ne
 800414a:	81a3      	strhne	r3, [r4, #12]
 800414c:	bd10      	pop	{r4, pc}

0800414e <__sclose>:
 800414e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004152:	f000 b80d 	b.w	8004170 <_close_r>

08004156 <memset>:
 8004156:	4402      	add	r2, r0
 8004158:	4603      	mov	r3, r0
 800415a:	4293      	cmp	r3, r2
 800415c:	d100      	bne.n	8004160 <memset+0xa>
 800415e:	4770      	bx	lr
 8004160:	f803 1b01 	strb.w	r1, [r3], #1
 8004164:	e7f9      	b.n	800415a <memset+0x4>
	...

08004168 <_localeconv_r>:
 8004168:	4800      	ldr	r0, [pc, #0]	; (800416c <_localeconv_r+0x4>)
 800416a:	4770      	bx	lr
 800416c:	20000158 	.word	0x20000158

08004170 <_close_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	4d06      	ldr	r5, [pc, #24]	; (800418c <_close_r+0x1c>)
 8004174:	2300      	movs	r3, #0
 8004176:	4604      	mov	r4, r0
 8004178:	4608      	mov	r0, r1
 800417a:	602b      	str	r3, [r5, #0]
 800417c:	f7fd fa67 	bl	800164e <_close>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_close_r+0x1a>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_close_r+0x1a>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	20000424 	.word	0x20000424

08004190 <_lseek_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4d07      	ldr	r5, [pc, #28]	; (80041b0 <_lseek_r+0x20>)
 8004194:	4604      	mov	r4, r0
 8004196:	4608      	mov	r0, r1
 8004198:	4611      	mov	r1, r2
 800419a:	2200      	movs	r2, #0
 800419c:	602a      	str	r2, [r5, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	f7fd fa7c 	bl	800169c <_lseek>
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	d102      	bne.n	80041ae <_lseek_r+0x1e>
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	b103      	cbz	r3, 80041ae <_lseek_r+0x1e>
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
 80041b0:	20000424 	.word	0x20000424

080041b4 <_read_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4d07      	ldr	r5, [pc, #28]	; (80041d4 <_read_r+0x20>)
 80041b8:	4604      	mov	r4, r0
 80041ba:	4608      	mov	r0, r1
 80041bc:	4611      	mov	r1, r2
 80041be:	2200      	movs	r2, #0
 80041c0:	602a      	str	r2, [r5, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f7fd fa0a 	bl	80015dc <_read>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_read_r+0x1e>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_read_r+0x1e>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	20000424 	.word	0x20000424

080041d8 <_write_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4d07      	ldr	r5, [pc, #28]	; (80041f8 <_write_r+0x20>)
 80041dc:	4604      	mov	r4, r0
 80041de:	4608      	mov	r0, r1
 80041e0:	4611      	mov	r1, r2
 80041e2:	2200      	movs	r2, #0
 80041e4:	602a      	str	r2, [r5, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f7fd fa15 	bl	8001616 <_write>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_write_r+0x1e>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_write_r+0x1e>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	20000424 	.word	0x20000424

080041fc <__errno>:
 80041fc:	4b01      	ldr	r3, [pc, #4]	; (8004204 <__errno+0x8>)
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000064 	.word	0x20000064

08004208 <__libc_init_array>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	4d0d      	ldr	r5, [pc, #52]	; (8004240 <__libc_init_array+0x38>)
 800420c:	4c0d      	ldr	r4, [pc, #52]	; (8004244 <__libc_init_array+0x3c>)
 800420e:	1b64      	subs	r4, r4, r5
 8004210:	10a4      	asrs	r4, r4, #2
 8004212:	2600      	movs	r6, #0
 8004214:	42a6      	cmp	r6, r4
 8004216:	d109      	bne.n	800422c <__libc_init_array+0x24>
 8004218:	4d0b      	ldr	r5, [pc, #44]	; (8004248 <__libc_init_array+0x40>)
 800421a:	4c0c      	ldr	r4, [pc, #48]	; (800424c <__libc_init_array+0x44>)
 800421c:	f001 feee 	bl	8005ffc <_init>
 8004220:	1b64      	subs	r4, r4, r5
 8004222:	10a4      	asrs	r4, r4, #2
 8004224:	2600      	movs	r6, #0
 8004226:	42a6      	cmp	r6, r4
 8004228:	d105      	bne.n	8004236 <__libc_init_array+0x2e>
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004230:	4798      	blx	r3
 8004232:	3601      	adds	r6, #1
 8004234:	e7ee      	b.n	8004214 <__libc_init_array+0xc>
 8004236:	f855 3b04 	ldr.w	r3, [r5], #4
 800423a:	4798      	blx	r3
 800423c:	3601      	adds	r6, #1
 800423e:	e7f2      	b.n	8004226 <__libc_init_array+0x1e>
 8004240:	080063c4 	.word	0x080063c4
 8004244:	080063c4 	.word	0x080063c4
 8004248:	080063c4 	.word	0x080063c4
 800424c:	080063c8 	.word	0x080063c8

08004250 <__retarget_lock_init_recursive>:
 8004250:	4770      	bx	lr

08004252 <__retarget_lock_acquire_recursive>:
 8004252:	4770      	bx	lr

08004254 <__retarget_lock_release_recursive>:
 8004254:	4770      	bx	lr

08004256 <memcpy>:
 8004256:	440a      	add	r2, r1
 8004258:	4291      	cmp	r1, r2
 800425a:	f100 33ff 	add.w	r3, r0, #4294967295
 800425e:	d100      	bne.n	8004262 <memcpy+0xc>
 8004260:	4770      	bx	lr
 8004262:	b510      	push	{r4, lr}
 8004264:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004268:	f803 4f01 	strb.w	r4, [r3, #1]!
 800426c:	4291      	cmp	r1, r2
 800426e:	d1f9      	bne.n	8004264 <memcpy+0xe>
 8004270:	bd10      	pop	{r4, pc}

08004272 <quorem>:
 8004272:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004276:	6903      	ldr	r3, [r0, #16]
 8004278:	690c      	ldr	r4, [r1, #16]
 800427a:	42a3      	cmp	r3, r4
 800427c:	4607      	mov	r7, r0
 800427e:	db7e      	blt.n	800437e <quorem+0x10c>
 8004280:	3c01      	subs	r4, #1
 8004282:	f101 0814 	add.w	r8, r1, #20
 8004286:	f100 0514 	add.w	r5, r0, #20
 800428a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800428e:	9301      	str	r3, [sp, #4]
 8004290:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004294:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004298:	3301      	adds	r3, #1
 800429a:	429a      	cmp	r2, r3
 800429c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80042a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80042a8:	d331      	bcc.n	800430e <quorem+0x9c>
 80042aa:	f04f 0e00 	mov.w	lr, #0
 80042ae:	4640      	mov	r0, r8
 80042b0:	46ac      	mov	ip, r5
 80042b2:	46f2      	mov	sl, lr
 80042b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80042b8:	b293      	uxth	r3, r2
 80042ba:	fb06 e303 	mla	r3, r6, r3, lr
 80042be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80042c2:	0c1a      	lsrs	r2, r3, #16
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	ebaa 0303 	sub.w	r3, sl, r3
 80042ca:	f8dc a000 	ldr.w	sl, [ip]
 80042ce:	fa13 f38a 	uxtah	r3, r3, sl
 80042d2:	fb06 220e 	mla	r2, r6, lr, r2
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	9b00      	ldr	r3, [sp, #0]
 80042da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80042de:	b292      	uxth	r2, r2
 80042e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80042e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80042ec:	4581      	cmp	r9, r0
 80042ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042f2:	f84c 3b04 	str.w	r3, [ip], #4
 80042f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80042fa:	d2db      	bcs.n	80042b4 <quorem+0x42>
 80042fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8004300:	b92b      	cbnz	r3, 800430e <quorem+0x9c>
 8004302:	9b01      	ldr	r3, [sp, #4]
 8004304:	3b04      	subs	r3, #4
 8004306:	429d      	cmp	r5, r3
 8004308:	461a      	mov	r2, r3
 800430a:	d32c      	bcc.n	8004366 <quorem+0xf4>
 800430c:	613c      	str	r4, [r7, #16]
 800430e:	4638      	mov	r0, r7
 8004310:	f001 f9a8 	bl	8005664 <__mcmp>
 8004314:	2800      	cmp	r0, #0
 8004316:	db22      	blt.n	800435e <quorem+0xec>
 8004318:	3601      	adds	r6, #1
 800431a:	4629      	mov	r1, r5
 800431c:	2000      	movs	r0, #0
 800431e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004322:	f8d1 c000 	ldr.w	ip, [r1]
 8004326:	b293      	uxth	r3, r2
 8004328:	1ac3      	subs	r3, r0, r3
 800432a:	0c12      	lsrs	r2, r2, #16
 800432c:	fa13 f38c 	uxtah	r3, r3, ip
 8004330:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004338:	b29b      	uxth	r3, r3
 800433a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800433e:	45c1      	cmp	r9, r8
 8004340:	f841 3b04 	str.w	r3, [r1], #4
 8004344:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004348:	d2e9      	bcs.n	800431e <quorem+0xac>
 800434a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800434e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004352:	b922      	cbnz	r2, 800435e <quorem+0xec>
 8004354:	3b04      	subs	r3, #4
 8004356:	429d      	cmp	r5, r3
 8004358:	461a      	mov	r2, r3
 800435a:	d30a      	bcc.n	8004372 <quorem+0x100>
 800435c:	613c      	str	r4, [r7, #16]
 800435e:	4630      	mov	r0, r6
 8004360:	b003      	add	sp, #12
 8004362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	3b04      	subs	r3, #4
 800436a:	2a00      	cmp	r2, #0
 800436c:	d1ce      	bne.n	800430c <quorem+0x9a>
 800436e:	3c01      	subs	r4, #1
 8004370:	e7c9      	b.n	8004306 <quorem+0x94>
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	3b04      	subs	r3, #4
 8004376:	2a00      	cmp	r2, #0
 8004378:	d1f0      	bne.n	800435c <quorem+0xea>
 800437a:	3c01      	subs	r4, #1
 800437c:	e7eb      	b.n	8004356 <quorem+0xe4>
 800437e:	2000      	movs	r0, #0
 8004380:	e7ee      	b.n	8004360 <quorem+0xee>
 8004382:	0000      	movs	r0, r0
 8004384:	0000      	movs	r0, r0
	...

08004388 <_dtoa_r>:
 8004388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438c:	ed2d 8b04 	vpush	{d8-d9}
 8004390:	69c5      	ldr	r5, [r0, #28]
 8004392:	b093      	sub	sp, #76	; 0x4c
 8004394:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004398:	ec57 6b10 	vmov	r6, r7, d0
 800439c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80043a0:	9107      	str	r1, [sp, #28]
 80043a2:	4604      	mov	r4, r0
 80043a4:	920a      	str	r2, [sp, #40]	; 0x28
 80043a6:	930d      	str	r3, [sp, #52]	; 0x34
 80043a8:	b975      	cbnz	r5, 80043c8 <_dtoa_r+0x40>
 80043aa:	2010      	movs	r0, #16
 80043ac:	f000 fe2a 	bl	8005004 <malloc>
 80043b0:	4602      	mov	r2, r0
 80043b2:	61e0      	str	r0, [r4, #28]
 80043b4:	b920      	cbnz	r0, 80043c0 <_dtoa_r+0x38>
 80043b6:	4bae      	ldr	r3, [pc, #696]	; (8004670 <_dtoa_r+0x2e8>)
 80043b8:	21ef      	movs	r1, #239	; 0xef
 80043ba:	48ae      	ldr	r0, [pc, #696]	; (8004674 <_dtoa_r+0x2ec>)
 80043bc:	f001 fb10 	bl	80059e0 <__assert_func>
 80043c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80043c4:	6005      	str	r5, [r0, #0]
 80043c6:	60c5      	str	r5, [r0, #12]
 80043c8:	69e3      	ldr	r3, [r4, #28]
 80043ca:	6819      	ldr	r1, [r3, #0]
 80043cc:	b151      	cbz	r1, 80043e4 <_dtoa_r+0x5c>
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	604a      	str	r2, [r1, #4]
 80043d2:	2301      	movs	r3, #1
 80043d4:	4093      	lsls	r3, r2
 80043d6:	608b      	str	r3, [r1, #8]
 80043d8:	4620      	mov	r0, r4
 80043da:	f000 ff07 	bl	80051ec <_Bfree>
 80043de:	69e3      	ldr	r3, [r4, #28]
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	1e3b      	subs	r3, r7, #0
 80043e6:	bfbb      	ittet	lt
 80043e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80043ec:	9303      	strlt	r3, [sp, #12]
 80043ee:	2300      	movge	r3, #0
 80043f0:	2201      	movlt	r2, #1
 80043f2:	bfac      	ite	ge
 80043f4:	f8c8 3000 	strge.w	r3, [r8]
 80043f8:	f8c8 2000 	strlt.w	r2, [r8]
 80043fc:	4b9e      	ldr	r3, [pc, #632]	; (8004678 <_dtoa_r+0x2f0>)
 80043fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004402:	ea33 0308 	bics.w	r3, r3, r8
 8004406:	d11b      	bne.n	8004440 <_dtoa_r+0xb8>
 8004408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800440a:	f242 730f 	movw	r3, #9999	; 0x270f
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004414:	4333      	orrs	r3, r6
 8004416:	f000 8593 	beq.w	8004f40 <_dtoa_r+0xbb8>
 800441a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800441c:	b963      	cbnz	r3, 8004438 <_dtoa_r+0xb0>
 800441e:	4b97      	ldr	r3, [pc, #604]	; (800467c <_dtoa_r+0x2f4>)
 8004420:	e027      	b.n	8004472 <_dtoa_r+0xea>
 8004422:	4b97      	ldr	r3, [pc, #604]	; (8004680 <_dtoa_r+0x2f8>)
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	9800      	ldr	r0, [sp, #0]
 800442e:	b013      	add	sp, #76	; 0x4c
 8004430:	ecbd 8b04 	vpop	{d8-d9}
 8004434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004438:	4b90      	ldr	r3, [pc, #576]	; (800467c <_dtoa_r+0x2f4>)
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	3303      	adds	r3, #3
 800443e:	e7f3      	b.n	8004428 <_dtoa_r+0xa0>
 8004440:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004444:	2200      	movs	r2, #0
 8004446:	ec51 0b17 	vmov	r0, r1, d7
 800444a:	eeb0 8a47 	vmov.f32	s16, s14
 800444e:	eef0 8a67 	vmov.f32	s17, s15
 8004452:	2300      	movs	r3, #0
 8004454:	f7fc fb58 	bl	8000b08 <__aeabi_dcmpeq>
 8004458:	4681      	mov	r9, r0
 800445a:	b160      	cbz	r0, 8004476 <_dtoa_r+0xee>
 800445c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800445e:	2301      	movs	r3, #1
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8568 	beq.w	8004f3a <_dtoa_r+0xbb2>
 800446a:	4b86      	ldr	r3, [pc, #536]	; (8004684 <_dtoa_r+0x2fc>)
 800446c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	3b01      	subs	r3, #1
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	e7da      	b.n	800442c <_dtoa_r+0xa4>
 8004476:	aa10      	add	r2, sp, #64	; 0x40
 8004478:	a911      	add	r1, sp, #68	; 0x44
 800447a:	4620      	mov	r0, r4
 800447c:	eeb0 0a48 	vmov.f32	s0, s16
 8004480:	eef0 0a68 	vmov.f32	s1, s17
 8004484:	f001 f994 	bl	80057b0 <__d2b>
 8004488:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800448c:	4682      	mov	sl, r0
 800448e:	2d00      	cmp	r5, #0
 8004490:	d07f      	beq.n	8004592 <_dtoa_r+0x20a>
 8004492:	ee18 3a90 	vmov	r3, s17
 8004496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800449a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800449e:	ec51 0b18 	vmov	r0, r1, d8
 80044a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80044a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80044aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80044ae:	4619      	mov	r1, r3
 80044b0:	2200      	movs	r2, #0
 80044b2:	4b75      	ldr	r3, [pc, #468]	; (8004688 <_dtoa_r+0x300>)
 80044b4:	f7fb ff08 	bl	80002c8 <__aeabi_dsub>
 80044b8:	a367      	add	r3, pc, #412	; (adr r3, 8004658 <_dtoa_r+0x2d0>)
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f7fc f8bb 	bl	8000638 <__aeabi_dmul>
 80044c2:	a367      	add	r3, pc, #412	; (adr r3, 8004660 <_dtoa_r+0x2d8>)
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f7fb ff00 	bl	80002cc <__adddf3>
 80044cc:	4606      	mov	r6, r0
 80044ce:	4628      	mov	r0, r5
 80044d0:	460f      	mov	r7, r1
 80044d2:	f7fc f847 	bl	8000564 <__aeabi_i2d>
 80044d6:	a364      	add	r3, pc, #400	; (adr r3, 8004668 <_dtoa_r+0x2e0>)
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f7fc f8ac 	bl	8000638 <__aeabi_dmul>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4630      	mov	r0, r6
 80044e6:	4639      	mov	r1, r7
 80044e8:	f7fb fef0 	bl	80002cc <__adddf3>
 80044ec:	4606      	mov	r6, r0
 80044ee:	460f      	mov	r7, r1
 80044f0:	f7fc fb52 	bl	8000b98 <__aeabi_d2iz>
 80044f4:	2200      	movs	r2, #0
 80044f6:	4683      	mov	fp, r0
 80044f8:	2300      	movs	r3, #0
 80044fa:	4630      	mov	r0, r6
 80044fc:	4639      	mov	r1, r7
 80044fe:	f7fc fb0d 	bl	8000b1c <__aeabi_dcmplt>
 8004502:	b148      	cbz	r0, 8004518 <_dtoa_r+0x190>
 8004504:	4658      	mov	r0, fp
 8004506:	f7fc f82d 	bl	8000564 <__aeabi_i2d>
 800450a:	4632      	mov	r2, r6
 800450c:	463b      	mov	r3, r7
 800450e:	f7fc fafb 	bl	8000b08 <__aeabi_dcmpeq>
 8004512:	b908      	cbnz	r0, 8004518 <_dtoa_r+0x190>
 8004514:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004518:	f1bb 0f16 	cmp.w	fp, #22
 800451c:	d857      	bhi.n	80045ce <_dtoa_r+0x246>
 800451e:	4b5b      	ldr	r3, [pc, #364]	; (800468c <_dtoa_r+0x304>)
 8004520:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	ec51 0b18 	vmov	r0, r1, d8
 800452c:	f7fc faf6 	bl	8000b1c <__aeabi_dcmplt>
 8004530:	2800      	cmp	r0, #0
 8004532:	d04e      	beq.n	80045d2 <_dtoa_r+0x24a>
 8004534:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004538:	2300      	movs	r3, #0
 800453a:	930c      	str	r3, [sp, #48]	; 0x30
 800453c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800453e:	1b5b      	subs	r3, r3, r5
 8004540:	1e5a      	subs	r2, r3, #1
 8004542:	bf45      	ittet	mi
 8004544:	f1c3 0301 	rsbmi	r3, r3, #1
 8004548:	9305      	strmi	r3, [sp, #20]
 800454a:	2300      	movpl	r3, #0
 800454c:	2300      	movmi	r3, #0
 800454e:	9206      	str	r2, [sp, #24]
 8004550:	bf54      	ite	pl
 8004552:	9305      	strpl	r3, [sp, #20]
 8004554:	9306      	strmi	r3, [sp, #24]
 8004556:	f1bb 0f00 	cmp.w	fp, #0
 800455a:	db3c      	blt.n	80045d6 <_dtoa_r+0x24e>
 800455c:	9b06      	ldr	r3, [sp, #24]
 800455e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004562:	445b      	add	r3, fp
 8004564:	9306      	str	r3, [sp, #24]
 8004566:	2300      	movs	r3, #0
 8004568:	9308      	str	r3, [sp, #32]
 800456a:	9b07      	ldr	r3, [sp, #28]
 800456c:	2b09      	cmp	r3, #9
 800456e:	d868      	bhi.n	8004642 <_dtoa_r+0x2ba>
 8004570:	2b05      	cmp	r3, #5
 8004572:	bfc4      	itt	gt
 8004574:	3b04      	subgt	r3, #4
 8004576:	9307      	strgt	r3, [sp, #28]
 8004578:	9b07      	ldr	r3, [sp, #28]
 800457a:	f1a3 0302 	sub.w	r3, r3, #2
 800457e:	bfcc      	ite	gt
 8004580:	2500      	movgt	r5, #0
 8004582:	2501      	movle	r5, #1
 8004584:	2b03      	cmp	r3, #3
 8004586:	f200 8085 	bhi.w	8004694 <_dtoa_r+0x30c>
 800458a:	e8df f003 	tbb	[pc, r3]
 800458e:	3b2e      	.short	0x3b2e
 8004590:	5839      	.short	0x5839
 8004592:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004596:	441d      	add	r5, r3
 8004598:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800459c:	2b20      	cmp	r3, #32
 800459e:	bfc1      	itttt	gt
 80045a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80045a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80045a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80045ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80045b0:	bfd6      	itet	le
 80045b2:	f1c3 0320 	rsble	r3, r3, #32
 80045b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80045ba:	fa06 f003 	lslle.w	r0, r6, r3
 80045be:	f7fb ffc1 	bl	8000544 <__aeabi_ui2d>
 80045c2:	2201      	movs	r2, #1
 80045c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80045c8:	3d01      	subs	r5, #1
 80045ca:	920e      	str	r2, [sp, #56]	; 0x38
 80045cc:	e76f      	b.n	80044ae <_dtoa_r+0x126>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e7b3      	b.n	800453a <_dtoa_r+0x1b2>
 80045d2:	900c      	str	r0, [sp, #48]	; 0x30
 80045d4:	e7b2      	b.n	800453c <_dtoa_r+0x1b4>
 80045d6:	9b05      	ldr	r3, [sp, #20]
 80045d8:	eba3 030b 	sub.w	r3, r3, fp
 80045dc:	9305      	str	r3, [sp, #20]
 80045de:	f1cb 0300 	rsb	r3, fp, #0
 80045e2:	9308      	str	r3, [sp, #32]
 80045e4:	2300      	movs	r3, #0
 80045e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80045e8:	e7bf      	b.n	800456a <_dtoa_r+0x1e2>
 80045ea:	2300      	movs	r3, #0
 80045ec:	9309      	str	r3, [sp, #36]	; 0x24
 80045ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	dc52      	bgt.n	800469a <_dtoa_r+0x312>
 80045f4:	2301      	movs	r3, #1
 80045f6:	9301      	str	r3, [sp, #4]
 80045f8:	9304      	str	r3, [sp, #16]
 80045fa:	461a      	mov	r2, r3
 80045fc:	920a      	str	r2, [sp, #40]	; 0x28
 80045fe:	e00b      	b.n	8004618 <_dtoa_r+0x290>
 8004600:	2301      	movs	r3, #1
 8004602:	e7f3      	b.n	80045ec <_dtoa_r+0x264>
 8004604:	2300      	movs	r3, #0
 8004606:	9309      	str	r3, [sp, #36]	; 0x24
 8004608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800460a:	445b      	add	r3, fp
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	3301      	adds	r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	9304      	str	r3, [sp, #16]
 8004614:	bfb8      	it	lt
 8004616:	2301      	movlt	r3, #1
 8004618:	69e0      	ldr	r0, [r4, #28]
 800461a:	2100      	movs	r1, #0
 800461c:	2204      	movs	r2, #4
 800461e:	f102 0614 	add.w	r6, r2, #20
 8004622:	429e      	cmp	r6, r3
 8004624:	d93d      	bls.n	80046a2 <_dtoa_r+0x31a>
 8004626:	6041      	str	r1, [r0, #4]
 8004628:	4620      	mov	r0, r4
 800462a:	f000 fd9f 	bl	800516c <_Balloc>
 800462e:	9000      	str	r0, [sp, #0]
 8004630:	2800      	cmp	r0, #0
 8004632:	d139      	bne.n	80046a8 <_dtoa_r+0x320>
 8004634:	4b16      	ldr	r3, [pc, #88]	; (8004690 <_dtoa_r+0x308>)
 8004636:	4602      	mov	r2, r0
 8004638:	f240 11af 	movw	r1, #431	; 0x1af
 800463c:	e6bd      	b.n	80043ba <_dtoa_r+0x32>
 800463e:	2301      	movs	r3, #1
 8004640:	e7e1      	b.n	8004606 <_dtoa_r+0x27e>
 8004642:	2501      	movs	r5, #1
 8004644:	2300      	movs	r3, #0
 8004646:	9307      	str	r3, [sp, #28]
 8004648:	9509      	str	r5, [sp, #36]	; 0x24
 800464a:	f04f 33ff 	mov.w	r3, #4294967295
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	9304      	str	r3, [sp, #16]
 8004652:	2200      	movs	r2, #0
 8004654:	2312      	movs	r3, #18
 8004656:	e7d1      	b.n	80045fc <_dtoa_r+0x274>
 8004658:	636f4361 	.word	0x636f4361
 800465c:	3fd287a7 	.word	0x3fd287a7
 8004660:	8b60c8b3 	.word	0x8b60c8b3
 8004664:	3fc68a28 	.word	0x3fc68a28
 8004668:	509f79fb 	.word	0x509f79fb
 800466c:	3fd34413 	.word	0x3fd34413
 8004670:	08006089 	.word	0x08006089
 8004674:	080060a0 	.word	0x080060a0
 8004678:	7ff00000 	.word	0x7ff00000
 800467c:	08006085 	.word	0x08006085
 8004680:	0800607c 	.word	0x0800607c
 8004684:	08006059 	.word	0x08006059
 8004688:	3ff80000 	.word	0x3ff80000
 800468c:	08006190 	.word	0x08006190
 8004690:	080060f8 	.word	0x080060f8
 8004694:	2301      	movs	r3, #1
 8004696:	9309      	str	r3, [sp, #36]	; 0x24
 8004698:	e7d7      	b.n	800464a <_dtoa_r+0x2c2>
 800469a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	9304      	str	r3, [sp, #16]
 80046a0:	e7ba      	b.n	8004618 <_dtoa_r+0x290>
 80046a2:	3101      	adds	r1, #1
 80046a4:	0052      	lsls	r2, r2, #1
 80046a6:	e7ba      	b.n	800461e <_dtoa_r+0x296>
 80046a8:	69e3      	ldr	r3, [r4, #28]
 80046aa:	9a00      	ldr	r2, [sp, #0]
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	9b04      	ldr	r3, [sp, #16]
 80046b0:	2b0e      	cmp	r3, #14
 80046b2:	f200 80a8 	bhi.w	8004806 <_dtoa_r+0x47e>
 80046b6:	2d00      	cmp	r5, #0
 80046b8:	f000 80a5 	beq.w	8004806 <_dtoa_r+0x47e>
 80046bc:	f1bb 0f00 	cmp.w	fp, #0
 80046c0:	dd38      	ble.n	8004734 <_dtoa_r+0x3ac>
 80046c2:	4bc0      	ldr	r3, [pc, #768]	; (80049c4 <_dtoa_r+0x63c>)
 80046c4:	f00b 020f 	and.w	r2, fp, #15
 80046c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80046d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80046d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80046d8:	d019      	beq.n	800470e <_dtoa_r+0x386>
 80046da:	4bbb      	ldr	r3, [pc, #748]	; (80049c8 <_dtoa_r+0x640>)
 80046dc:	ec51 0b18 	vmov	r0, r1, d8
 80046e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046e4:	f7fc f8d2 	bl	800088c <__aeabi_ddiv>
 80046e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046ec:	f008 080f 	and.w	r8, r8, #15
 80046f0:	2503      	movs	r5, #3
 80046f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80049c8 <_dtoa_r+0x640>
 80046f6:	f1b8 0f00 	cmp.w	r8, #0
 80046fa:	d10a      	bne.n	8004712 <_dtoa_r+0x38a>
 80046fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004700:	4632      	mov	r2, r6
 8004702:	463b      	mov	r3, r7
 8004704:	f7fc f8c2 	bl	800088c <__aeabi_ddiv>
 8004708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800470c:	e02b      	b.n	8004766 <_dtoa_r+0x3de>
 800470e:	2502      	movs	r5, #2
 8004710:	e7ef      	b.n	80046f2 <_dtoa_r+0x36a>
 8004712:	f018 0f01 	tst.w	r8, #1
 8004716:	d008      	beq.n	800472a <_dtoa_r+0x3a2>
 8004718:	4630      	mov	r0, r6
 800471a:	4639      	mov	r1, r7
 800471c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004720:	f7fb ff8a 	bl	8000638 <__aeabi_dmul>
 8004724:	3501      	adds	r5, #1
 8004726:	4606      	mov	r6, r0
 8004728:	460f      	mov	r7, r1
 800472a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800472e:	f109 0908 	add.w	r9, r9, #8
 8004732:	e7e0      	b.n	80046f6 <_dtoa_r+0x36e>
 8004734:	f000 809f 	beq.w	8004876 <_dtoa_r+0x4ee>
 8004738:	f1cb 0600 	rsb	r6, fp, #0
 800473c:	4ba1      	ldr	r3, [pc, #644]	; (80049c4 <_dtoa_r+0x63c>)
 800473e:	4fa2      	ldr	r7, [pc, #648]	; (80049c8 <_dtoa_r+0x640>)
 8004740:	f006 020f 	and.w	r2, r6, #15
 8004744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	ec51 0b18 	vmov	r0, r1, d8
 8004750:	f7fb ff72 	bl	8000638 <__aeabi_dmul>
 8004754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004758:	1136      	asrs	r6, r6, #4
 800475a:	2300      	movs	r3, #0
 800475c:	2502      	movs	r5, #2
 800475e:	2e00      	cmp	r6, #0
 8004760:	d17e      	bne.n	8004860 <_dtoa_r+0x4d8>
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1d0      	bne.n	8004708 <_dtoa_r+0x380>
 8004766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004768:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8084 	beq.w	800487a <_dtoa_r+0x4f2>
 8004772:	4b96      	ldr	r3, [pc, #600]	; (80049cc <_dtoa_r+0x644>)
 8004774:	2200      	movs	r2, #0
 8004776:	4640      	mov	r0, r8
 8004778:	4649      	mov	r1, r9
 800477a:	f7fc f9cf 	bl	8000b1c <__aeabi_dcmplt>
 800477e:	2800      	cmp	r0, #0
 8004780:	d07b      	beq.n	800487a <_dtoa_r+0x4f2>
 8004782:	9b04      	ldr	r3, [sp, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d078      	beq.n	800487a <_dtoa_r+0x4f2>
 8004788:	9b01      	ldr	r3, [sp, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	dd39      	ble.n	8004802 <_dtoa_r+0x47a>
 800478e:	4b90      	ldr	r3, [pc, #576]	; (80049d0 <_dtoa_r+0x648>)
 8004790:	2200      	movs	r2, #0
 8004792:	4640      	mov	r0, r8
 8004794:	4649      	mov	r1, r9
 8004796:	f7fb ff4f 	bl	8000638 <__aeabi_dmul>
 800479a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800479e:	9e01      	ldr	r6, [sp, #4]
 80047a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80047a4:	3501      	adds	r5, #1
 80047a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80047aa:	4628      	mov	r0, r5
 80047ac:	f7fb feda 	bl	8000564 <__aeabi_i2d>
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	f7fb ff40 	bl	8000638 <__aeabi_dmul>
 80047b8:	4b86      	ldr	r3, [pc, #536]	; (80049d4 <_dtoa_r+0x64c>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	f7fb fd86 	bl	80002cc <__adddf3>
 80047c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80047c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047c8:	9303      	str	r3, [sp, #12]
 80047ca:	2e00      	cmp	r6, #0
 80047cc:	d158      	bne.n	8004880 <_dtoa_r+0x4f8>
 80047ce:	4b82      	ldr	r3, [pc, #520]	; (80049d8 <_dtoa_r+0x650>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	4640      	mov	r0, r8
 80047d4:	4649      	mov	r1, r9
 80047d6:	f7fb fd77 	bl	80002c8 <__aeabi_dsub>
 80047da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047de:	4680      	mov	r8, r0
 80047e0:	4689      	mov	r9, r1
 80047e2:	f7fc f9b9 	bl	8000b58 <__aeabi_dcmpgt>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	f040 8296 	bne.w	8004d18 <_dtoa_r+0x990>
 80047ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80047f0:	4640      	mov	r0, r8
 80047f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80047f6:	4649      	mov	r1, r9
 80047f8:	f7fc f990 	bl	8000b1c <__aeabi_dcmplt>
 80047fc:	2800      	cmp	r0, #0
 80047fe:	f040 8289 	bne.w	8004d14 <_dtoa_r+0x98c>
 8004802:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004808:	2b00      	cmp	r3, #0
 800480a:	f2c0 814e 	blt.w	8004aaa <_dtoa_r+0x722>
 800480e:	f1bb 0f0e 	cmp.w	fp, #14
 8004812:	f300 814a 	bgt.w	8004aaa <_dtoa_r+0x722>
 8004816:	4b6b      	ldr	r3, [pc, #428]	; (80049c4 <_dtoa_r+0x63c>)
 8004818:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800481c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004822:	2b00      	cmp	r3, #0
 8004824:	f280 80dc 	bge.w	80049e0 <_dtoa_r+0x658>
 8004828:	9b04      	ldr	r3, [sp, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f300 80d8 	bgt.w	80049e0 <_dtoa_r+0x658>
 8004830:	f040 826f 	bne.w	8004d12 <_dtoa_r+0x98a>
 8004834:	4b68      	ldr	r3, [pc, #416]	; (80049d8 <_dtoa_r+0x650>)
 8004836:	2200      	movs	r2, #0
 8004838:	4640      	mov	r0, r8
 800483a:	4649      	mov	r1, r9
 800483c:	f7fb fefc 	bl	8000638 <__aeabi_dmul>
 8004840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004844:	f7fc f97e 	bl	8000b44 <__aeabi_dcmpge>
 8004848:	9e04      	ldr	r6, [sp, #16]
 800484a:	4637      	mov	r7, r6
 800484c:	2800      	cmp	r0, #0
 800484e:	f040 8245 	bne.w	8004cdc <_dtoa_r+0x954>
 8004852:	9d00      	ldr	r5, [sp, #0]
 8004854:	2331      	movs	r3, #49	; 0x31
 8004856:	f805 3b01 	strb.w	r3, [r5], #1
 800485a:	f10b 0b01 	add.w	fp, fp, #1
 800485e:	e241      	b.n	8004ce4 <_dtoa_r+0x95c>
 8004860:	07f2      	lsls	r2, r6, #31
 8004862:	d505      	bpl.n	8004870 <_dtoa_r+0x4e8>
 8004864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004868:	f7fb fee6 	bl	8000638 <__aeabi_dmul>
 800486c:	3501      	adds	r5, #1
 800486e:	2301      	movs	r3, #1
 8004870:	1076      	asrs	r6, r6, #1
 8004872:	3708      	adds	r7, #8
 8004874:	e773      	b.n	800475e <_dtoa_r+0x3d6>
 8004876:	2502      	movs	r5, #2
 8004878:	e775      	b.n	8004766 <_dtoa_r+0x3de>
 800487a:	9e04      	ldr	r6, [sp, #16]
 800487c:	465f      	mov	r7, fp
 800487e:	e792      	b.n	80047a6 <_dtoa_r+0x41e>
 8004880:	9900      	ldr	r1, [sp, #0]
 8004882:	4b50      	ldr	r3, [pc, #320]	; (80049c4 <_dtoa_r+0x63c>)
 8004884:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004888:	4431      	add	r1, r6
 800488a:	9102      	str	r1, [sp, #8]
 800488c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800488e:	eeb0 9a47 	vmov.f32	s18, s14
 8004892:	eef0 9a67 	vmov.f32	s19, s15
 8004896:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800489a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800489e:	2900      	cmp	r1, #0
 80048a0:	d044      	beq.n	800492c <_dtoa_r+0x5a4>
 80048a2:	494e      	ldr	r1, [pc, #312]	; (80049dc <_dtoa_r+0x654>)
 80048a4:	2000      	movs	r0, #0
 80048a6:	f7fb fff1 	bl	800088c <__aeabi_ddiv>
 80048aa:	ec53 2b19 	vmov	r2, r3, d9
 80048ae:	f7fb fd0b 	bl	80002c8 <__aeabi_dsub>
 80048b2:	9d00      	ldr	r5, [sp, #0]
 80048b4:	ec41 0b19 	vmov	d9, r0, r1
 80048b8:	4649      	mov	r1, r9
 80048ba:	4640      	mov	r0, r8
 80048bc:	f7fc f96c 	bl	8000b98 <__aeabi_d2iz>
 80048c0:	4606      	mov	r6, r0
 80048c2:	f7fb fe4f 	bl	8000564 <__aeabi_i2d>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4640      	mov	r0, r8
 80048cc:	4649      	mov	r1, r9
 80048ce:	f7fb fcfb 	bl	80002c8 <__aeabi_dsub>
 80048d2:	3630      	adds	r6, #48	; 0x30
 80048d4:	f805 6b01 	strb.w	r6, [r5], #1
 80048d8:	ec53 2b19 	vmov	r2, r3, d9
 80048dc:	4680      	mov	r8, r0
 80048de:	4689      	mov	r9, r1
 80048e0:	f7fc f91c 	bl	8000b1c <__aeabi_dcmplt>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d164      	bne.n	80049b2 <_dtoa_r+0x62a>
 80048e8:	4642      	mov	r2, r8
 80048ea:	464b      	mov	r3, r9
 80048ec:	4937      	ldr	r1, [pc, #220]	; (80049cc <_dtoa_r+0x644>)
 80048ee:	2000      	movs	r0, #0
 80048f0:	f7fb fcea 	bl	80002c8 <__aeabi_dsub>
 80048f4:	ec53 2b19 	vmov	r2, r3, d9
 80048f8:	f7fc f910 	bl	8000b1c <__aeabi_dcmplt>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	f040 80b6 	bne.w	8004a6e <_dtoa_r+0x6e6>
 8004902:	9b02      	ldr	r3, [sp, #8]
 8004904:	429d      	cmp	r5, r3
 8004906:	f43f af7c 	beq.w	8004802 <_dtoa_r+0x47a>
 800490a:	4b31      	ldr	r3, [pc, #196]	; (80049d0 <_dtoa_r+0x648>)
 800490c:	ec51 0b19 	vmov	r0, r1, d9
 8004910:	2200      	movs	r2, #0
 8004912:	f7fb fe91 	bl	8000638 <__aeabi_dmul>
 8004916:	4b2e      	ldr	r3, [pc, #184]	; (80049d0 <_dtoa_r+0x648>)
 8004918:	ec41 0b19 	vmov	d9, r0, r1
 800491c:	2200      	movs	r2, #0
 800491e:	4640      	mov	r0, r8
 8004920:	4649      	mov	r1, r9
 8004922:	f7fb fe89 	bl	8000638 <__aeabi_dmul>
 8004926:	4680      	mov	r8, r0
 8004928:	4689      	mov	r9, r1
 800492a:	e7c5      	b.n	80048b8 <_dtoa_r+0x530>
 800492c:	ec51 0b17 	vmov	r0, r1, d7
 8004930:	f7fb fe82 	bl	8000638 <__aeabi_dmul>
 8004934:	9b02      	ldr	r3, [sp, #8]
 8004936:	9d00      	ldr	r5, [sp, #0]
 8004938:	930f      	str	r3, [sp, #60]	; 0x3c
 800493a:	ec41 0b19 	vmov	d9, r0, r1
 800493e:	4649      	mov	r1, r9
 8004940:	4640      	mov	r0, r8
 8004942:	f7fc f929 	bl	8000b98 <__aeabi_d2iz>
 8004946:	4606      	mov	r6, r0
 8004948:	f7fb fe0c 	bl	8000564 <__aeabi_i2d>
 800494c:	3630      	adds	r6, #48	; 0x30
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4640      	mov	r0, r8
 8004954:	4649      	mov	r1, r9
 8004956:	f7fb fcb7 	bl	80002c8 <__aeabi_dsub>
 800495a:	f805 6b01 	strb.w	r6, [r5], #1
 800495e:	9b02      	ldr	r3, [sp, #8]
 8004960:	429d      	cmp	r5, r3
 8004962:	4680      	mov	r8, r0
 8004964:	4689      	mov	r9, r1
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	d124      	bne.n	80049b6 <_dtoa_r+0x62e>
 800496c:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <_dtoa_r+0x654>)
 800496e:	ec51 0b19 	vmov	r0, r1, d9
 8004972:	f7fb fcab 	bl	80002cc <__adddf3>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4640      	mov	r0, r8
 800497c:	4649      	mov	r1, r9
 800497e:	f7fc f8eb 	bl	8000b58 <__aeabi_dcmpgt>
 8004982:	2800      	cmp	r0, #0
 8004984:	d173      	bne.n	8004a6e <_dtoa_r+0x6e6>
 8004986:	ec53 2b19 	vmov	r2, r3, d9
 800498a:	4914      	ldr	r1, [pc, #80]	; (80049dc <_dtoa_r+0x654>)
 800498c:	2000      	movs	r0, #0
 800498e:	f7fb fc9b 	bl	80002c8 <__aeabi_dsub>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4640      	mov	r0, r8
 8004998:	4649      	mov	r1, r9
 800499a:	f7fc f8bf 	bl	8000b1c <__aeabi_dcmplt>
 800499e:	2800      	cmp	r0, #0
 80049a0:	f43f af2f 	beq.w	8004802 <_dtoa_r+0x47a>
 80049a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80049a6:	1e6b      	subs	r3, r5, #1
 80049a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80049aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80049ae:	2b30      	cmp	r3, #48	; 0x30
 80049b0:	d0f8      	beq.n	80049a4 <_dtoa_r+0x61c>
 80049b2:	46bb      	mov	fp, r7
 80049b4:	e04a      	b.n	8004a4c <_dtoa_r+0x6c4>
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <_dtoa_r+0x648>)
 80049b8:	f7fb fe3e 	bl	8000638 <__aeabi_dmul>
 80049bc:	4680      	mov	r8, r0
 80049be:	4689      	mov	r9, r1
 80049c0:	e7bd      	b.n	800493e <_dtoa_r+0x5b6>
 80049c2:	bf00      	nop
 80049c4:	08006190 	.word	0x08006190
 80049c8:	08006168 	.word	0x08006168
 80049cc:	3ff00000 	.word	0x3ff00000
 80049d0:	40240000 	.word	0x40240000
 80049d4:	401c0000 	.word	0x401c0000
 80049d8:	40140000 	.word	0x40140000
 80049dc:	3fe00000 	.word	0x3fe00000
 80049e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80049e4:	9d00      	ldr	r5, [sp, #0]
 80049e6:	4642      	mov	r2, r8
 80049e8:	464b      	mov	r3, r9
 80049ea:	4630      	mov	r0, r6
 80049ec:	4639      	mov	r1, r7
 80049ee:	f7fb ff4d 	bl	800088c <__aeabi_ddiv>
 80049f2:	f7fc f8d1 	bl	8000b98 <__aeabi_d2iz>
 80049f6:	9001      	str	r0, [sp, #4]
 80049f8:	f7fb fdb4 	bl	8000564 <__aeabi_i2d>
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	f7fb fe1a 	bl	8000638 <__aeabi_dmul>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4630      	mov	r0, r6
 8004a0a:	4639      	mov	r1, r7
 8004a0c:	f7fb fc5c 	bl	80002c8 <__aeabi_dsub>
 8004a10:	9e01      	ldr	r6, [sp, #4]
 8004a12:	9f04      	ldr	r7, [sp, #16]
 8004a14:	3630      	adds	r6, #48	; 0x30
 8004a16:	f805 6b01 	strb.w	r6, [r5], #1
 8004a1a:	9e00      	ldr	r6, [sp, #0]
 8004a1c:	1bae      	subs	r6, r5, r6
 8004a1e:	42b7      	cmp	r7, r6
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	d134      	bne.n	8004a90 <_dtoa_r+0x708>
 8004a26:	f7fb fc51 	bl	80002cc <__adddf3>
 8004a2a:	4642      	mov	r2, r8
 8004a2c:	464b      	mov	r3, r9
 8004a2e:	4606      	mov	r6, r0
 8004a30:	460f      	mov	r7, r1
 8004a32:	f7fc f891 	bl	8000b58 <__aeabi_dcmpgt>
 8004a36:	b9c8      	cbnz	r0, 8004a6c <_dtoa_r+0x6e4>
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	4639      	mov	r1, r7
 8004a40:	f7fc f862 	bl	8000b08 <__aeabi_dcmpeq>
 8004a44:	b110      	cbz	r0, 8004a4c <_dtoa_r+0x6c4>
 8004a46:	9b01      	ldr	r3, [sp, #4]
 8004a48:	07db      	lsls	r3, r3, #31
 8004a4a:	d40f      	bmi.n	8004a6c <_dtoa_r+0x6e4>
 8004a4c:	4651      	mov	r1, sl
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f000 fbcc 	bl	80051ec <_Bfree>
 8004a54:	2300      	movs	r3, #0
 8004a56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a58:	702b      	strb	r3, [r5, #0]
 8004a5a:	f10b 0301 	add.w	r3, fp, #1
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f43f ace2 	beq.w	800442c <_dtoa_r+0xa4>
 8004a68:	601d      	str	r5, [r3, #0]
 8004a6a:	e4df      	b.n	800442c <_dtoa_r+0xa4>
 8004a6c:	465f      	mov	r7, fp
 8004a6e:	462b      	mov	r3, r5
 8004a70:	461d      	mov	r5, r3
 8004a72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a76:	2a39      	cmp	r2, #57	; 0x39
 8004a78:	d106      	bne.n	8004a88 <_dtoa_r+0x700>
 8004a7a:	9a00      	ldr	r2, [sp, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d1f7      	bne.n	8004a70 <_dtoa_r+0x6e8>
 8004a80:	9900      	ldr	r1, [sp, #0]
 8004a82:	2230      	movs	r2, #48	; 0x30
 8004a84:	3701      	adds	r7, #1
 8004a86:	700a      	strb	r2, [r1, #0]
 8004a88:	781a      	ldrb	r2, [r3, #0]
 8004a8a:	3201      	adds	r2, #1
 8004a8c:	701a      	strb	r2, [r3, #0]
 8004a8e:	e790      	b.n	80049b2 <_dtoa_r+0x62a>
 8004a90:	4ba3      	ldr	r3, [pc, #652]	; (8004d20 <_dtoa_r+0x998>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	f7fb fdd0 	bl	8000638 <__aeabi_dmul>
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	4606      	mov	r6, r0
 8004a9e:	460f      	mov	r7, r1
 8004aa0:	f7fc f832 	bl	8000b08 <__aeabi_dcmpeq>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d09e      	beq.n	80049e6 <_dtoa_r+0x65e>
 8004aa8:	e7d0      	b.n	8004a4c <_dtoa_r+0x6c4>
 8004aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aac:	2a00      	cmp	r2, #0
 8004aae:	f000 80ca 	beq.w	8004c46 <_dtoa_r+0x8be>
 8004ab2:	9a07      	ldr	r2, [sp, #28]
 8004ab4:	2a01      	cmp	r2, #1
 8004ab6:	f300 80ad 	bgt.w	8004c14 <_dtoa_r+0x88c>
 8004aba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004abc:	2a00      	cmp	r2, #0
 8004abe:	f000 80a5 	beq.w	8004c0c <_dtoa_r+0x884>
 8004ac2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ac6:	9e08      	ldr	r6, [sp, #32]
 8004ac8:	9d05      	ldr	r5, [sp, #20]
 8004aca:	9a05      	ldr	r2, [sp, #20]
 8004acc:	441a      	add	r2, r3
 8004ace:	9205      	str	r2, [sp, #20]
 8004ad0:	9a06      	ldr	r2, [sp, #24]
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	441a      	add	r2, r3
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	9206      	str	r2, [sp, #24]
 8004ada:	f000 fc3d 	bl	8005358 <__i2b>
 8004ade:	4607      	mov	r7, r0
 8004ae0:	b165      	cbz	r5, 8004afc <_dtoa_r+0x774>
 8004ae2:	9b06      	ldr	r3, [sp, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	dd09      	ble.n	8004afc <_dtoa_r+0x774>
 8004ae8:	42ab      	cmp	r3, r5
 8004aea:	9a05      	ldr	r2, [sp, #20]
 8004aec:	bfa8      	it	ge
 8004aee:	462b      	movge	r3, r5
 8004af0:	1ad2      	subs	r2, r2, r3
 8004af2:	9205      	str	r2, [sp, #20]
 8004af4:	9a06      	ldr	r2, [sp, #24]
 8004af6:	1aed      	subs	r5, r5, r3
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	9306      	str	r3, [sp, #24]
 8004afc:	9b08      	ldr	r3, [sp, #32]
 8004afe:	b1f3      	cbz	r3, 8004b3e <_dtoa_r+0x7b6>
 8004b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80a3 	beq.w	8004c4e <_dtoa_r+0x8c6>
 8004b08:	2e00      	cmp	r6, #0
 8004b0a:	dd10      	ble.n	8004b2e <_dtoa_r+0x7a6>
 8004b0c:	4639      	mov	r1, r7
 8004b0e:	4632      	mov	r2, r6
 8004b10:	4620      	mov	r0, r4
 8004b12:	f000 fce1 	bl	80054d8 <__pow5mult>
 8004b16:	4652      	mov	r2, sl
 8004b18:	4601      	mov	r1, r0
 8004b1a:	4607      	mov	r7, r0
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f000 fc31 	bl	8005384 <__multiply>
 8004b22:	4651      	mov	r1, sl
 8004b24:	4680      	mov	r8, r0
 8004b26:	4620      	mov	r0, r4
 8004b28:	f000 fb60 	bl	80051ec <_Bfree>
 8004b2c:	46c2      	mov	sl, r8
 8004b2e:	9b08      	ldr	r3, [sp, #32]
 8004b30:	1b9a      	subs	r2, r3, r6
 8004b32:	d004      	beq.n	8004b3e <_dtoa_r+0x7b6>
 8004b34:	4651      	mov	r1, sl
 8004b36:	4620      	mov	r0, r4
 8004b38:	f000 fcce 	bl	80054d8 <__pow5mult>
 8004b3c:	4682      	mov	sl, r0
 8004b3e:	2101      	movs	r1, #1
 8004b40:	4620      	mov	r0, r4
 8004b42:	f000 fc09 	bl	8005358 <__i2b>
 8004b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	f340 8081 	ble.w	8004c52 <_dtoa_r+0x8ca>
 8004b50:	461a      	mov	r2, r3
 8004b52:	4601      	mov	r1, r0
 8004b54:	4620      	mov	r0, r4
 8004b56:	f000 fcbf 	bl	80054d8 <__pow5mult>
 8004b5a:	9b07      	ldr	r3, [sp, #28]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	4606      	mov	r6, r0
 8004b60:	dd7a      	ble.n	8004c58 <_dtoa_r+0x8d0>
 8004b62:	f04f 0800 	mov.w	r8, #0
 8004b66:	6933      	ldr	r3, [r6, #16]
 8004b68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004b6c:	6918      	ldr	r0, [r3, #16]
 8004b6e:	f000 fba5 	bl	80052bc <__hi0bits>
 8004b72:	f1c0 0020 	rsb	r0, r0, #32
 8004b76:	9b06      	ldr	r3, [sp, #24]
 8004b78:	4418      	add	r0, r3
 8004b7a:	f010 001f 	ands.w	r0, r0, #31
 8004b7e:	f000 8094 	beq.w	8004caa <_dtoa_r+0x922>
 8004b82:	f1c0 0320 	rsb	r3, r0, #32
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	f340 8085 	ble.w	8004c96 <_dtoa_r+0x90e>
 8004b8c:	9b05      	ldr	r3, [sp, #20]
 8004b8e:	f1c0 001c 	rsb	r0, r0, #28
 8004b92:	4403      	add	r3, r0
 8004b94:	9305      	str	r3, [sp, #20]
 8004b96:	9b06      	ldr	r3, [sp, #24]
 8004b98:	4403      	add	r3, r0
 8004b9a:	4405      	add	r5, r0
 8004b9c:	9306      	str	r3, [sp, #24]
 8004b9e:	9b05      	ldr	r3, [sp, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	dd05      	ble.n	8004bb0 <_dtoa_r+0x828>
 8004ba4:	4651      	mov	r1, sl
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f000 fcef 	bl	800558c <__lshift>
 8004bae:	4682      	mov	sl, r0
 8004bb0:	9b06      	ldr	r3, [sp, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	dd05      	ble.n	8004bc2 <_dtoa_r+0x83a>
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f000 fce6 	bl	800558c <__lshift>
 8004bc0:	4606      	mov	r6, r0
 8004bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d072      	beq.n	8004cae <_dtoa_r+0x926>
 8004bc8:	4631      	mov	r1, r6
 8004bca:	4650      	mov	r0, sl
 8004bcc:	f000 fd4a 	bl	8005664 <__mcmp>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	da6c      	bge.n	8004cae <_dtoa_r+0x926>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	4651      	mov	r1, sl
 8004bd8:	220a      	movs	r2, #10
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f000 fb28 	bl	8005230 <__multadd>
 8004be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004be6:	4682      	mov	sl, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 81b0 	beq.w	8004f4e <_dtoa_r+0xbc6>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	4639      	mov	r1, r7
 8004bf2:	220a      	movs	r2, #10
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f000 fb1b 	bl	8005230 <__multadd>
 8004bfa:	9b01      	ldr	r3, [sp, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	4607      	mov	r7, r0
 8004c00:	f300 8096 	bgt.w	8004d30 <_dtoa_r+0x9a8>
 8004c04:	9b07      	ldr	r3, [sp, #28]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	dc59      	bgt.n	8004cbe <_dtoa_r+0x936>
 8004c0a:	e091      	b.n	8004d30 <_dtoa_r+0x9a8>
 8004c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c12:	e758      	b.n	8004ac6 <_dtoa_r+0x73e>
 8004c14:	9b04      	ldr	r3, [sp, #16]
 8004c16:	1e5e      	subs	r6, r3, #1
 8004c18:	9b08      	ldr	r3, [sp, #32]
 8004c1a:	42b3      	cmp	r3, r6
 8004c1c:	bfbf      	itttt	lt
 8004c1e:	9b08      	ldrlt	r3, [sp, #32]
 8004c20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004c22:	9608      	strlt	r6, [sp, #32]
 8004c24:	1af3      	sublt	r3, r6, r3
 8004c26:	bfb4      	ite	lt
 8004c28:	18d2      	addlt	r2, r2, r3
 8004c2a:	1b9e      	subge	r6, r3, r6
 8004c2c:	9b04      	ldr	r3, [sp, #16]
 8004c2e:	bfbc      	itt	lt
 8004c30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004c32:	2600      	movlt	r6, #0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bfb7      	itett	lt
 8004c38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004c3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004c40:	1a9d      	sublt	r5, r3, r2
 8004c42:	2300      	movlt	r3, #0
 8004c44:	e741      	b.n	8004aca <_dtoa_r+0x742>
 8004c46:	9e08      	ldr	r6, [sp, #32]
 8004c48:	9d05      	ldr	r5, [sp, #20]
 8004c4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004c4c:	e748      	b.n	8004ae0 <_dtoa_r+0x758>
 8004c4e:	9a08      	ldr	r2, [sp, #32]
 8004c50:	e770      	b.n	8004b34 <_dtoa_r+0x7ac>
 8004c52:	9b07      	ldr	r3, [sp, #28]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	dc19      	bgt.n	8004c8c <_dtoa_r+0x904>
 8004c58:	9b02      	ldr	r3, [sp, #8]
 8004c5a:	b9bb      	cbnz	r3, 8004c8c <_dtoa_r+0x904>
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c62:	b99b      	cbnz	r3, 8004c8c <_dtoa_r+0x904>
 8004c64:	9b03      	ldr	r3, [sp, #12]
 8004c66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c6a:	0d1b      	lsrs	r3, r3, #20
 8004c6c:	051b      	lsls	r3, r3, #20
 8004c6e:	b183      	cbz	r3, 8004c92 <_dtoa_r+0x90a>
 8004c70:	9b05      	ldr	r3, [sp, #20]
 8004c72:	3301      	adds	r3, #1
 8004c74:	9305      	str	r3, [sp, #20]
 8004c76:	9b06      	ldr	r3, [sp, #24]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	9306      	str	r3, [sp, #24]
 8004c7c:	f04f 0801 	mov.w	r8, #1
 8004c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f47f af6f 	bne.w	8004b66 <_dtoa_r+0x7de>
 8004c88:	2001      	movs	r0, #1
 8004c8a:	e774      	b.n	8004b76 <_dtoa_r+0x7ee>
 8004c8c:	f04f 0800 	mov.w	r8, #0
 8004c90:	e7f6      	b.n	8004c80 <_dtoa_r+0x8f8>
 8004c92:	4698      	mov	r8, r3
 8004c94:	e7f4      	b.n	8004c80 <_dtoa_r+0x8f8>
 8004c96:	d082      	beq.n	8004b9e <_dtoa_r+0x816>
 8004c98:	9a05      	ldr	r2, [sp, #20]
 8004c9a:	331c      	adds	r3, #28
 8004c9c:	441a      	add	r2, r3
 8004c9e:	9205      	str	r2, [sp, #20]
 8004ca0:	9a06      	ldr	r2, [sp, #24]
 8004ca2:	441a      	add	r2, r3
 8004ca4:	441d      	add	r5, r3
 8004ca6:	9206      	str	r2, [sp, #24]
 8004ca8:	e779      	b.n	8004b9e <_dtoa_r+0x816>
 8004caa:	4603      	mov	r3, r0
 8004cac:	e7f4      	b.n	8004c98 <_dtoa_r+0x910>
 8004cae:	9b04      	ldr	r3, [sp, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	dc37      	bgt.n	8004d24 <_dtoa_r+0x99c>
 8004cb4:	9b07      	ldr	r3, [sp, #28]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	dd34      	ble.n	8004d24 <_dtoa_r+0x99c>
 8004cba:	9b04      	ldr	r3, [sp, #16]
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	9b01      	ldr	r3, [sp, #4]
 8004cc0:	b963      	cbnz	r3, 8004cdc <_dtoa_r+0x954>
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	2205      	movs	r2, #5
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f000 fab2 	bl	8005230 <__multadd>
 8004ccc:	4601      	mov	r1, r0
 8004cce:	4606      	mov	r6, r0
 8004cd0:	4650      	mov	r0, sl
 8004cd2:	f000 fcc7 	bl	8005664 <__mcmp>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	f73f adbb 	bgt.w	8004852 <_dtoa_r+0x4ca>
 8004cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cde:	9d00      	ldr	r5, [sp, #0]
 8004ce0:	ea6f 0b03 	mvn.w	fp, r3
 8004ce4:	f04f 0800 	mov.w	r8, #0
 8004ce8:	4631      	mov	r1, r6
 8004cea:	4620      	mov	r0, r4
 8004cec:	f000 fa7e 	bl	80051ec <_Bfree>
 8004cf0:	2f00      	cmp	r7, #0
 8004cf2:	f43f aeab 	beq.w	8004a4c <_dtoa_r+0x6c4>
 8004cf6:	f1b8 0f00 	cmp.w	r8, #0
 8004cfa:	d005      	beq.n	8004d08 <_dtoa_r+0x980>
 8004cfc:	45b8      	cmp	r8, r7
 8004cfe:	d003      	beq.n	8004d08 <_dtoa_r+0x980>
 8004d00:	4641      	mov	r1, r8
 8004d02:	4620      	mov	r0, r4
 8004d04:	f000 fa72 	bl	80051ec <_Bfree>
 8004d08:	4639      	mov	r1, r7
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	f000 fa6e 	bl	80051ec <_Bfree>
 8004d10:	e69c      	b.n	8004a4c <_dtoa_r+0x6c4>
 8004d12:	2600      	movs	r6, #0
 8004d14:	4637      	mov	r7, r6
 8004d16:	e7e1      	b.n	8004cdc <_dtoa_r+0x954>
 8004d18:	46bb      	mov	fp, r7
 8004d1a:	4637      	mov	r7, r6
 8004d1c:	e599      	b.n	8004852 <_dtoa_r+0x4ca>
 8004d1e:	bf00      	nop
 8004d20:	40240000 	.word	0x40240000
 8004d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80c8 	beq.w	8004ebc <_dtoa_r+0xb34>
 8004d2c:	9b04      	ldr	r3, [sp, #16]
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	2d00      	cmp	r5, #0
 8004d32:	dd05      	ble.n	8004d40 <_dtoa_r+0x9b8>
 8004d34:	4639      	mov	r1, r7
 8004d36:	462a      	mov	r2, r5
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f000 fc27 	bl	800558c <__lshift>
 8004d3e:	4607      	mov	r7, r0
 8004d40:	f1b8 0f00 	cmp.w	r8, #0
 8004d44:	d05b      	beq.n	8004dfe <_dtoa_r+0xa76>
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f000 fa0f 	bl	800516c <_Balloc>
 8004d4e:	4605      	mov	r5, r0
 8004d50:	b928      	cbnz	r0, 8004d5e <_dtoa_r+0x9d6>
 8004d52:	4b83      	ldr	r3, [pc, #524]	; (8004f60 <_dtoa_r+0xbd8>)
 8004d54:	4602      	mov	r2, r0
 8004d56:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004d5a:	f7ff bb2e 	b.w	80043ba <_dtoa_r+0x32>
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	3202      	adds	r2, #2
 8004d62:	0092      	lsls	r2, r2, #2
 8004d64:	f107 010c 	add.w	r1, r7, #12
 8004d68:	300c      	adds	r0, #12
 8004d6a:	f7ff fa74 	bl	8004256 <memcpy>
 8004d6e:	2201      	movs	r2, #1
 8004d70:	4629      	mov	r1, r5
 8004d72:	4620      	mov	r0, r4
 8004d74:	f000 fc0a 	bl	800558c <__lshift>
 8004d78:	9b00      	ldr	r3, [sp, #0]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	9304      	str	r3, [sp, #16]
 8004d7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d82:	4413      	add	r3, r2
 8004d84:	9308      	str	r3, [sp, #32]
 8004d86:	9b02      	ldr	r3, [sp, #8]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	46b8      	mov	r8, r7
 8004d8e:	9306      	str	r3, [sp, #24]
 8004d90:	4607      	mov	r7, r0
 8004d92:	9b04      	ldr	r3, [sp, #16]
 8004d94:	4631      	mov	r1, r6
 8004d96:	3b01      	subs	r3, #1
 8004d98:	4650      	mov	r0, sl
 8004d9a:	9301      	str	r3, [sp, #4]
 8004d9c:	f7ff fa69 	bl	8004272 <quorem>
 8004da0:	4641      	mov	r1, r8
 8004da2:	9002      	str	r0, [sp, #8]
 8004da4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004da8:	4650      	mov	r0, sl
 8004daa:	f000 fc5b 	bl	8005664 <__mcmp>
 8004dae:	463a      	mov	r2, r7
 8004db0:	9005      	str	r0, [sp, #20]
 8004db2:	4631      	mov	r1, r6
 8004db4:	4620      	mov	r0, r4
 8004db6:	f000 fc71 	bl	800569c <__mdiff>
 8004dba:	68c2      	ldr	r2, [r0, #12]
 8004dbc:	4605      	mov	r5, r0
 8004dbe:	bb02      	cbnz	r2, 8004e02 <_dtoa_r+0xa7a>
 8004dc0:	4601      	mov	r1, r0
 8004dc2:	4650      	mov	r0, sl
 8004dc4:	f000 fc4e 	bl	8005664 <__mcmp>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4629      	mov	r1, r5
 8004dcc:	4620      	mov	r0, r4
 8004dce:	9209      	str	r2, [sp, #36]	; 0x24
 8004dd0:	f000 fa0c 	bl	80051ec <_Bfree>
 8004dd4:	9b07      	ldr	r3, [sp, #28]
 8004dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dd8:	9d04      	ldr	r5, [sp, #16]
 8004dda:	ea43 0102 	orr.w	r1, r3, r2
 8004dde:	9b06      	ldr	r3, [sp, #24]
 8004de0:	4319      	orrs	r1, r3
 8004de2:	d110      	bne.n	8004e06 <_dtoa_r+0xa7e>
 8004de4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004de8:	d029      	beq.n	8004e3e <_dtoa_r+0xab6>
 8004dea:	9b05      	ldr	r3, [sp, #20]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	dd02      	ble.n	8004df6 <_dtoa_r+0xa6e>
 8004df0:	9b02      	ldr	r3, [sp, #8]
 8004df2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004df6:	9b01      	ldr	r3, [sp, #4]
 8004df8:	f883 9000 	strb.w	r9, [r3]
 8004dfc:	e774      	b.n	8004ce8 <_dtoa_r+0x960>
 8004dfe:	4638      	mov	r0, r7
 8004e00:	e7ba      	b.n	8004d78 <_dtoa_r+0x9f0>
 8004e02:	2201      	movs	r2, #1
 8004e04:	e7e1      	b.n	8004dca <_dtoa_r+0xa42>
 8004e06:	9b05      	ldr	r3, [sp, #20]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	db04      	blt.n	8004e16 <_dtoa_r+0xa8e>
 8004e0c:	9907      	ldr	r1, [sp, #28]
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	9906      	ldr	r1, [sp, #24]
 8004e12:	430b      	orrs	r3, r1
 8004e14:	d120      	bne.n	8004e58 <_dtoa_r+0xad0>
 8004e16:	2a00      	cmp	r2, #0
 8004e18:	dded      	ble.n	8004df6 <_dtoa_r+0xa6e>
 8004e1a:	4651      	mov	r1, sl
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f000 fbb4 	bl	800558c <__lshift>
 8004e24:	4631      	mov	r1, r6
 8004e26:	4682      	mov	sl, r0
 8004e28:	f000 fc1c 	bl	8005664 <__mcmp>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	dc03      	bgt.n	8004e38 <_dtoa_r+0xab0>
 8004e30:	d1e1      	bne.n	8004df6 <_dtoa_r+0xa6e>
 8004e32:	f019 0f01 	tst.w	r9, #1
 8004e36:	d0de      	beq.n	8004df6 <_dtoa_r+0xa6e>
 8004e38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e3c:	d1d8      	bne.n	8004df0 <_dtoa_r+0xa68>
 8004e3e:	9a01      	ldr	r2, [sp, #4]
 8004e40:	2339      	movs	r3, #57	; 0x39
 8004e42:	7013      	strb	r3, [r2, #0]
 8004e44:	462b      	mov	r3, r5
 8004e46:	461d      	mov	r5, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004e4e:	2a39      	cmp	r2, #57	; 0x39
 8004e50:	d06c      	beq.n	8004f2c <_dtoa_r+0xba4>
 8004e52:	3201      	adds	r2, #1
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	e747      	b.n	8004ce8 <_dtoa_r+0x960>
 8004e58:	2a00      	cmp	r2, #0
 8004e5a:	dd07      	ble.n	8004e6c <_dtoa_r+0xae4>
 8004e5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e60:	d0ed      	beq.n	8004e3e <_dtoa_r+0xab6>
 8004e62:	9a01      	ldr	r2, [sp, #4]
 8004e64:	f109 0301 	add.w	r3, r9, #1
 8004e68:	7013      	strb	r3, [r2, #0]
 8004e6a:	e73d      	b.n	8004ce8 <_dtoa_r+0x960>
 8004e6c:	9b04      	ldr	r3, [sp, #16]
 8004e6e:	9a08      	ldr	r2, [sp, #32]
 8004e70:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d043      	beq.n	8004f00 <_dtoa_r+0xb78>
 8004e78:	4651      	mov	r1, sl
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	220a      	movs	r2, #10
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f000 f9d6 	bl	8005230 <__multadd>
 8004e84:	45b8      	cmp	r8, r7
 8004e86:	4682      	mov	sl, r0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	f04f 020a 	mov.w	r2, #10
 8004e90:	4641      	mov	r1, r8
 8004e92:	4620      	mov	r0, r4
 8004e94:	d107      	bne.n	8004ea6 <_dtoa_r+0xb1e>
 8004e96:	f000 f9cb 	bl	8005230 <__multadd>
 8004e9a:	4680      	mov	r8, r0
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	9b04      	ldr	r3, [sp, #16]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	9304      	str	r3, [sp, #16]
 8004ea4:	e775      	b.n	8004d92 <_dtoa_r+0xa0a>
 8004ea6:	f000 f9c3 	bl	8005230 <__multadd>
 8004eaa:	4639      	mov	r1, r7
 8004eac:	4680      	mov	r8, r0
 8004eae:	2300      	movs	r3, #0
 8004eb0:	220a      	movs	r2, #10
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f000 f9bc 	bl	8005230 <__multadd>
 8004eb8:	4607      	mov	r7, r0
 8004eba:	e7f0      	b.n	8004e9e <_dtoa_r+0xb16>
 8004ebc:	9b04      	ldr	r3, [sp, #16]
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	9d00      	ldr	r5, [sp, #0]
 8004ec2:	4631      	mov	r1, r6
 8004ec4:	4650      	mov	r0, sl
 8004ec6:	f7ff f9d4 	bl	8004272 <quorem>
 8004eca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004ece:	9b00      	ldr	r3, [sp, #0]
 8004ed0:	f805 9b01 	strb.w	r9, [r5], #1
 8004ed4:	1aea      	subs	r2, r5, r3
 8004ed6:	9b01      	ldr	r3, [sp, #4]
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	dd07      	ble.n	8004eec <_dtoa_r+0xb64>
 8004edc:	4651      	mov	r1, sl
 8004ede:	2300      	movs	r3, #0
 8004ee0:	220a      	movs	r2, #10
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f000 f9a4 	bl	8005230 <__multadd>
 8004ee8:	4682      	mov	sl, r0
 8004eea:	e7ea      	b.n	8004ec2 <_dtoa_r+0xb3a>
 8004eec:	9b01      	ldr	r3, [sp, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	bfc8      	it	gt
 8004ef2:	461d      	movgt	r5, r3
 8004ef4:	9b00      	ldr	r3, [sp, #0]
 8004ef6:	bfd8      	it	le
 8004ef8:	2501      	movle	r5, #1
 8004efa:	441d      	add	r5, r3
 8004efc:	f04f 0800 	mov.w	r8, #0
 8004f00:	4651      	mov	r1, sl
 8004f02:	2201      	movs	r2, #1
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 fb41 	bl	800558c <__lshift>
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4682      	mov	sl, r0
 8004f0e:	f000 fba9 	bl	8005664 <__mcmp>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	dc96      	bgt.n	8004e44 <_dtoa_r+0xabc>
 8004f16:	d102      	bne.n	8004f1e <_dtoa_r+0xb96>
 8004f18:	f019 0f01 	tst.w	r9, #1
 8004f1c:	d192      	bne.n	8004e44 <_dtoa_r+0xabc>
 8004f1e:	462b      	mov	r3, r5
 8004f20:	461d      	mov	r5, r3
 8004f22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f26:	2a30      	cmp	r2, #48	; 0x30
 8004f28:	d0fa      	beq.n	8004f20 <_dtoa_r+0xb98>
 8004f2a:	e6dd      	b.n	8004ce8 <_dtoa_r+0x960>
 8004f2c:	9a00      	ldr	r2, [sp, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d189      	bne.n	8004e46 <_dtoa_r+0xabe>
 8004f32:	f10b 0b01 	add.w	fp, fp, #1
 8004f36:	2331      	movs	r3, #49	; 0x31
 8004f38:	e796      	b.n	8004e68 <_dtoa_r+0xae0>
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <_dtoa_r+0xbdc>)
 8004f3c:	f7ff ba99 	b.w	8004472 <_dtoa_r+0xea>
 8004f40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f47f aa6d 	bne.w	8004422 <_dtoa_r+0x9a>
 8004f48:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <_dtoa_r+0xbe0>)
 8004f4a:	f7ff ba92 	b.w	8004472 <_dtoa_r+0xea>
 8004f4e:	9b01      	ldr	r3, [sp, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	dcb5      	bgt.n	8004ec0 <_dtoa_r+0xb38>
 8004f54:	9b07      	ldr	r3, [sp, #28]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	f73f aeb1 	bgt.w	8004cbe <_dtoa_r+0x936>
 8004f5c:	e7b0      	b.n	8004ec0 <_dtoa_r+0xb38>
 8004f5e:	bf00      	nop
 8004f60:	080060f8 	.word	0x080060f8
 8004f64:	08006058 	.word	0x08006058
 8004f68:	0800607c 	.word	0x0800607c

08004f6c <_free_r>:
 8004f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f6e:	2900      	cmp	r1, #0
 8004f70:	d044      	beq.n	8004ffc <_free_r+0x90>
 8004f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f76:	9001      	str	r0, [sp, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8004f7e:	bfb8      	it	lt
 8004f80:	18e4      	addlt	r4, r4, r3
 8004f82:	f000 f8e7 	bl	8005154 <__malloc_lock>
 8004f86:	4a1e      	ldr	r2, [pc, #120]	; (8005000 <_free_r+0x94>)
 8004f88:	9801      	ldr	r0, [sp, #4]
 8004f8a:	6813      	ldr	r3, [r2, #0]
 8004f8c:	b933      	cbnz	r3, 8004f9c <_free_r+0x30>
 8004f8e:	6063      	str	r3, [r4, #4]
 8004f90:	6014      	str	r4, [r2, #0]
 8004f92:	b003      	add	sp, #12
 8004f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f98:	f000 b8e2 	b.w	8005160 <__malloc_unlock>
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	d908      	bls.n	8004fb2 <_free_r+0x46>
 8004fa0:	6825      	ldr	r5, [r4, #0]
 8004fa2:	1961      	adds	r1, r4, r5
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	bf01      	itttt	eq
 8004fa8:	6819      	ldreq	r1, [r3, #0]
 8004faa:	685b      	ldreq	r3, [r3, #4]
 8004fac:	1949      	addeq	r1, r1, r5
 8004fae:	6021      	streq	r1, [r4, #0]
 8004fb0:	e7ed      	b.n	8004f8e <_free_r+0x22>
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	b10b      	cbz	r3, 8004fbc <_free_r+0x50>
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	d9fa      	bls.n	8004fb2 <_free_r+0x46>
 8004fbc:	6811      	ldr	r1, [r2, #0]
 8004fbe:	1855      	adds	r5, r2, r1
 8004fc0:	42a5      	cmp	r5, r4
 8004fc2:	d10b      	bne.n	8004fdc <_free_r+0x70>
 8004fc4:	6824      	ldr	r4, [r4, #0]
 8004fc6:	4421      	add	r1, r4
 8004fc8:	1854      	adds	r4, r2, r1
 8004fca:	42a3      	cmp	r3, r4
 8004fcc:	6011      	str	r1, [r2, #0]
 8004fce:	d1e0      	bne.n	8004f92 <_free_r+0x26>
 8004fd0:	681c      	ldr	r4, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	6053      	str	r3, [r2, #4]
 8004fd6:	440c      	add	r4, r1
 8004fd8:	6014      	str	r4, [r2, #0]
 8004fda:	e7da      	b.n	8004f92 <_free_r+0x26>
 8004fdc:	d902      	bls.n	8004fe4 <_free_r+0x78>
 8004fde:	230c      	movs	r3, #12
 8004fe0:	6003      	str	r3, [r0, #0]
 8004fe2:	e7d6      	b.n	8004f92 <_free_r+0x26>
 8004fe4:	6825      	ldr	r5, [r4, #0]
 8004fe6:	1961      	adds	r1, r4, r5
 8004fe8:	428b      	cmp	r3, r1
 8004fea:	bf04      	itt	eq
 8004fec:	6819      	ldreq	r1, [r3, #0]
 8004fee:	685b      	ldreq	r3, [r3, #4]
 8004ff0:	6063      	str	r3, [r4, #4]
 8004ff2:	bf04      	itt	eq
 8004ff4:	1949      	addeq	r1, r1, r5
 8004ff6:	6021      	streq	r1, [r4, #0]
 8004ff8:	6054      	str	r4, [r2, #4]
 8004ffa:	e7ca      	b.n	8004f92 <_free_r+0x26>
 8004ffc:	b003      	add	sp, #12
 8004ffe:	bd30      	pop	{r4, r5, pc}
 8005000:	2000042c 	.word	0x2000042c

08005004 <malloc>:
 8005004:	4b02      	ldr	r3, [pc, #8]	; (8005010 <malloc+0xc>)
 8005006:	4601      	mov	r1, r0
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	f000 b823 	b.w	8005054 <_malloc_r>
 800500e:	bf00      	nop
 8005010:	20000064 	.word	0x20000064

08005014 <sbrk_aligned>:
 8005014:	b570      	push	{r4, r5, r6, lr}
 8005016:	4e0e      	ldr	r6, [pc, #56]	; (8005050 <sbrk_aligned+0x3c>)
 8005018:	460c      	mov	r4, r1
 800501a:	6831      	ldr	r1, [r6, #0]
 800501c:	4605      	mov	r5, r0
 800501e:	b911      	cbnz	r1, 8005026 <sbrk_aligned+0x12>
 8005020:	f000 fcce 	bl	80059c0 <_sbrk_r>
 8005024:	6030      	str	r0, [r6, #0]
 8005026:	4621      	mov	r1, r4
 8005028:	4628      	mov	r0, r5
 800502a:	f000 fcc9 	bl	80059c0 <_sbrk_r>
 800502e:	1c43      	adds	r3, r0, #1
 8005030:	d00a      	beq.n	8005048 <sbrk_aligned+0x34>
 8005032:	1cc4      	adds	r4, r0, #3
 8005034:	f024 0403 	bic.w	r4, r4, #3
 8005038:	42a0      	cmp	r0, r4
 800503a:	d007      	beq.n	800504c <sbrk_aligned+0x38>
 800503c:	1a21      	subs	r1, r4, r0
 800503e:	4628      	mov	r0, r5
 8005040:	f000 fcbe 	bl	80059c0 <_sbrk_r>
 8005044:	3001      	adds	r0, #1
 8005046:	d101      	bne.n	800504c <sbrk_aligned+0x38>
 8005048:	f04f 34ff 	mov.w	r4, #4294967295
 800504c:	4620      	mov	r0, r4
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	20000430 	.word	0x20000430

08005054 <_malloc_r>:
 8005054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005058:	1ccd      	adds	r5, r1, #3
 800505a:	f025 0503 	bic.w	r5, r5, #3
 800505e:	3508      	adds	r5, #8
 8005060:	2d0c      	cmp	r5, #12
 8005062:	bf38      	it	cc
 8005064:	250c      	movcc	r5, #12
 8005066:	2d00      	cmp	r5, #0
 8005068:	4607      	mov	r7, r0
 800506a:	db01      	blt.n	8005070 <_malloc_r+0x1c>
 800506c:	42a9      	cmp	r1, r5
 800506e:	d905      	bls.n	800507c <_malloc_r+0x28>
 8005070:	230c      	movs	r3, #12
 8005072:	603b      	str	r3, [r7, #0]
 8005074:	2600      	movs	r6, #0
 8005076:	4630      	mov	r0, r6
 8005078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800507c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005150 <_malloc_r+0xfc>
 8005080:	f000 f868 	bl	8005154 <__malloc_lock>
 8005084:	f8d8 3000 	ldr.w	r3, [r8]
 8005088:	461c      	mov	r4, r3
 800508a:	bb5c      	cbnz	r4, 80050e4 <_malloc_r+0x90>
 800508c:	4629      	mov	r1, r5
 800508e:	4638      	mov	r0, r7
 8005090:	f7ff ffc0 	bl	8005014 <sbrk_aligned>
 8005094:	1c43      	adds	r3, r0, #1
 8005096:	4604      	mov	r4, r0
 8005098:	d155      	bne.n	8005146 <_malloc_r+0xf2>
 800509a:	f8d8 4000 	ldr.w	r4, [r8]
 800509e:	4626      	mov	r6, r4
 80050a0:	2e00      	cmp	r6, #0
 80050a2:	d145      	bne.n	8005130 <_malloc_r+0xdc>
 80050a4:	2c00      	cmp	r4, #0
 80050a6:	d048      	beq.n	800513a <_malloc_r+0xe6>
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	4631      	mov	r1, r6
 80050ac:	4638      	mov	r0, r7
 80050ae:	eb04 0903 	add.w	r9, r4, r3
 80050b2:	f000 fc85 	bl	80059c0 <_sbrk_r>
 80050b6:	4581      	cmp	r9, r0
 80050b8:	d13f      	bne.n	800513a <_malloc_r+0xe6>
 80050ba:	6821      	ldr	r1, [r4, #0]
 80050bc:	1a6d      	subs	r5, r5, r1
 80050be:	4629      	mov	r1, r5
 80050c0:	4638      	mov	r0, r7
 80050c2:	f7ff ffa7 	bl	8005014 <sbrk_aligned>
 80050c6:	3001      	adds	r0, #1
 80050c8:	d037      	beq.n	800513a <_malloc_r+0xe6>
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	442b      	add	r3, r5
 80050ce:	6023      	str	r3, [r4, #0]
 80050d0:	f8d8 3000 	ldr.w	r3, [r8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d038      	beq.n	800514a <_malloc_r+0xf6>
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	42a2      	cmp	r2, r4
 80050dc:	d12b      	bne.n	8005136 <_malloc_r+0xe2>
 80050de:	2200      	movs	r2, #0
 80050e0:	605a      	str	r2, [r3, #4]
 80050e2:	e00f      	b.n	8005104 <_malloc_r+0xb0>
 80050e4:	6822      	ldr	r2, [r4, #0]
 80050e6:	1b52      	subs	r2, r2, r5
 80050e8:	d41f      	bmi.n	800512a <_malloc_r+0xd6>
 80050ea:	2a0b      	cmp	r2, #11
 80050ec:	d917      	bls.n	800511e <_malloc_r+0xca>
 80050ee:	1961      	adds	r1, r4, r5
 80050f0:	42a3      	cmp	r3, r4
 80050f2:	6025      	str	r5, [r4, #0]
 80050f4:	bf18      	it	ne
 80050f6:	6059      	strne	r1, [r3, #4]
 80050f8:	6863      	ldr	r3, [r4, #4]
 80050fa:	bf08      	it	eq
 80050fc:	f8c8 1000 	streq.w	r1, [r8]
 8005100:	5162      	str	r2, [r4, r5]
 8005102:	604b      	str	r3, [r1, #4]
 8005104:	4638      	mov	r0, r7
 8005106:	f104 060b 	add.w	r6, r4, #11
 800510a:	f000 f829 	bl	8005160 <__malloc_unlock>
 800510e:	f026 0607 	bic.w	r6, r6, #7
 8005112:	1d23      	adds	r3, r4, #4
 8005114:	1af2      	subs	r2, r6, r3
 8005116:	d0ae      	beq.n	8005076 <_malloc_r+0x22>
 8005118:	1b9b      	subs	r3, r3, r6
 800511a:	50a3      	str	r3, [r4, r2]
 800511c:	e7ab      	b.n	8005076 <_malloc_r+0x22>
 800511e:	42a3      	cmp	r3, r4
 8005120:	6862      	ldr	r2, [r4, #4]
 8005122:	d1dd      	bne.n	80050e0 <_malloc_r+0x8c>
 8005124:	f8c8 2000 	str.w	r2, [r8]
 8005128:	e7ec      	b.n	8005104 <_malloc_r+0xb0>
 800512a:	4623      	mov	r3, r4
 800512c:	6864      	ldr	r4, [r4, #4]
 800512e:	e7ac      	b.n	800508a <_malloc_r+0x36>
 8005130:	4634      	mov	r4, r6
 8005132:	6876      	ldr	r6, [r6, #4]
 8005134:	e7b4      	b.n	80050a0 <_malloc_r+0x4c>
 8005136:	4613      	mov	r3, r2
 8005138:	e7cc      	b.n	80050d4 <_malloc_r+0x80>
 800513a:	230c      	movs	r3, #12
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	4638      	mov	r0, r7
 8005140:	f000 f80e 	bl	8005160 <__malloc_unlock>
 8005144:	e797      	b.n	8005076 <_malloc_r+0x22>
 8005146:	6025      	str	r5, [r4, #0]
 8005148:	e7dc      	b.n	8005104 <_malloc_r+0xb0>
 800514a:	605b      	str	r3, [r3, #4]
 800514c:	deff      	udf	#255	; 0xff
 800514e:	bf00      	nop
 8005150:	2000042c 	.word	0x2000042c

08005154 <__malloc_lock>:
 8005154:	4801      	ldr	r0, [pc, #4]	; (800515c <__malloc_lock+0x8>)
 8005156:	f7ff b87c 	b.w	8004252 <__retarget_lock_acquire_recursive>
 800515a:	bf00      	nop
 800515c:	20000428 	.word	0x20000428

08005160 <__malloc_unlock>:
 8005160:	4801      	ldr	r0, [pc, #4]	; (8005168 <__malloc_unlock+0x8>)
 8005162:	f7ff b877 	b.w	8004254 <__retarget_lock_release_recursive>
 8005166:	bf00      	nop
 8005168:	20000428 	.word	0x20000428

0800516c <_Balloc>:
 800516c:	b570      	push	{r4, r5, r6, lr}
 800516e:	69c6      	ldr	r6, [r0, #28]
 8005170:	4604      	mov	r4, r0
 8005172:	460d      	mov	r5, r1
 8005174:	b976      	cbnz	r6, 8005194 <_Balloc+0x28>
 8005176:	2010      	movs	r0, #16
 8005178:	f7ff ff44 	bl	8005004 <malloc>
 800517c:	4602      	mov	r2, r0
 800517e:	61e0      	str	r0, [r4, #28]
 8005180:	b920      	cbnz	r0, 800518c <_Balloc+0x20>
 8005182:	4b18      	ldr	r3, [pc, #96]	; (80051e4 <_Balloc+0x78>)
 8005184:	4818      	ldr	r0, [pc, #96]	; (80051e8 <_Balloc+0x7c>)
 8005186:	216b      	movs	r1, #107	; 0x6b
 8005188:	f000 fc2a 	bl	80059e0 <__assert_func>
 800518c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005190:	6006      	str	r6, [r0, #0]
 8005192:	60c6      	str	r6, [r0, #12]
 8005194:	69e6      	ldr	r6, [r4, #28]
 8005196:	68f3      	ldr	r3, [r6, #12]
 8005198:	b183      	cbz	r3, 80051bc <_Balloc+0x50>
 800519a:	69e3      	ldr	r3, [r4, #28]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80051a2:	b9b8      	cbnz	r0, 80051d4 <_Balloc+0x68>
 80051a4:	2101      	movs	r1, #1
 80051a6:	fa01 f605 	lsl.w	r6, r1, r5
 80051aa:	1d72      	adds	r2, r6, #5
 80051ac:	0092      	lsls	r2, r2, #2
 80051ae:	4620      	mov	r0, r4
 80051b0:	f000 fc34 	bl	8005a1c <_calloc_r>
 80051b4:	b160      	cbz	r0, 80051d0 <_Balloc+0x64>
 80051b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80051ba:	e00e      	b.n	80051da <_Balloc+0x6e>
 80051bc:	2221      	movs	r2, #33	; 0x21
 80051be:	2104      	movs	r1, #4
 80051c0:	4620      	mov	r0, r4
 80051c2:	f000 fc2b 	bl	8005a1c <_calloc_r>
 80051c6:	69e3      	ldr	r3, [r4, #28]
 80051c8:	60f0      	str	r0, [r6, #12]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e4      	bne.n	800519a <_Balloc+0x2e>
 80051d0:	2000      	movs	r0, #0
 80051d2:	bd70      	pop	{r4, r5, r6, pc}
 80051d4:	6802      	ldr	r2, [r0, #0]
 80051d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80051da:	2300      	movs	r3, #0
 80051dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80051e0:	e7f7      	b.n	80051d2 <_Balloc+0x66>
 80051e2:	bf00      	nop
 80051e4:	08006089 	.word	0x08006089
 80051e8:	08006109 	.word	0x08006109

080051ec <_Bfree>:
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	69c6      	ldr	r6, [r0, #28]
 80051f0:	4605      	mov	r5, r0
 80051f2:	460c      	mov	r4, r1
 80051f4:	b976      	cbnz	r6, 8005214 <_Bfree+0x28>
 80051f6:	2010      	movs	r0, #16
 80051f8:	f7ff ff04 	bl	8005004 <malloc>
 80051fc:	4602      	mov	r2, r0
 80051fe:	61e8      	str	r0, [r5, #28]
 8005200:	b920      	cbnz	r0, 800520c <_Bfree+0x20>
 8005202:	4b09      	ldr	r3, [pc, #36]	; (8005228 <_Bfree+0x3c>)
 8005204:	4809      	ldr	r0, [pc, #36]	; (800522c <_Bfree+0x40>)
 8005206:	218f      	movs	r1, #143	; 0x8f
 8005208:	f000 fbea 	bl	80059e0 <__assert_func>
 800520c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005210:	6006      	str	r6, [r0, #0]
 8005212:	60c6      	str	r6, [r0, #12]
 8005214:	b13c      	cbz	r4, 8005226 <_Bfree+0x3a>
 8005216:	69eb      	ldr	r3, [r5, #28]
 8005218:	6862      	ldr	r2, [r4, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005220:	6021      	str	r1, [r4, #0]
 8005222:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	08006089 	.word	0x08006089
 800522c:	08006109 	.word	0x08006109

08005230 <__multadd>:
 8005230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005234:	690d      	ldr	r5, [r1, #16]
 8005236:	4607      	mov	r7, r0
 8005238:	460c      	mov	r4, r1
 800523a:	461e      	mov	r6, r3
 800523c:	f101 0c14 	add.w	ip, r1, #20
 8005240:	2000      	movs	r0, #0
 8005242:	f8dc 3000 	ldr.w	r3, [ip]
 8005246:	b299      	uxth	r1, r3
 8005248:	fb02 6101 	mla	r1, r2, r1, r6
 800524c:	0c1e      	lsrs	r6, r3, #16
 800524e:	0c0b      	lsrs	r3, r1, #16
 8005250:	fb02 3306 	mla	r3, r2, r6, r3
 8005254:	b289      	uxth	r1, r1
 8005256:	3001      	adds	r0, #1
 8005258:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800525c:	4285      	cmp	r5, r0
 800525e:	f84c 1b04 	str.w	r1, [ip], #4
 8005262:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005266:	dcec      	bgt.n	8005242 <__multadd+0x12>
 8005268:	b30e      	cbz	r6, 80052ae <__multadd+0x7e>
 800526a:	68a3      	ldr	r3, [r4, #8]
 800526c:	42ab      	cmp	r3, r5
 800526e:	dc19      	bgt.n	80052a4 <__multadd+0x74>
 8005270:	6861      	ldr	r1, [r4, #4]
 8005272:	4638      	mov	r0, r7
 8005274:	3101      	adds	r1, #1
 8005276:	f7ff ff79 	bl	800516c <_Balloc>
 800527a:	4680      	mov	r8, r0
 800527c:	b928      	cbnz	r0, 800528a <__multadd+0x5a>
 800527e:	4602      	mov	r2, r0
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <__multadd+0x84>)
 8005282:	480d      	ldr	r0, [pc, #52]	; (80052b8 <__multadd+0x88>)
 8005284:	21ba      	movs	r1, #186	; 0xba
 8005286:	f000 fbab 	bl	80059e0 <__assert_func>
 800528a:	6922      	ldr	r2, [r4, #16]
 800528c:	3202      	adds	r2, #2
 800528e:	f104 010c 	add.w	r1, r4, #12
 8005292:	0092      	lsls	r2, r2, #2
 8005294:	300c      	adds	r0, #12
 8005296:	f7fe ffde 	bl	8004256 <memcpy>
 800529a:	4621      	mov	r1, r4
 800529c:	4638      	mov	r0, r7
 800529e:	f7ff ffa5 	bl	80051ec <_Bfree>
 80052a2:	4644      	mov	r4, r8
 80052a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80052a8:	3501      	adds	r5, #1
 80052aa:	615e      	str	r6, [r3, #20]
 80052ac:	6125      	str	r5, [r4, #16]
 80052ae:	4620      	mov	r0, r4
 80052b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b4:	080060f8 	.word	0x080060f8
 80052b8:	08006109 	.word	0x08006109

080052bc <__hi0bits>:
 80052bc:	0c03      	lsrs	r3, r0, #16
 80052be:	041b      	lsls	r3, r3, #16
 80052c0:	b9d3      	cbnz	r3, 80052f8 <__hi0bits+0x3c>
 80052c2:	0400      	lsls	r0, r0, #16
 80052c4:	2310      	movs	r3, #16
 80052c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80052ca:	bf04      	itt	eq
 80052cc:	0200      	lsleq	r0, r0, #8
 80052ce:	3308      	addeq	r3, #8
 80052d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80052d4:	bf04      	itt	eq
 80052d6:	0100      	lsleq	r0, r0, #4
 80052d8:	3304      	addeq	r3, #4
 80052da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80052de:	bf04      	itt	eq
 80052e0:	0080      	lsleq	r0, r0, #2
 80052e2:	3302      	addeq	r3, #2
 80052e4:	2800      	cmp	r0, #0
 80052e6:	db05      	blt.n	80052f4 <__hi0bits+0x38>
 80052e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80052ec:	f103 0301 	add.w	r3, r3, #1
 80052f0:	bf08      	it	eq
 80052f2:	2320      	moveq	r3, #32
 80052f4:	4618      	mov	r0, r3
 80052f6:	4770      	bx	lr
 80052f8:	2300      	movs	r3, #0
 80052fa:	e7e4      	b.n	80052c6 <__hi0bits+0xa>

080052fc <__lo0bits>:
 80052fc:	6803      	ldr	r3, [r0, #0]
 80052fe:	f013 0207 	ands.w	r2, r3, #7
 8005302:	d00c      	beq.n	800531e <__lo0bits+0x22>
 8005304:	07d9      	lsls	r1, r3, #31
 8005306:	d422      	bmi.n	800534e <__lo0bits+0x52>
 8005308:	079a      	lsls	r2, r3, #30
 800530a:	bf49      	itett	mi
 800530c:	085b      	lsrmi	r3, r3, #1
 800530e:	089b      	lsrpl	r3, r3, #2
 8005310:	6003      	strmi	r3, [r0, #0]
 8005312:	2201      	movmi	r2, #1
 8005314:	bf5c      	itt	pl
 8005316:	6003      	strpl	r3, [r0, #0]
 8005318:	2202      	movpl	r2, #2
 800531a:	4610      	mov	r0, r2
 800531c:	4770      	bx	lr
 800531e:	b299      	uxth	r1, r3
 8005320:	b909      	cbnz	r1, 8005326 <__lo0bits+0x2a>
 8005322:	0c1b      	lsrs	r3, r3, #16
 8005324:	2210      	movs	r2, #16
 8005326:	b2d9      	uxtb	r1, r3
 8005328:	b909      	cbnz	r1, 800532e <__lo0bits+0x32>
 800532a:	3208      	adds	r2, #8
 800532c:	0a1b      	lsrs	r3, r3, #8
 800532e:	0719      	lsls	r1, r3, #28
 8005330:	bf04      	itt	eq
 8005332:	091b      	lsreq	r3, r3, #4
 8005334:	3204      	addeq	r2, #4
 8005336:	0799      	lsls	r1, r3, #30
 8005338:	bf04      	itt	eq
 800533a:	089b      	lsreq	r3, r3, #2
 800533c:	3202      	addeq	r2, #2
 800533e:	07d9      	lsls	r1, r3, #31
 8005340:	d403      	bmi.n	800534a <__lo0bits+0x4e>
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	f102 0201 	add.w	r2, r2, #1
 8005348:	d003      	beq.n	8005352 <__lo0bits+0x56>
 800534a:	6003      	str	r3, [r0, #0]
 800534c:	e7e5      	b.n	800531a <__lo0bits+0x1e>
 800534e:	2200      	movs	r2, #0
 8005350:	e7e3      	b.n	800531a <__lo0bits+0x1e>
 8005352:	2220      	movs	r2, #32
 8005354:	e7e1      	b.n	800531a <__lo0bits+0x1e>
	...

08005358 <__i2b>:
 8005358:	b510      	push	{r4, lr}
 800535a:	460c      	mov	r4, r1
 800535c:	2101      	movs	r1, #1
 800535e:	f7ff ff05 	bl	800516c <_Balloc>
 8005362:	4602      	mov	r2, r0
 8005364:	b928      	cbnz	r0, 8005372 <__i2b+0x1a>
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <__i2b+0x24>)
 8005368:	4805      	ldr	r0, [pc, #20]	; (8005380 <__i2b+0x28>)
 800536a:	f240 1145 	movw	r1, #325	; 0x145
 800536e:	f000 fb37 	bl	80059e0 <__assert_func>
 8005372:	2301      	movs	r3, #1
 8005374:	6144      	str	r4, [r0, #20]
 8005376:	6103      	str	r3, [r0, #16]
 8005378:	bd10      	pop	{r4, pc}
 800537a:	bf00      	nop
 800537c:	080060f8 	.word	0x080060f8
 8005380:	08006109 	.word	0x08006109

08005384 <__multiply>:
 8005384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005388:	4691      	mov	r9, r2
 800538a:	690a      	ldr	r2, [r1, #16]
 800538c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005390:	429a      	cmp	r2, r3
 8005392:	bfb8      	it	lt
 8005394:	460b      	movlt	r3, r1
 8005396:	460c      	mov	r4, r1
 8005398:	bfbc      	itt	lt
 800539a:	464c      	movlt	r4, r9
 800539c:	4699      	movlt	r9, r3
 800539e:	6927      	ldr	r7, [r4, #16]
 80053a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80053a4:	68a3      	ldr	r3, [r4, #8]
 80053a6:	6861      	ldr	r1, [r4, #4]
 80053a8:	eb07 060a 	add.w	r6, r7, sl
 80053ac:	42b3      	cmp	r3, r6
 80053ae:	b085      	sub	sp, #20
 80053b0:	bfb8      	it	lt
 80053b2:	3101      	addlt	r1, #1
 80053b4:	f7ff feda 	bl	800516c <_Balloc>
 80053b8:	b930      	cbnz	r0, 80053c8 <__multiply+0x44>
 80053ba:	4602      	mov	r2, r0
 80053bc:	4b44      	ldr	r3, [pc, #272]	; (80054d0 <__multiply+0x14c>)
 80053be:	4845      	ldr	r0, [pc, #276]	; (80054d4 <__multiply+0x150>)
 80053c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80053c4:	f000 fb0c 	bl	80059e0 <__assert_func>
 80053c8:	f100 0514 	add.w	r5, r0, #20
 80053cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80053d0:	462b      	mov	r3, r5
 80053d2:	2200      	movs	r2, #0
 80053d4:	4543      	cmp	r3, r8
 80053d6:	d321      	bcc.n	800541c <__multiply+0x98>
 80053d8:	f104 0314 	add.w	r3, r4, #20
 80053dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80053e0:	f109 0314 	add.w	r3, r9, #20
 80053e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80053e8:	9202      	str	r2, [sp, #8]
 80053ea:	1b3a      	subs	r2, r7, r4
 80053ec:	3a15      	subs	r2, #21
 80053ee:	f022 0203 	bic.w	r2, r2, #3
 80053f2:	3204      	adds	r2, #4
 80053f4:	f104 0115 	add.w	r1, r4, #21
 80053f8:	428f      	cmp	r7, r1
 80053fa:	bf38      	it	cc
 80053fc:	2204      	movcc	r2, #4
 80053fe:	9201      	str	r2, [sp, #4]
 8005400:	9a02      	ldr	r2, [sp, #8]
 8005402:	9303      	str	r3, [sp, #12]
 8005404:	429a      	cmp	r2, r3
 8005406:	d80c      	bhi.n	8005422 <__multiply+0x9e>
 8005408:	2e00      	cmp	r6, #0
 800540a:	dd03      	ble.n	8005414 <__multiply+0x90>
 800540c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005410:	2b00      	cmp	r3, #0
 8005412:	d05b      	beq.n	80054cc <__multiply+0x148>
 8005414:	6106      	str	r6, [r0, #16]
 8005416:	b005      	add	sp, #20
 8005418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800541c:	f843 2b04 	str.w	r2, [r3], #4
 8005420:	e7d8      	b.n	80053d4 <__multiply+0x50>
 8005422:	f8b3 a000 	ldrh.w	sl, [r3]
 8005426:	f1ba 0f00 	cmp.w	sl, #0
 800542a:	d024      	beq.n	8005476 <__multiply+0xf2>
 800542c:	f104 0e14 	add.w	lr, r4, #20
 8005430:	46a9      	mov	r9, r5
 8005432:	f04f 0c00 	mov.w	ip, #0
 8005436:	f85e 2b04 	ldr.w	r2, [lr], #4
 800543a:	f8d9 1000 	ldr.w	r1, [r9]
 800543e:	fa1f fb82 	uxth.w	fp, r2
 8005442:	b289      	uxth	r1, r1
 8005444:	fb0a 110b 	mla	r1, sl, fp, r1
 8005448:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800544c:	f8d9 2000 	ldr.w	r2, [r9]
 8005450:	4461      	add	r1, ip
 8005452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005456:	fb0a c20b 	mla	r2, sl, fp, ip
 800545a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800545e:	b289      	uxth	r1, r1
 8005460:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005464:	4577      	cmp	r7, lr
 8005466:	f849 1b04 	str.w	r1, [r9], #4
 800546a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800546e:	d8e2      	bhi.n	8005436 <__multiply+0xb2>
 8005470:	9a01      	ldr	r2, [sp, #4]
 8005472:	f845 c002 	str.w	ip, [r5, r2]
 8005476:	9a03      	ldr	r2, [sp, #12]
 8005478:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800547c:	3304      	adds	r3, #4
 800547e:	f1b9 0f00 	cmp.w	r9, #0
 8005482:	d021      	beq.n	80054c8 <__multiply+0x144>
 8005484:	6829      	ldr	r1, [r5, #0]
 8005486:	f104 0c14 	add.w	ip, r4, #20
 800548a:	46ae      	mov	lr, r5
 800548c:	f04f 0a00 	mov.w	sl, #0
 8005490:	f8bc b000 	ldrh.w	fp, [ip]
 8005494:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005498:	fb09 220b 	mla	r2, r9, fp, r2
 800549c:	4452      	add	r2, sl
 800549e:	b289      	uxth	r1, r1
 80054a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80054a4:	f84e 1b04 	str.w	r1, [lr], #4
 80054a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80054ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80054b0:	f8be 1000 	ldrh.w	r1, [lr]
 80054b4:	fb09 110a 	mla	r1, r9, sl, r1
 80054b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80054bc:	4567      	cmp	r7, ip
 80054be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80054c2:	d8e5      	bhi.n	8005490 <__multiply+0x10c>
 80054c4:	9a01      	ldr	r2, [sp, #4]
 80054c6:	50a9      	str	r1, [r5, r2]
 80054c8:	3504      	adds	r5, #4
 80054ca:	e799      	b.n	8005400 <__multiply+0x7c>
 80054cc:	3e01      	subs	r6, #1
 80054ce:	e79b      	b.n	8005408 <__multiply+0x84>
 80054d0:	080060f8 	.word	0x080060f8
 80054d4:	08006109 	.word	0x08006109

080054d8 <__pow5mult>:
 80054d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054dc:	4615      	mov	r5, r2
 80054de:	f012 0203 	ands.w	r2, r2, #3
 80054e2:	4606      	mov	r6, r0
 80054e4:	460f      	mov	r7, r1
 80054e6:	d007      	beq.n	80054f8 <__pow5mult+0x20>
 80054e8:	4c25      	ldr	r4, [pc, #148]	; (8005580 <__pow5mult+0xa8>)
 80054ea:	3a01      	subs	r2, #1
 80054ec:	2300      	movs	r3, #0
 80054ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80054f2:	f7ff fe9d 	bl	8005230 <__multadd>
 80054f6:	4607      	mov	r7, r0
 80054f8:	10ad      	asrs	r5, r5, #2
 80054fa:	d03d      	beq.n	8005578 <__pow5mult+0xa0>
 80054fc:	69f4      	ldr	r4, [r6, #28]
 80054fe:	b97c      	cbnz	r4, 8005520 <__pow5mult+0x48>
 8005500:	2010      	movs	r0, #16
 8005502:	f7ff fd7f 	bl	8005004 <malloc>
 8005506:	4602      	mov	r2, r0
 8005508:	61f0      	str	r0, [r6, #28]
 800550a:	b928      	cbnz	r0, 8005518 <__pow5mult+0x40>
 800550c:	4b1d      	ldr	r3, [pc, #116]	; (8005584 <__pow5mult+0xac>)
 800550e:	481e      	ldr	r0, [pc, #120]	; (8005588 <__pow5mult+0xb0>)
 8005510:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005514:	f000 fa64 	bl	80059e0 <__assert_func>
 8005518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800551c:	6004      	str	r4, [r0, #0]
 800551e:	60c4      	str	r4, [r0, #12]
 8005520:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005528:	b94c      	cbnz	r4, 800553e <__pow5mult+0x66>
 800552a:	f240 2171 	movw	r1, #625	; 0x271
 800552e:	4630      	mov	r0, r6
 8005530:	f7ff ff12 	bl	8005358 <__i2b>
 8005534:	2300      	movs	r3, #0
 8005536:	f8c8 0008 	str.w	r0, [r8, #8]
 800553a:	4604      	mov	r4, r0
 800553c:	6003      	str	r3, [r0, #0]
 800553e:	f04f 0900 	mov.w	r9, #0
 8005542:	07eb      	lsls	r3, r5, #31
 8005544:	d50a      	bpl.n	800555c <__pow5mult+0x84>
 8005546:	4639      	mov	r1, r7
 8005548:	4622      	mov	r2, r4
 800554a:	4630      	mov	r0, r6
 800554c:	f7ff ff1a 	bl	8005384 <__multiply>
 8005550:	4639      	mov	r1, r7
 8005552:	4680      	mov	r8, r0
 8005554:	4630      	mov	r0, r6
 8005556:	f7ff fe49 	bl	80051ec <_Bfree>
 800555a:	4647      	mov	r7, r8
 800555c:	106d      	asrs	r5, r5, #1
 800555e:	d00b      	beq.n	8005578 <__pow5mult+0xa0>
 8005560:	6820      	ldr	r0, [r4, #0]
 8005562:	b938      	cbnz	r0, 8005574 <__pow5mult+0x9c>
 8005564:	4622      	mov	r2, r4
 8005566:	4621      	mov	r1, r4
 8005568:	4630      	mov	r0, r6
 800556a:	f7ff ff0b 	bl	8005384 <__multiply>
 800556e:	6020      	str	r0, [r4, #0]
 8005570:	f8c0 9000 	str.w	r9, [r0]
 8005574:	4604      	mov	r4, r0
 8005576:	e7e4      	b.n	8005542 <__pow5mult+0x6a>
 8005578:	4638      	mov	r0, r7
 800557a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800557e:	bf00      	nop
 8005580:	08006258 	.word	0x08006258
 8005584:	08006089 	.word	0x08006089
 8005588:	08006109 	.word	0x08006109

0800558c <__lshift>:
 800558c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005590:	460c      	mov	r4, r1
 8005592:	6849      	ldr	r1, [r1, #4]
 8005594:	6923      	ldr	r3, [r4, #16]
 8005596:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	4607      	mov	r7, r0
 800559e:	4691      	mov	r9, r2
 80055a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055a4:	f108 0601 	add.w	r6, r8, #1
 80055a8:	42b3      	cmp	r3, r6
 80055aa:	db0b      	blt.n	80055c4 <__lshift+0x38>
 80055ac:	4638      	mov	r0, r7
 80055ae:	f7ff fddd 	bl	800516c <_Balloc>
 80055b2:	4605      	mov	r5, r0
 80055b4:	b948      	cbnz	r0, 80055ca <__lshift+0x3e>
 80055b6:	4602      	mov	r2, r0
 80055b8:	4b28      	ldr	r3, [pc, #160]	; (800565c <__lshift+0xd0>)
 80055ba:	4829      	ldr	r0, [pc, #164]	; (8005660 <__lshift+0xd4>)
 80055bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80055c0:	f000 fa0e 	bl	80059e0 <__assert_func>
 80055c4:	3101      	adds	r1, #1
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	e7ee      	b.n	80055a8 <__lshift+0x1c>
 80055ca:	2300      	movs	r3, #0
 80055cc:	f100 0114 	add.w	r1, r0, #20
 80055d0:	f100 0210 	add.w	r2, r0, #16
 80055d4:	4618      	mov	r0, r3
 80055d6:	4553      	cmp	r3, sl
 80055d8:	db33      	blt.n	8005642 <__lshift+0xb6>
 80055da:	6920      	ldr	r0, [r4, #16]
 80055dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80055e0:	f104 0314 	add.w	r3, r4, #20
 80055e4:	f019 091f 	ands.w	r9, r9, #31
 80055e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80055ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80055f0:	d02b      	beq.n	800564a <__lshift+0xbe>
 80055f2:	f1c9 0e20 	rsb	lr, r9, #32
 80055f6:	468a      	mov	sl, r1
 80055f8:	2200      	movs	r2, #0
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	fa00 f009 	lsl.w	r0, r0, r9
 8005600:	4310      	orrs	r0, r2
 8005602:	f84a 0b04 	str.w	r0, [sl], #4
 8005606:	f853 2b04 	ldr.w	r2, [r3], #4
 800560a:	459c      	cmp	ip, r3
 800560c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005610:	d8f3      	bhi.n	80055fa <__lshift+0x6e>
 8005612:	ebac 0304 	sub.w	r3, ip, r4
 8005616:	3b15      	subs	r3, #21
 8005618:	f023 0303 	bic.w	r3, r3, #3
 800561c:	3304      	adds	r3, #4
 800561e:	f104 0015 	add.w	r0, r4, #21
 8005622:	4584      	cmp	ip, r0
 8005624:	bf38      	it	cc
 8005626:	2304      	movcc	r3, #4
 8005628:	50ca      	str	r2, [r1, r3]
 800562a:	b10a      	cbz	r2, 8005630 <__lshift+0xa4>
 800562c:	f108 0602 	add.w	r6, r8, #2
 8005630:	3e01      	subs	r6, #1
 8005632:	4638      	mov	r0, r7
 8005634:	612e      	str	r6, [r5, #16]
 8005636:	4621      	mov	r1, r4
 8005638:	f7ff fdd8 	bl	80051ec <_Bfree>
 800563c:	4628      	mov	r0, r5
 800563e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005642:	f842 0f04 	str.w	r0, [r2, #4]!
 8005646:	3301      	adds	r3, #1
 8005648:	e7c5      	b.n	80055d6 <__lshift+0x4a>
 800564a:	3904      	subs	r1, #4
 800564c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005650:	f841 2f04 	str.w	r2, [r1, #4]!
 8005654:	459c      	cmp	ip, r3
 8005656:	d8f9      	bhi.n	800564c <__lshift+0xc0>
 8005658:	e7ea      	b.n	8005630 <__lshift+0xa4>
 800565a:	bf00      	nop
 800565c:	080060f8 	.word	0x080060f8
 8005660:	08006109 	.word	0x08006109

08005664 <__mcmp>:
 8005664:	b530      	push	{r4, r5, lr}
 8005666:	6902      	ldr	r2, [r0, #16]
 8005668:	690c      	ldr	r4, [r1, #16]
 800566a:	1b12      	subs	r2, r2, r4
 800566c:	d10e      	bne.n	800568c <__mcmp+0x28>
 800566e:	f100 0314 	add.w	r3, r0, #20
 8005672:	3114      	adds	r1, #20
 8005674:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005678:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800567c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005680:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005684:	42a5      	cmp	r5, r4
 8005686:	d003      	beq.n	8005690 <__mcmp+0x2c>
 8005688:	d305      	bcc.n	8005696 <__mcmp+0x32>
 800568a:	2201      	movs	r2, #1
 800568c:	4610      	mov	r0, r2
 800568e:	bd30      	pop	{r4, r5, pc}
 8005690:	4283      	cmp	r3, r0
 8005692:	d3f3      	bcc.n	800567c <__mcmp+0x18>
 8005694:	e7fa      	b.n	800568c <__mcmp+0x28>
 8005696:	f04f 32ff 	mov.w	r2, #4294967295
 800569a:	e7f7      	b.n	800568c <__mcmp+0x28>

0800569c <__mdiff>:
 800569c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a0:	460c      	mov	r4, r1
 80056a2:	4606      	mov	r6, r0
 80056a4:	4611      	mov	r1, r2
 80056a6:	4620      	mov	r0, r4
 80056a8:	4690      	mov	r8, r2
 80056aa:	f7ff ffdb 	bl	8005664 <__mcmp>
 80056ae:	1e05      	subs	r5, r0, #0
 80056b0:	d110      	bne.n	80056d4 <__mdiff+0x38>
 80056b2:	4629      	mov	r1, r5
 80056b4:	4630      	mov	r0, r6
 80056b6:	f7ff fd59 	bl	800516c <_Balloc>
 80056ba:	b930      	cbnz	r0, 80056ca <__mdiff+0x2e>
 80056bc:	4b3a      	ldr	r3, [pc, #232]	; (80057a8 <__mdiff+0x10c>)
 80056be:	4602      	mov	r2, r0
 80056c0:	f240 2137 	movw	r1, #567	; 0x237
 80056c4:	4839      	ldr	r0, [pc, #228]	; (80057ac <__mdiff+0x110>)
 80056c6:	f000 f98b 	bl	80059e0 <__assert_func>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80056d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d4:	bfa4      	itt	ge
 80056d6:	4643      	movge	r3, r8
 80056d8:	46a0      	movge	r8, r4
 80056da:	4630      	mov	r0, r6
 80056dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80056e0:	bfa6      	itte	ge
 80056e2:	461c      	movge	r4, r3
 80056e4:	2500      	movge	r5, #0
 80056e6:	2501      	movlt	r5, #1
 80056e8:	f7ff fd40 	bl	800516c <_Balloc>
 80056ec:	b920      	cbnz	r0, 80056f8 <__mdiff+0x5c>
 80056ee:	4b2e      	ldr	r3, [pc, #184]	; (80057a8 <__mdiff+0x10c>)
 80056f0:	4602      	mov	r2, r0
 80056f2:	f240 2145 	movw	r1, #581	; 0x245
 80056f6:	e7e5      	b.n	80056c4 <__mdiff+0x28>
 80056f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80056fc:	6926      	ldr	r6, [r4, #16]
 80056fe:	60c5      	str	r5, [r0, #12]
 8005700:	f104 0914 	add.w	r9, r4, #20
 8005704:	f108 0514 	add.w	r5, r8, #20
 8005708:	f100 0e14 	add.w	lr, r0, #20
 800570c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005710:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005714:	f108 0210 	add.w	r2, r8, #16
 8005718:	46f2      	mov	sl, lr
 800571a:	2100      	movs	r1, #0
 800571c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005720:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005724:	fa11 f88b 	uxtah	r8, r1, fp
 8005728:	b299      	uxth	r1, r3
 800572a:	0c1b      	lsrs	r3, r3, #16
 800572c:	eba8 0801 	sub.w	r8, r8, r1
 8005730:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005734:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005738:	fa1f f888 	uxth.w	r8, r8
 800573c:	1419      	asrs	r1, r3, #16
 800573e:	454e      	cmp	r6, r9
 8005740:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005744:	f84a 3b04 	str.w	r3, [sl], #4
 8005748:	d8e8      	bhi.n	800571c <__mdiff+0x80>
 800574a:	1b33      	subs	r3, r6, r4
 800574c:	3b15      	subs	r3, #21
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	3304      	adds	r3, #4
 8005754:	3415      	adds	r4, #21
 8005756:	42a6      	cmp	r6, r4
 8005758:	bf38      	it	cc
 800575a:	2304      	movcc	r3, #4
 800575c:	441d      	add	r5, r3
 800575e:	4473      	add	r3, lr
 8005760:	469e      	mov	lr, r3
 8005762:	462e      	mov	r6, r5
 8005764:	4566      	cmp	r6, ip
 8005766:	d30e      	bcc.n	8005786 <__mdiff+0xea>
 8005768:	f10c 0203 	add.w	r2, ip, #3
 800576c:	1b52      	subs	r2, r2, r5
 800576e:	f022 0203 	bic.w	r2, r2, #3
 8005772:	3d03      	subs	r5, #3
 8005774:	45ac      	cmp	ip, r5
 8005776:	bf38      	it	cc
 8005778:	2200      	movcc	r2, #0
 800577a:	4413      	add	r3, r2
 800577c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005780:	b17a      	cbz	r2, 80057a2 <__mdiff+0x106>
 8005782:	6107      	str	r7, [r0, #16]
 8005784:	e7a4      	b.n	80056d0 <__mdiff+0x34>
 8005786:	f856 8b04 	ldr.w	r8, [r6], #4
 800578a:	fa11 f288 	uxtah	r2, r1, r8
 800578e:	1414      	asrs	r4, r2, #16
 8005790:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005794:	b292      	uxth	r2, r2
 8005796:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800579a:	f84e 2b04 	str.w	r2, [lr], #4
 800579e:	1421      	asrs	r1, r4, #16
 80057a0:	e7e0      	b.n	8005764 <__mdiff+0xc8>
 80057a2:	3f01      	subs	r7, #1
 80057a4:	e7ea      	b.n	800577c <__mdiff+0xe0>
 80057a6:	bf00      	nop
 80057a8:	080060f8 	.word	0x080060f8
 80057ac:	08006109 	.word	0x08006109

080057b0 <__d2b>:
 80057b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80057b4:	460f      	mov	r7, r1
 80057b6:	2101      	movs	r1, #1
 80057b8:	ec59 8b10 	vmov	r8, r9, d0
 80057bc:	4616      	mov	r6, r2
 80057be:	f7ff fcd5 	bl	800516c <_Balloc>
 80057c2:	4604      	mov	r4, r0
 80057c4:	b930      	cbnz	r0, 80057d4 <__d2b+0x24>
 80057c6:	4602      	mov	r2, r0
 80057c8:	4b24      	ldr	r3, [pc, #144]	; (800585c <__d2b+0xac>)
 80057ca:	4825      	ldr	r0, [pc, #148]	; (8005860 <__d2b+0xb0>)
 80057cc:	f240 310f 	movw	r1, #783	; 0x30f
 80057d0:	f000 f906 	bl	80059e0 <__assert_func>
 80057d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80057d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057dc:	bb2d      	cbnz	r5, 800582a <__d2b+0x7a>
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	f1b8 0300 	subs.w	r3, r8, #0
 80057e4:	d026      	beq.n	8005834 <__d2b+0x84>
 80057e6:	4668      	mov	r0, sp
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	f7ff fd87 	bl	80052fc <__lo0bits>
 80057ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80057f2:	b1e8      	cbz	r0, 8005830 <__d2b+0x80>
 80057f4:	f1c0 0320 	rsb	r3, r0, #32
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	430b      	orrs	r3, r1
 80057fe:	40c2      	lsrs	r2, r0
 8005800:	6163      	str	r3, [r4, #20]
 8005802:	9201      	str	r2, [sp, #4]
 8005804:	9b01      	ldr	r3, [sp, #4]
 8005806:	61a3      	str	r3, [r4, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	bf14      	ite	ne
 800580c:	2202      	movne	r2, #2
 800580e:	2201      	moveq	r2, #1
 8005810:	6122      	str	r2, [r4, #16]
 8005812:	b1bd      	cbz	r5, 8005844 <__d2b+0x94>
 8005814:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005818:	4405      	add	r5, r0
 800581a:	603d      	str	r5, [r7, #0]
 800581c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005820:	6030      	str	r0, [r6, #0]
 8005822:	4620      	mov	r0, r4
 8005824:	b003      	add	sp, #12
 8005826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800582a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800582e:	e7d6      	b.n	80057de <__d2b+0x2e>
 8005830:	6161      	str	r1, [r4, #20]
 8005832:	e7e7      	b.n	8005804 <__d2b+0x54>
 8005834:	a801      	add	r0, sp, #4
 8005836:	f7ff fd61 	bl	80052fc <__lo0bits>
 800583a:	9b01      	ldr	r3, [sp, #4]
 800583c:	6163      	str	r3, [r4, #20]
 800583e:	3020      	adds	r0, #32
 8005840:	2201      	movs	r2, #1
 8005842:	e7e5      	b.n	8005810 <__d2b+0x60>
 8005844:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005848:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800584c:	6038      	str	r0, [r7, #0]
 800584e:	6918      	ldr	r0, [r3, #16]
 8005850:	f7ff fd34 	bl	80052bc <__hi0bits>
 8005854:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005858:	e7e2      	b.n	8005820 <__d2b+0x70>
 800585a:	bf00      	nop
 800585c:	080060f8 	.word	0x080060f8
 8005860:	08006109 	.word	0x08006109

08005864 <__sflush_r>:
 8005864:	898a      	ldrh	r2, [r1, #12]
 8005866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800586a:	4605      	mov	r5, r0
 800586c:	0710      	lsls	r0, r2, #28
 800586e:	460c      	mov	r4, r1
 8005870:	d458      	bmi.n	8005924 <__sflush_r+0xc0>
 8005872:	684b      	ldr	r3, [r1, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	dc05      	bgt.n	8005884 <__sflush_r+0x20>
 8005878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	dc02      	bgt.n	8005884 <__sflush_r+0x20>
 800587e:	2000      	movs	r0, #0
 8005880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005886:	2e00      	cmp	r6, #0
 8005888:	d0f9      	beq.n	800587e <__sflush_r+0x1a>
 800588a:	2300      	movs	r3, #0
 800588c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005890:	682f      	ldr	r7, [r5, #0]
 8005892:	6a21      	ldr	r1, [r4, #32]
 8005894:	602b      	str	r3, [r5, #0]
 8005896:	d032      	beq.n	80058fe <__sflush_r+0x9a>
 8005898:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	075a      	lsls	r2, r3, #29
 800589e:	d505      	bpl.n	80058ac <__sflush_r+0x48>
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	1ac0      	subs	r0, r0, r3
 80058a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058a6:	b10b      	cbz	r3, 80058ac <__sflush_r+0x48>
 80058a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058aa:	1ac0      	subs	r0, r0, r3
 80058ac:	2300      	movs	r3, #0
 80058ae:	4602      	mov	r2, r0
 80058b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058b2:	6a21      	ldr	r1, [r4, #32]
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b0      	blx	r6
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	d106      	bne.n	80058cc <__sflush_r+0x68>
 80058be:	6829      	ldr	r1, [r5, #0]
 80058c0:	291d      	cmp	r1, #29
 80058c2:	d82b      	bhi.n	800591c <__sflush_r+0xb8>
 80058c4:	4a29      	ldr	r2, [pc, #164]	; (800596c <__sflush_r+0x108>)
 80058c6:	410a      	asrs	r2, r1
 80058c8:	07d6      	lsls	r6, r2, #31
 80058ca:	d427      	bmi.n	800591c <__sflush_r+0xb8>
 80058cc:	2200      	movs	r2, #0
 80058ce:	6062      	str	r2, [r4, #4]
 80058d0:	04d9      	lsls	r1, r3, #19
 80058d2:	6922      	ldr	r2, [r4, #16]
 80058d4:	6022      	str	r2, [r4, #0]
 80058d6:	d504      	bpl.n	80058e2 <__sflush_r+0x7e>
 80058d8:	1c42      	adds	r2, r0, #1
 80058da:	d101      	bne.n	80058e0 <__sflush_r+0x7c>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b903      	cbnz	r3, 80058e2 <__sflush_r+0x7e>
 80058e0:	6560      	str	r0, [r4, #84]	; 0x54
 80058e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058e4:	602f      	str	r7, [r5, #0]
 80058e6:	2900      	cmp	r1, #0
 80058e8:	d0c9      	beq.n	800587e <__sflush_r+0x1a>
 80058ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058ee:	4299      	cmp	r1, r3
 80058f0:	d002      	beq.n	80058f8 <__sflush_r+0x94>
 80058f2:	4628      	mov	r0, r5
 80058f4:	f7ff fb3a 	bl	8004f6c <_free_r>
 80058f8:	2000      	movs	r0, #0
 80058fa:	6360      	str	r0, [r4, #52]	; 0x34
 80058fc:	e7c0      	b.n	8005880 <__sflush_r+0x1c>
 80058fe:	2301      	movs	r3, #1
 8005900:	4628      	mov	r0, r5
 8005902:	47b0      	blx	r6
 8005904:	1c41      	adds	r1, r0, #1
 8005906:	d1c8      	bne.n	800589a <__sflush_r+0x36>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0c5      	beq.n	800589a <__sflush_r+0x36>
 800590e:	2b1d      	cmp	r3, #29
 8005910:	d001      	beq.n	8005916 <__sflush_r+0xb2>
 8005912:	2b16      	cmp	r3, #22
 8005914:	d101      	bne.n	800591a <__sflush_r+0xb6>
 8005916:	602f      	str	r7, [r5, #0]
 8005918:	e7b1      	b.n	800587e <__sflush_r+0x1a>
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005920:	81a3      	strh	r3, [r4, #12]
 8005922:	e7ad      	b.n	8005880 <__sflush_r+0x1c>
 8005924:	690f      	ldr	r7, [r1, #16]
 8005926:	2f00      	cmp	r7, #0
 8005928:	d0a9      	beq.n	800587e <__sflush_r+0x1a>
 800592a:	0793      	lsls	r3, r2, #30
 800592c:	680e      	ldr	r6, [r1, #0]
 800592e:	bf08      	it	eq
 8005930:	694b      	ldreq	r3, [r1, #20]
 8005932:	600f      	str	r7, [r1, #0]
 8005934:	bf18      	it	ne
 8005936:	2300      	movne	r3, #0
 8005938:	eba6 0807 	sub.w	r8, r6, r7
 800593c:	608b      	str	r3, [r1, #8]
 800593e:	f1b8 0f00 	cmp.w	r8, #0
 8005942:	dd9c      	ble.n	800587e <__sflush_r+0x1a>
 8005944:	6a21      	ldr	r1, [r4, #32]
 8005946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005948:	4643      	mov	r3, r8
 800594a:	463a      	mov	r2, r7
 800594c:	4628      	mov	r0, r5
 800594e:	47b0      	blx	r6
 8005950:	2800      	cmp	r0, #0
 8005952:	dc06      	bgt.n	8005962 <__sflush_r+0xfe>
 8005954:	89a3      	ldrh	r3, [r4, #12]
 8005956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800595a:	81a3      	strh	r3, [r4, #12]
 800595c:	f04f 30ff 	mov.w	r0, #4294967295
 8005960:	e78e      	b.n	8005880 <__sflush_r+0x1c>
 8005962:	4407      	add	r7, r0
 8005964:	eba8 0800 	sub.w	r8, r8, r0
 8005968:	e7e9      	b.n	800593e <__sflush_r+0xda>
 800596a:	bf00      	nop
 800596c:	dfbffffe 	.word	0xdfbffffe

08005970 <_fflush_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	690b      	ldr	r3, [r1, #16]
 8005974:	4605      	mov	r5, r0
 8005976:	460c      	mov	r4, r1
 8005978:	b913      	cbnz	r3, 8005980 <_fflush_r+0x10>
 800597a:	2500      	movs	r5, #0
 800597c:	4628      	mov	r0, r5
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	b118      	cbz	r0, 800598a <_fflush_r+0x1a>
 8005982:	6a03      	ldr	r3, [r0, #32]
 8005984:	b90b      	cbnz	r3, 800598a <_fflush_r+0x1a>
 8005986:	f7fe fb6d 	bl	8004064 <__sinit>
 800598a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0f3      	beq.n	800597a <_fflush_r+0xa>
 8005992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005994:	07d0      	lsls	r0, r2, #31
 8005996:	d404      	bmi.n	80059a2 <_fflush_r+0x32>
 8005998:	0599      	lsls	r1, r3, #22
 800599a:	d402      	bmi.n	80059a2 <_fflush_r+0x32>
 800599c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800599e:	f7fe fc58 	bl	8004252 <__retarget_lock_acquire_recursive>
 80059a2:	4628      	mov	r0, r5
 80059a4:	4621      	mov	r1, r4
 80059a6:	f7ff ff5d 	bl	8005864 <__sflush_r>
 80059aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059ac:	07da      	lsls	r2, r3, #31
 80059ae:	4605      	mov	r5, r0
 80059b0:	d4e4      	bmi.n	800597c <_fflush_r+0xc>
 80059b2:	89a3      	ldrh	r3, [r4, #12]
 80059b4:	059b      	lsls	r3, r3, #22
 80059b6:	d4e1      	bmi.n	800597c <_fflush_r+0xc>
 80059b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ba:	f7fe fc4b 	bl	8004254 <__retarget_lock_release_recursive>
 80059be:	e7dd      	b.n	800597c <_fflush_r+0xc>

080059c0 <_sbrk_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4d06      	ldr	r5, [pc, #24]	; (80059dc <_sbrk_r+0x1c>)
 80059c4:	2300      	movs	r3, #0
 80059c6:	4604      	mov	r4, r0
 80059c8:	4608      	mov	r0, r1
 80059ca:	602b      	str	r3, [r5, #0]
 80059cc:	f7fb fe74 	bl	80016b8 <_sbrk>
 80059d0:	1c43      	adds	r3, r0, #1
 80059d2:	d102      	bne.n	80059da <_sbrk_r+0x1a>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	b103      	cbz	r3, 80059da <_sbrk_r+0x1a>
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	bd38      	pop	{r3, r4, r5, pc}
 80059dc:	20000424 	.word	0x20000424

080059e0 <__assert_func>:
 80059e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059e2:	4614      	mov	r4, r2
 80059e4:	461a      	mov	r2, r3
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <__assert_func+0x2c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4605      	mov	r5, r0
 80059ec:	68d8      	ldr	r0, [r3, #12]
 80059ee:	b14c      	cbz	r4, 8005a04 <__assert_func+0x24>
 80059f0:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <__assert_func+0x30>)
 80059f2:	9100      	str	r1, [sp, #0]
 80059f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059f8:	4906      	ldr	r1, [pc, #24]	; (8005a14 <__assert_func+0x34>)
 80059fa:	462b      	mov	r3, r5
 80059fc:	f000 f844 	bl	8005a88 <fiprintf>
 8005a00:	f000 f854 	bl	8005aac <abort>
 8005a04:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <__assert_func+0x38>)
 8005a06:	461c      	mov	r4, r3
 8005a08:	e7f3      	b.n	80059f2 <__assert_func+0x12>
 8005a0a:	bf00      	nop
 8005a0c:	20000064 	.word	0x20000064
 8005a10:	0800626e 	.word	0x0800626e
 8005a14:	0800627b 	.word	0x0800627b
 8005a18:	080062a9 	.word	0x080062a9

08005a1c <_calloc_r>:
 8005a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a1e:	fba1 2402 	umull	r2, r4, r1, r2
 8005a22:	b94c      	cbnz	r4, 8005a38 <_calloc_r+0x1c>
 8005a24:	4611      	mov	r1, r2
 8005a26:	9201      	str	r2, [sp, #4]
 8005a28:	f7ff fb14 	bl	8005054 <_malloc_r>
 8005a2c:	9a01      	ldr	r2, [sp, #4]
 8005a2e:	4605      	mov	r5, r0
 8005a30:	b930      	cbnz	r0, 8005a40 <_calloc_r+0x24>
 8005a32:	4628      	mov	r0, r5
 8005a34:	b003      	add	sp, #12
 8005a36:	bd30      	pop	{r4, r5, pc}
 8005a38:	220c      	movs	r2, #12
 8005a3a:	6002      	str	r2, [r0, #0]
 8005a3c:	2500      	movs	r5, #0
 8005a3e:	e7f8      	b.n	8005a32 <_calloc_r+0x16>
 8005a40:	4621      	mov	r1, r4
 8005a42:	f7fe fb88 	bl	8004156 <memset>
 8005a46:	e7f4      	b.n	8005a32 <_calloc_r+0x16>

08005a48 <__ascii_mbtowc>:
 8005a48:	b082      	sub	sp, #8
 8005a4a:	b901      	cbnz	r1, 8005a4e <__ascii_mbtowc+0x6>
 8005a4c:	a901      	add	r1, sp, #4
 8005a4e:	b142      	cbz	r2, 8005a62 <__ascii_mbtowc+0x1a>
 8005a50:	b14b      	cbz	r3, 8005a66 <__ascii_mbtowc+0x1e>
 8005a52:	7813      	ldrb	r3, [r2, #0]
 8005a54:	600b      	str	r3, [r1, #0]
 8005a56:	7812      	ldrb	r2, [r2, #0]
 8005a58:	1e10      	subs	r0, r2, #0
 8005a5a:	bf18      	it	ne
 8005a5c:	2001      	movne	r0, #1
 8005a5e:	b002      	add	sp, #8
 8005a60:	4770      	bx	lr
 8005a62:	4610      	mov	r0, r2
 8005a64:	e7fb      	b.n	8005a5e <__ascii_mbtowc+0x16>
 8005a66:	f06f 0001 	mvn.w	r0, #1
 8005a6a:	e7f8      	b.n	8005a5e <__ascii_mbtowc+0x16>

08005a6c <__ascii_wctomb>:
 8005a6c:	b149      	cbz	r1, 8005a82 <__ascii_wctomb+0x16>
 8005a6e:	2aff      	cmp	r2, #255	; 0xff
 8005a70:	bf85      	ittet	hi
 8005a72:	238a      	movhi	r3, #138	; 0x8a
 8005a74:	6003      	strhi	r3, [r0, #0]
 8005a76:	700a      	strbls	r2, [r1, #0]
 8005a78:	f04f 30ff 	movhi.w	r0, #4294967295
 8005a7c:	bf98      	it	ls
 8005a7e:	2001      	movls	r0, #1
 8005a80:	4770      	bx	lr
 8005a82:	4608      	mov	r0, r1
 8005a84:	4770      	bx	lr
	...

08005a88 <fiprintf>:
 8005a88:	b40e      	push	{r1, r2, r3}
 8005a8a:	b503      	push	{r0, r1, lr}
 8005a8c:	4601      	mov	r1, r0
 8005a8e:	ab03      	add	r3, sp, #12
 8005a90:	4805      	ldr	r0, [pc, #20]	; (8005aa8 <fiprintf+0x20>)
 8005a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a96:	6800      	ldr	r0, [r0, #0]
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	f000 f837 	bl	8005b0c <_vfiprintf_r>
 8005a9e:	b002      	add	sp, #8
 8005aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aa4:	b003      	add	sp, #12
 8005aa6:	4770      	bx	lr
 8005aa8:	20000064 	.word	0x20000064

08005aac <abort>:
 8005aac:	b508      	push	{r3, lr}
 8005aae:	2006      	movs	r0, #6
 8005ab0:	f000 fa04 	bl	8005ebc <raise>
 8005ab4:	2001      	movs	r0, #1
 8005ab6:	f7fb fd87 	bl	80015c8 <_exit>

08005aba <__sfputc_r>:
 8005aba:	6893      	ldr	r3, [r2, #8]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	b410      	push	{r4}
 8005ac2:	6093      	str	r3, [r2, #8]
 8005ac4:	da08      	bge.n	8005ad8 <__sfputc_r+0x1e>
 8005ac6:	6994      	ldr	r4, [r2, #24]
 8005ac8:	42a3      	cmp	r3, r4
 8005aca:	db01      	blt.n	8005ad0 <__sfputc_r+0x16>
 8005acc:	290a      	cmp	r1, #10
 8005ace:	d103      	bne.n	8005ad8 <__sfputc_r+0x1e>
 8005ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ad4:	f000 b934 	b.w	8005d40 <__swbuf_r>
 8005ad8:	6813      	ldr	r3, [r2, #0]
 8005ada:	1c58      	adds	r0, r3, #1
 8005adc:	6010      	str	r0, [r2, #0]
 8005ade:	7019      	strb	r1, [r3, #0]
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <__sfputs_r>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	4606      	mov	r6, r0
 8005aec:	460f      	mov	r7, r1
 8005aee:	4614      	mov	r4, r2
 8005af0:	18d5      	adds	r5, r2, r3
 8005af2:	42ac      	cmp	r4, r5
 8005af4:	d101      	bne.n	8005afa <__sfputs_r+0x12>
 8005af6:	2000      	movs	r0, #0
 8005af8:	e007      	b.n	8005b0a <__sfputs_r+0x22>
 8005afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005afe:	463a      	mov	r2, r7
 8005b00:	4630      	mov	r0, r6
 8005b02:	f7ff ffda 	bl	8005aba <__sfputc_r>
 8005b06:	1c43      	adds	r3, r0, #1
 8005b08:	d1f3      	bne.n	8005af2 <__sfputs_r+0xa>
 8005b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b0c <_vfiprintf_r>:
 8005b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	460d      	mov	r5, r1
 8005b12:	b09d      	sub	sp, #116	; 0x74
 8005b14:	4614      	mov	r4, r2
 8005b16:	4698      	mov	r8, r3
 8005b18:	4606      	mov	r6, r0
 8005b1a:	b118      	cbz	r0, 8005b24 <_vfiprintf_r+0x18>
 8005b1c:	6a03      	ldr	r3, [r0, #32]
 8005b1e:	b90b      	cbnz	r3, 8005b24 <_vfiprintf_r+0x18>
 8005b20:	f7fe faa0 	bl	8004064 <__sinit>
 8005b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b26:	07d9      	lsls	r1, r3, #31
 8005b28:	d405      	bmi.n	8005b36 <_vfiprintf_r+0x2a>
 8005b2a:	89ab      	ldrh	r3, [r5, #12]
 8005b2c:	059a      	lsls	r2, r3, #22
 8005b2e:	d402      	bmi.n	8005b36 <_vfiprintf_r+0x2a>
 8005b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b32:	f7fe fb8e 	bl	8004252 <__retarget_lock_acquire_recursive>
 8005b36:	89ab      	ldrh	r3, [r5, #12]
 8005b38:	071b      	lsls	r3, r3, #28
 8005b3a:	d501      	bpl.n	8005b40 <_vfiprintf_r+0x34>
 8005b3c:	692b      	ldr	r3, [r5, #16]
 8005b3e:	b99b      	cbnz	r3, 8005b68 <_vfiprintf_r+0x5c>
 8005b40:	4629      	mov	r1, r5
 8005b42:	4630      	mov	r0, r6
 8005b44:	f000 f93a 	bl	8005dbc <__swsetup_r>
 8005b48:	b170      	cbz	r0, 8005b68 <_vfiprintf_r+0x5c>
 8005b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b4c:	07dc      	lsls	r4, r3, #31
 8005b4e:	d504      	bpl.n	8005b5a <_vfiprintf_r+0x4e>
 8005b50:	f04f 30ff 	mov.w	r0, #4294967295
 8005b54:	b01d      	add	sp, #116	; 0x74
 8005b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5a:	89ab      	ldrh	r3, [r5, #12]
 8005b5c:	0598      	lsls	r0, r3, #22
 8005b5e:	d4f7      	bmi.n	8005b50 <_vfiprintf_r+0x44>
 8005b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b62:	f7fe fb77 	bl	8004254 <__retarget_lock_release_recursive>
 8005b66:	e7f3      	b.n	8005b50 <_vfiprintf_r+0x44>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b6c:	2320      	movs	r3, #32
 8005b6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b76:	2330      	movs	r3, #48	; 0x30
 8005b78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005d2c <_vfiprintf_r+0x220>
 8005b7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b80:	f04f 0901 	mov.w	r9, #1
 8005b84:	4623      	mov	r3, r4
 8005b86:	469a      	mov	sl, r3
 8005b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b8c:	b10a      	cbz	r2, 8005b92 <_vfiprintf_r+0x86>
 8005b8e:	2a25      	cmp	r2, #37	; 0x25
 8005b90:	d1f9      	bne.n	8005b86 <_vfiprintf_r+0x7a>
 8005b92:	ebba 0b04 	subs.w	fp, sl, r4
 8005b96:	d00b      	beq.n	8005bb0 <_vfiprintf_r+0xa4>
 8005b98:	465b      	mov	r3, fp
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f7ff ffa2 	bl	8005ae8 <__sfputs_r>
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	f000 80a9 	beq.w	8005cfc <_vfiprintf_r+0x1f0>
 8005baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bac:	445a      	add	r2, fp
 8005bae:	9209      	str	r2, [sp, #36]	; 0x24
 8005bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 80a1 	beq.w	8005cfc <_vfiprintf_r+0x1f0>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bc4:	f10a 0a01 	add.w	sl, sl, #1
 8005bc8:	9304      	str	r3, [sp, #16]
 8005bca:	9307      	str	r3, [sp, #28]
 8005bcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bd0:	931a      	str	r3, [sp, #104]	; 0x68
 8005bd2:	4654      	mov	r4, sl
 8005bd4:	2205      	movs	r2, #5
 8005bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bda:	4854      	ldr	r0, [pc, #336]	; (8005d2c <_vfiprintf_r+0x220>)
 8005bdc:	f7fa fb18 	bl	8000210 <memchr>
 8005be0:	9a04      	ldr	r2, [sp, #16]
 8005be2:	b9d8      	cbnz	r0, 8005c1c <_vfiprintf_r+0x110>
 8005be4:	06d1      	lsls	r1, r2, #27
 8005be6:	bf44      	itt	mi
 8005be8:	2320      	movmi	r3, #32
 8005bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bee:	0713      	lsls	r3, r2, #28
 8005bf0:	bf44      	itt	mi
 8005bf2:	232b      	movmi	r3, #43	; 0x2b
 8005bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8005bfe:	d015      	beq.n	8005c2c <_vfiprintf_r+0x120>
 8005c00:	9a07      	ldr	r2, [sp, #28]
 8005c02:	4654      	mov	r4, sl
 8005c04:	2000      	movs	r0, #0
 8005c06:	f04f 0c0a 	mov.w	ip, #10
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c10:	3b30      	subs	r3, #48	; 0x30
 8005c12:	2b09      	cmp	r3, #9
 8005c14:	d94d      	bls.n	8005cb2 <_vfiprintf_r+0x1a6>
 8005c16:	b1b0      	cbz	r0, 8005c46 <_vfiprintf_r+0x13a>
 8005c18:	9207      	str	r2, [sp, #28]
 8005c1a:	e014      	b.n	8005c46 <_vfiprintf_r+0x13a>
 8005c1c:	eba0 0308 	sub.w	r3, r0, r8
 8005c20:	fa09 f303 	lsl.w	r3, r9, r3
 8005c24:	4313      	orrs	r3, r2
 8005c26:	9304      	str	r3, [sp, #16]
 8005c28:	46a2      	mov	sl, r4
 8005c2a:	e7d2      	b.n	8005bd2 <_vfiprintf_r+0xc6>
 8005c2c:	9b03      	ldr	r3, [sp, #12]
 8005c2e:	1d19      	adds	r1, r3, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	9103      	str	r1, [sp, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bfbb      	ittet	lt
 8005c38:	425b      	neglt	r3, r3
 8005c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c3e:	9307      	strge	r3, [sp, #28]
 8005c40:	9307      	strlt	r3, [sp, #28]
 8005c42:	bfb8      	it	lt
 8005c44:	9204      	strlt	r2, [sp, #16]
 8005c46:	7823      	ldrb	r3, [r4, #0]
 8005c48:	2b2e      	cmp	r3, #46	; 0x2e
 8005c4a:	d10c      	bne.n	8005c66 <_vfiprintf_r+0x15a>
 8005c4c:	7863      	ldrb	r3, [r4, #1]
 8005c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c50:	d134      	bne.n	8005cbc <_vfiprintf_r+0x1b0>
 8005c52:	9b03      	ldr	r3, [sp, #12]
 8005c54:	1d1a      	adds	r2, r3, #4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	9203      	str	r2, [sp, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	bfb8      	it	lt
 8005c5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c62:	3402      	adds	r4, #2
 8005c64:	9305      	str	r3, [sp, #20]
 8005c66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005d3c <_vfiprintf_r+0x230>
 8005c6a:	7821      	ldrb	r1, [r4, #0]
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	4650      	mov	r0, sl
 8005c70:	f7fa face 	bl	8000210 <memchr>
 8005c74:	b138      	cbz	r0, 8005c86 <_vfiprintf_r+0x17a>
 8005c76:	9b04      	ldr	r3, [sp, #16]
 8005c78:	eba0 000a 	sub.w	r0, r0, sl
 8005c7c:	2240      	movs	r2, #64	; 0x40
 8005c7e:	4082      	lsls	r2, r0
 8005c80:	4313      	orrs	r3, r2
 8005c82:	3401      	adds	r4, #1
 8005c84:	9304      	str	r3, [sp, #16]
 8005c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c8a:	4829      	ldr	r0, [pc, #164]	; (8005d30 <_vfiprintf_r+0x224>)
 8005c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c90:	2206      	movs	r2, #6
 8005c92:	f7fa fabd 	bl	8000210 <memchr>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d03f      	beq.n	8005d1a <_vfiprintf_r+0x20e>
 8005c9a:	4b26      	ldr	r3, [pc, #152]	; (8005d34 <_vfiprintf_r+0x228>)
 8005c9c:	bb1b      	cbnz	r3, 8005ce6 <_vfiprintf_r+0x1da>
 8005c9e:	9b03      	ldr	r3, [sp, #12]
 8005ca0:	3307      	adds	r3, #7
 8005ca2:	f023 0307 	bic.w	r3, r3, #7
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	9303      	str	r3, [sp, #12]
 8005caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cac:	443b      	add	r3, r7
 8005cae:	9309      	str	r3, [sp, #36]	; 0x24
 8005cb0:	e768      	b.n	8005b84 <_vfiprintf_r+0x78>
 8005cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	2001      	movs	r0, #1
 8005cba:	e7a6      	b.n	8005c0a <_vfiprintf_r+0xfe>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	3401      	adds	r4, #1
 8005cc0:	9305      	str	r3, [sp, #20]
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	f04f 0c0a 	mov.w	ip, #10
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cce:	3a30      	subs	r2, #48	; 0x30
 8005cd0:	2a09      	cmp	r2, #9
 8005cd2:	d903      	bls.n	8005cdc <_vfiprintf_r+0x1d0>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0c6      	beq.n	8005c66 <_vfiprintf_r+0x15a>
 8005cd8:	9105      	str	r1, [sp, #20]
 8005cda:	e7c4      	b.n	8005c66 <_vfiprintf_r+0x15a>
 8005cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e7f0      	b.n	8005cc8 <_vfiprintf_r+0x1bc>
 8005ce6:	ab03      	add	r3, sp, #12
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	462a      	mov	r2, r5
 8005cec:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <_vfiprintf_r+0x22c>)
 8005cee:	a904      	add	r1, sp, #16
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	f7fd fd65 	bl	80037c0 <_printf_float>
 8005cf6:	4607      	mov	r7, r0
 8005cf8:	1c78      	adds	r0, r7, #1
 8005cfa:	d1d6      	bne.n	8005caa <_vfiprintf_r+0x19e>
 8005cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cfe:	07d9      	lsls	r1, r3, #31
 8005d00:	d405      	bmi.n	8005d0e <_vfiprintf_r+0x202>
 8005d02:	89ab      	ldrh	r3, [r5, #12]
 8005d04:	059a      	lsls	r2, r3, #22
 8005d06:	d402      	bmi.n	8005d0e <_vfiprintf_r+0x202>
 8005d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d0a:	f7fe faa3 	bl	8004254 <__retarget_lock_release_recursive>
 8005d0e:	89ab      	ldrh	r3, [r5, #12]
 8005d10:	065b      	lsls	r3, r3, #25
 8005d12:	f53f af1d 	bmi.w	8005b50 <_vfiprintf_r+0x44>
 8005d16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d18:	e71c      	b.n	8005b54 <_vfiprintf_r+0x48>
 8005d1a:	ab03      	add	r3, sp, #12
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	462a      	mov	r2, r5
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <_vfiprintf_r+0x22c>)
 8005d22:	a904      	add	r1, sp, #16
 8005d24:	4630      	mov	r0, r6
 8005d26:	f7fd ffef 	bl	8003d08 <_printf_i>
 8005d2a:	e7e4      	b.n	8005cf6 <_vfiprintf_r+0x1ea>
 8005d2c:	080063ab 	.word	0x080063ab
 8005d30:	080063b5 	.word	0x080063b5
 8005d34:	080037c1 	.word	0x080037c1
 8005d38:	08005ae9 	.word	0x08005ae9
 8005d3c:	080063b1 	.word	0x080063b1

08005d40 <__swbuf_r>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	460e      	mov	r6, r1
 8005d44:	4614      	mov	r4, r2
 8005d46:	4605      	mov	r5, r0
 8005d48:	b118      	cbz	r0, 8005d52 <__swbuf_r+0x12>
 8005d4a:	6a03      	ldr	r3, [r0, #32]
 8005d4c:	b90b      	cbnz	r3, 8005d52 <__swbuf_r+0x12>
 8005d4e:	f7fe f989 	bl	8004064 <__sinit>
 8005d52:	69a3      	ldr	r3, [r4, #24]
 8005d54:	60a3      	str	r3, [r4, #8]
 8005d56:	89a3      	ldrh	r3, [r4, #12]
 8005d58:	071a      	lsls	r2, r3, #28
 8005d5a:	d525      	bpl.n	8005da8 <__swbuf_r+0x68>
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	b31b      	cbz	r3, 8005da8 <__swbuf_r+0x68>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	6922      	ldr	r2, [r4, #16]
 8005d64:	1a98      	subs	r0, r3, r2
 8005d66:	6963      	ldr	r3, [r4, #20]
 8005d68:	b2f6      	uxtb	r6, r6
 8005d6a:	4283      	cmp	r3, r0
 8005d6c:	4637      	mov	r7, r6
 8005d6e:	dc04      	bgt.n	8005d7a <__swbuf_r+0x3a>
 8005d70:	4621      	mov	r1, r4
 8005d72:	4628      	mov	r0, r5
 8005d74:	f7ff fdfc 	bl	8005970 <_fflush_r>
 8005d78:	b9e0      	cbnz	r0, 8005db4 <__swbuf_r+0x74>
 8005d7a:	68a3      	ldr	r3, [r4, #8]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	60a3      	str	r3, [r4, #8]
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	6022      	str	r2, [r4, #0]
 8005d86:	701e      	strb	r6, [r3, #0]
 8005d88:	6962      	ldr	r2, [r4, #20]
 8005d8a:	1c43      	adds	r3, r0, #1
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d004      	beq.n	8005d9a <__swbuf_r+0x5a>
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	07db      	lsls	r3, r3, #31
 8005d94:	d506      	bpl.n	8005da4 <__swbuf_r+0x64>
 8005d96:	2e0a      	cmp	r6, #10
 8005d98:	d104      	bne.n	8005da4 <__swbuf_r+0x64>
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	f7ff fde7 	bl	8005970 <_fflush_r>
 8005da2:	b938      	cbnz	r0, 8005db4 <__swbuf_r+0x74>
 8005da4:	4638      	mov	r0, r7
 8005da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005da8:	4621      	mov	r1, r4
 8005daa:	4628      	mov	r0, r5
 8005dac:	f000 f806 	bl	8005dbc <__swsetup_r>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d0d5      	beq.n	8005d60 <__swbuf_r+0x20>
 8005db4:	f04f 37ff 	mov.w	r7, #4294967295
 8005db8:	e7f4      	b.n	8005da4 <__swbuf_r+0x64>
	...

08005dbc <__swsetup_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4b2a      	ldr	r3, [pc, #168]	; (8005e68 <__swsetup_r+0xac>)
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	b118      	cbz	r0, 8005dd0 <__swsetup_r+0x14>
 8005dc8:	6a03      	ldr	r3, [r0, #32]
 8005dca:	b90b      	cbnz	r3, 8005dd0 <__swsetup_r+0x14>
 8005dcc:	f7fe f94a 	bl	8004064 <__sinit>
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dd6:	0718      	lsls	r0, r3, #28
 8005dd8:	d422      	bmi.n	8005e20 <__swsetup_r+0x64>
 8005dda:	06d9      	lsls	r1, r3, #27
 8005ddc:	d407      	bmi.n	8005dee <__swsetup_r+0x32>
 8005dde:	2309      	movs	r3, #9
 8005de0:	602b      	str	r3, [r5, #0]
 8005de2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005de6:	81a3      	strh	r3, [r4, #12]
 8005de8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dec:	e034      	b.n	8005e58 <__swsetup_r+0x9c>
 8005dee:	0758      	lsls	r0, r3, #29
 8005df0:	d512      	bpl.n	8005e18 <__swsetup_r+0x5c>
 8005df2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005df4:	b141      	cbz	r1, 8005e08 <__swsetup_r+0x4c>
 8005df6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dfa:	4299      	cmp	r1, r3
 8005dfc:	d002      	beq.n	8005e04 <__swsetup_r+0x48>
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f7ff f8b4 	bl	8004f6c <_free_r>
 8005e04:	2300      	movs	r3, #0
 8005e06:	6363      	str	r3, [r4, #52]	; 0x34
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e0e:	81a3      	strh	r3, [r4, #12]
 8005e10:	2300      	movs	r3, #0
 8005e12:	6063      	str	r3, [r4, #4]
 8005e14:	6923      	ldr	r3, [r4, #16]
 8005e16:	6023      	str	r3, [r4, #0]
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	f043 0308 	orr.w	r3, r3, #8
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	6923      	ldr	r3, [r4, #16]
 8005e22:	b94b      	cbnz	r3, 8005e38 <__swsetup_r+0x7c>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e2e:	d003      	beq.n	8005e38 <__swsetup_r+0x7c>
 8005e30:	4621      	mov	r1, r4
 8005e32:	4628      	mov	r0, r5
 8005e34:	f000 f884 	bl	8005f40 <__smakebuf_r>
 8005e38:	89a0      	ldrh	r0, [r4, #12]
 8005e3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e3e:	f010 0301 	ands.w	r3, r0, #1
 8005e42:	d00a      	beq.n	8005e5a <__swsetup_r+0x9e>
 8005e44:	2300      	movs	r3, #0
 8005e46:	60a3      	str	r3, [r4, #8]
 8005e48:	6963      	ldr	r3, [r4, #20]
 8005e4a:	425b      	negs	r3, r3
 8005e4c:	61a3      	str	r3, [r4, #24]
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	b943      	cbnz	r3, 8005e64 <__swsetup_r+0xa8>
 8005e52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e56:	d1c4      	bne.n	8005de2 <__swsetup_r+0x26>
 8005e58:	bd38      	pop	{r3, r4, r5, pc}
 8005e5a:	0781      	lsls	r1, r0, #30
 8005e5c:	bf58      	it	pl
 8005e5e:	6963      	ldrpl	r3, [r4, #20]
 8005e60:	60a3      	str	r3, [r4, #8]
 8005e62:	e7f4      	b.n	8005e4e <__swsetup_r+0x92>
 8005e64:	2000      	movs	r0, #0
 8005e66:	e7f7      	b.n	8005e58 <__swsetup_r+0x9c>
 8005e68:	20000064 	.word	0x20000064

08005e6c <_raise_r>:
 8005e6c:	291f      	cmp	r1, #31
 8005e6e:	b538      	push	{r3, r4, r5, lr}
 8005e70:	4604      	mov	r4, r0
 8005e72:	460d      	mov	r5, r1
 8005e74:	d904      	bls.n	8005e80 <_raise_r+0x14>
 8005e76:	2316      	movs	r3, #22
 8005e78:	6003      	str	r3, [r0, #0]
 8005e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005e82:	b112      	cbz	r2, 8005e8a <_raise_r+0x1e>
 8005e84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e88:	b94b      	cbnz	r3, 8005e9e <_raise_r+0x32>
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 f830 	bl	8005ef0 <_getpid_r>
 8005e90:	462a      	mov	r2, r5
 8005e92:	4601      	mov	r1, r0
 8005e94:	4620      	mov	r0, r4
 8005e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e9a:	f000 b817 	b.w	8005ecc <_kill_r>
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d00a      	beq.n	8005eb8 <_raise_r+0x4c>
 8005ea2:	1c59      	adds	r1, r3, #1
 8005ea4:	d103      	bne.n	8005eae <_raise_r+0x42>
 8005ea6:	2316      	movs	r3, #22
 8005ea8:	6003      	str	r3, [r0, #0]
 8005eaa:	2001      	movs	r0, #1
 8005eac:	e7e7      	b.n	8005e7e <_raise_r+0x12>
 8005eae:	2400      	movs	r4, #0
 8005eb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	4798      	blx	r3
 8005eb8:	2000      	movs	r0, #0
 8005eba:	e7e0      	b.n	8005e7e <_raise_r+0x12>

08005ebc <raise>:
 8005ebc:	4b02      	ldr	r3, [pc, #8]	; (8005ec8 <raise+0xc>)
 8005ebe:	4601      	mov	r1, r0
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	f7ff bfd3 	b.w	8005e6c <_raise_r>
 8005ec6:	bf00      	nop
 8005ec8:	20000064 	.word	0x20000064

08005ecc <_kill_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4d07      	ldr	r5, [pc, #28]	; (8005eec <_kill_r+0x20>)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	602b      	str	r3, [r5, #0]
 8005eda:	f7fb fb65 	bl	80015a8 <_kill>
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	d102      	bne.n	8005ee8 <_kill_r+0x1c>
 8005ee2:	682b      	ldr	r3, [r5, #0]
 8005ee4:	b103      	cbz	r3, 8005ee8 <_kill_r+0x1c>
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	bd38      	pop	{r3, r4, r5, pc}
 8005eea:	bf00      	nop
 8005eec:	20000424 	.word	0x20000424

08005ef0 <_getpid_r>:
 8005ef0:	f7fb bb52 	b.w	8001598 <_getpid>

08005ef4 <__swhatbuf_r>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005efc:	2900      	cmp	r1, #0
 8005efe:	b096      	sub	sp, #88	; 0x58
 8005f00:	4615      	mov	r5, r2
 8005f02:	461e      	mov	r6, r3
 8005f04:	da0d      	bge.n	8005f22 <__swhatbuf_r+0x2e>
 8005f06:	89a3      	ldrh	r3, [r4, #12]
 8005f08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f0c:	f04f 0100 	mov.w	r1, #0
 8005f10:	bf0c      	ite	eq
 8005f12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005f16:	2340      	movne	r3, #64	; 0x40
 8005f18:	2000      	movs	r0, #0
 8005f1a:	6031      	str	r1, [r6, #0]
 8005f1c:	602b      	str	r3, [r5, #0]
 8005f1e:	b016      	add	sp, #88	; 0x58
 8005f20:	bd70      	pop	{r4, r5, r6, pc}
 8005f22:	466a      	mov	r2, sp
 8005f24:	f000 f848 	bl	8005fb8 <_fstat_r>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	dbec      	blt.n	8005f06 <__swhatbuf_r+0x12>
 8005f2c:	9901      	ldr	r1, [sp, #4]
 8005f2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005f32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005f36:	4259      	negs	r1, r3
 8005f38:	4159      	adcs	r1, r3
 8005f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f3e:	e7eb      	b.n	8005f18 <__swhatbuf_r+0x24>

08005f40 <__smakebuf_r>:
 8005f40:	898b      	ldrh	r3, [r1, #12]
 8005f42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f44:	079d      	lsls	r5, r3, #30
 8005f46:	4606      	mov	r6, r0
 8005f48:	460c      	mov	r4, r1
 8005f4a:	d507      	bpl.n	8005f5c <__smakebuf_r+0x1c>
 8005f4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	6123      	str	r3, [r4, #16]
 8005f54:	2301      	movs	r3, #1
 8005f56:	6163      	str	r3, [r4, #20]
 8005f58:	b002      	add	sp, #8
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	ab01      	add	r3, sp, #4
 8005f5e:	466a      	mov	r2, sp
 8005f60:	f7ff ffc8 	bl	8005ef4 <__swhatbuf_r>
 8005f64:	9900      	ldr	r1, [sp, #0]
 8005f66:	4605      	mov	r5, r0
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f7ff f873 	bl	8005054 <_malloc_r>
 8005f6e:	b948      	cbnz	r0, 8005f84 <__smakebuf_r+0x44>
 8005f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f74:	059a      	lsls	r2, r3, #22
 8005f76:	d4ef      	bmi.n	8005f58 <__smakebuf_r+0x18>
 8005f78:	f023 0303 	bic.w	r3, r3, #3
 8005f7c:	f043 0302 	orr.w	r3, r3, #2
 8005f80:	81a3      	strh	r3, [r4, #12]
 8005f82:	e7e3      	b.n	8005f4c <__smakebuf_r+0xc>
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	6020      	str	r0, [r4, #0]
 8005f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8c:	81a3      	strh	r3, [r4, #12]
 8005f8e:	9b00      	ldr	r3, [sp, #0]
 8005f90:	6163      	str	r3, [r4, #20]
 8005f92:	9b01      	ldr	r3, [sp, #4]
 8005f94:	6120      	str	r0, [r4, #16]
 8005f96:	b15b      	cbz	r3, 8005fb0 <__smakebuf_r+0x70>
 8005f98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f000 f81d 	bl	8005fdc <_isatty_r>
 8005fa2:	b128      	cbz	r0, 8005fb0 <__smakebuf_r+0x70>
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	f023 0303 	bic.w	r3, r3, #3
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	81a3      	strh	r3, [r4, #12]
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	431d      	orrs	r5, r3
 8005fb4:	81a5      	strh	r5, [r4, #12]
 8005fb6:	e7cf      	b.n	8005f58 <__smakebuf_r+0x18>

08005fb8 <_fstat_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4d07      	ldr	r5, [pc, #28]	; (8005fd8 <_fstat_r+0x20>)
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	4608      	mov	r0, r1
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	602b      	str	r3, [r5, #0]
 8005fc6:	f7fb fb4e 	bl	8001666 <_fstat>
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	d102      	bne.n	8005fd4 <_fstat_r+0x1c>
 8005fce:	682b      	ldr	r3, [r5, #0]
 8005fd0:	b103      	cbz	r3, 8005fd4 <_fstat_r+0x1c>
 8005fd2:	6023      	str	r3, [r4, #0]
 8005fd4:	bd38      	pop	{r3, r4, r5, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000424 	.word	0x20000424

08005fdc <_isatty_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4d06      	ldr	r5, [pc, #24]	; (8005ff8 <_isatty_r+0x1c>)
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	602b      	str	r3, [r5, #0]
 8005fe8:	f7fb fb4d 	bl	8001686 <_isatty>
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d102      	bne.n	8005ff6 <_isatty_r+0x1a>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	b103      	cbz	r3, 8005ff6 <_isatty_r+0x1a>
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	bd38      	pop	{r3, r4, r5, pc}
 8005ff8:	20000424 	.word	0x20000424

08005ffc <_init>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	bf00      	nop
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr

08006008 <_fini>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	bf00      	nop
 800600c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600e:	bc08      	pop	{r3}
 8006010:	469e      	mov	lr, r3
 8006012:	4770      	bx	lr
